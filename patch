diff -uNr old/arch/x86/boot/cpustr.h new/arch/x86/boot/cpustr.h
--- old/arch/x86/boot/cpustr.h	1970-01-01 05:30:00.000000000 +0530
+++ new/arch/x86/boot/cpustr.h	2015-01-29 23:48:29.000000000 +0530
@@ -0,0 +1,519 @@
+static const char x86_cap_strs[] =
+#if REQUIRED_MASK0 & (1 << 0)
+	"\x00\x00""fpu\0"
+#endif
+#if REQUIRED_MASK0 & (1 << 1)
+	"\x00\x01""vme\0"
+#endif
+#if REQUIRED_MASK0 & (1 << 2)
+	"\x00\x02""de\0"
+#endif
+#if REQUIRED_MASK0 & (1 << 3)
+	"\x00\x03""pse\0"
+#endif
+#if REQUIRED_MASK0 & (1 << 4)
+	"\x00\x04""tsc\0"
+#endif
+#if REQUIRED_MASK0 & (1 << 5)
+	"\x00\x05""msr\0"
+#endif
+#if REQUIRED_MASK0 & (1 << 6)
+	"\x00\x06""pae\0"
+#endif
+#if REQUIRED_MASK0 & (1 << 7)
+	"\x00\x07""mce\0"
+#endif
+#if REQUIRED_MASK0 & (1 << 8)
+	"\x00\x08""cx8\0"
+#endif
+#if REQUIRED_MASK0 & (1 << 9)
+	"\x00\x09""apic\0"
+#endif
+#if REQUIRED_MASK0 & (1 << 11)
+	"\x00\x0b""sep\0"
+#endif
+#if REQUIRED_MASK0 & (1 << 12)
+	"\x00\x0c""mtrr\0"
+#endif
+#if REQUIRED_MASK0 & (1 << 13)
+	"\x00\x0d""pge\0"
+#endif
+#if REQUIRED_MASK0 & (1 << 14)
+	"\x00\x0e""mca\0"
+#endif
+#if REQUIRED_MASK0 & (1 << 15)
+	"\x00\x0f""cmov\0"
+#endif
+#if REQUIRED_MASK0 & (1 << 16)
+	"\x00\x10""pat\0"
+#endif
+#if REQUIRED_MASK0 & (1 << 17)
+	"\x00\x11""pse36\0"
+#endif
+#if REQUIRED_MASK0 & (1 << 18)
+	"\x00\x12""pn\0"
+#endif
+#if REQUIRED_MASK0 & (1 << 19)
+	"\x00\x13""clflush\0"
+#endif
+#if REQUIRED_MASK0 & (1 << 21)
+	"\x00\x15""dts\0"
+#endif
+#if REQUIRED_MASK0 & (1 << 22)
+	"\x00\x16""acpi\0"
+#endif
+#if REQUIRED_MASK0 & (1 << 23)
+	"\x00\x17""mmx\0"
+#endif
+#if REQUIRED_MASK0 & (1 << 24)
+	"\x00\x18""fxsr\0"
+#endif
+#if REQUIRED_MASK0 & (1 << 25)
+	"\x00\x19""sse\0"
+#endif
+#if REQUIRED_MASK0 & (1 << 26)
+	"\x00\x1a""sse2\0"
+#endif
+#if REQUIRED_MASK0 & (1 << 27)
+	"\x00\x1b""ss\0"
+#endif
+#if REQUIRED_MASK0 & (1 << 28)
+	"\x00\x1c""ht\0"
+#endif
+#if REQUIRED_MASK0 & (1 << 29)
+	"\x00\x1d""tm\0"
+#endif
+#if REQUIRED_MASK0 & (1 << 30)
+	"\x00\x1e""ia64\0"
+#endif
+#if REQUIRED_MASK0 & (1 << 31)
+	"\x00\x1f""pbe\0"
+#endif
+#if REQUIRED_MASK1 & (1 << 11)
+	"\x01\x0b""syscall\0"
+#endif
+#if REQUIRED_MASK1 & (1 << 19)
+	"\x01\x13""mp\0"
+#endif
+#if REQUIRED_MASK1 & (1 << 20)
+	"\x01\x14""nx\0"
+#endif
+#if REQUIRED_MASK1 & (1 << 22)
+	"\x01\x16""mmxext\0"
+#endif
+#if REQUIRED_MASK1 & (1 << 25)
+	"\x01\x19""fxsr_opt\0"
+#endif
+#if REQUIRED_MASK1 & (1 << 26)
+	"\x01\x1a""pdpe1gb\0"
+#endif
+#if REQUIRED_MASK1 & (1 << 27)
+	"\x01\x1b""rdtscp\0"
+#endif
+#if REQUIRED_MASK1 & (1 << 29)
+	"\x01\x1d""lm\0"
+#endif
+#if REQUIRED_MASK1 & (1 << 30)
+	"\x01\x1e""3dnowext\0"
+#endif
+#if REQUIRED_MASK1 & (1 << 31)
+	"\x01\x1f""3dnow\0"
+#endif
+#if REQUIRED_MASK2 & (1 << 0)
+	"\x02\x00""recovery\0"
+#endif
+#if REQUIRED_MASK2 & (1 << 1)
+	"\x02\x01""longrun\0"
+#endif
+#if REQUIRED_MASK2 & (1 << 3)
+	"\x02\x03""lrti\0"
+#endif
+#if REQUIRED_MASK3 & (1 << 0)
+	"\x03\x00""cxmmx\0"
+#endif
+#if REQUIRED_MASK3 & (1 << 1)
+	"\x03\x01""k6_mtrr\0"
+#endif
+#if REQUIRED_MASK3 & (1 << 2)
+	"\x03\x02""cyrix_arr\0"
+#endif
+#if REQUIRED_MASK3 & (1 << 3)
+	"\x03\x03""centaur_mcr\0"
+#endif
+#if REQUIRED_MASK3 & (1 << 8)
+	"\x03\x08""constant_tsc\0"
+#endif
+#if REQUIRED_MASK3 & (1 << 9)
+	"\x03\x09""up\0"
+#endif
+#if REQUIRED_MASK3 & (1 << 11)
+	"\x03\x0b""arch_perfmon\0"
+#endif
+#if REQUIRED_MASK3 & (1 << 12)
+	"\x03\x0c""pebs\0"
+#endif
+#if REQUIRED_MASK3 & (1 << 13)
+	"\x03\x0d""bts\0"
+#endif
+#if REQUIRED_MASK3 & (1 << 16)
+	"\x03\x10""rep_good\0"
+#endif
+#if REQUIRED_MASK3 & (1 << 20)
+	"\x03\x14""nopl\0"
+#endif
+#if REQUIRED_MASK3 & (1 << 22)
+	"\x03\x16""xtopology\0"
+#endif
+#if REQUIRED_MASK3 & (1 << 23)
+	"\x03\x17""tsc_reliable\0"
+#endif
+#if REQUIRED_MASK3 & (1 << 24)
+	"\x03\x18""nonstop_tsc\0"
+#endif
+#if REQUIRED_MASK3 & (1 << 26)
+	"\x03\x1a""extd_apicid\0"
+#endif
+#if REQUIRED_MASK3 & (1 << 27)
+	"\x03\x1b""amd_dcm\0"
+#endif
+#if REQUIRED_MASK3 & (1 << 28)
+	"\x03\x1c""aperfmperf\0"
+#endif
+#if REQUIRED_MASK3 & (1 << 29)
+	"\x03\x1d""eagerfpu\0"
+#endif
+#if REQUIRED_MASK3 & (1 << 30)
+	"\x03\x1e""nonstop_tsc_s3\0"
+#endif
+#if REQUIRED_MASK4 & (1 << 0)
+	"\x04\x00""pni\0"
+#endif
+#if REQUIRED_MASK4 & (1 << 1)
+	"\x04\x01""pclmulqdq\0"
+#endif
+#if REQUIRED_MASK4 & (1 << 2)
+	"\x04\x02""dtes64\0"
+#endif
+#if REQUIRED_MASK4 & (1 << 3)
+	"\x04\x03""monitor\0"
+#endif
+#if REQUIRED_MASK4 & (1 << 4)
+	"\x04\x04""ds_cpl\0"
+#endif
+#if REQUIRED_MASK4 & (1 << 5)
+	"\x04\x05""vmx\0"
+#endif
+#if REQUIRED_MASK4 & (1 << 6)
+	"\x04\x06""smx\0"
+#endif
+#if REQUIRED_MASK4 & (1 << 7)
+	"\x04\x07""est\0"
+#endif
+#if REQUIRED_MASK4 & (1 << 8)
+	"\x04\x08""tm2\0"
+#endif
+#if REQUIRED_MASK4 & (1 << 9)
+	"\x04\x09""ssse3\0"
+#endif
+#if REQUIRED_MASK4 & (1 << 10)
+	"\x04\x0a""cid\0"
+#endif
+#if REQUIRED_MASK4 & (1 << 12)
+	"\x04\x0c""fma\0"
+#endif
+#if REQUIRED_MASK4 & (1 << 13)
+	"\x04\x0d""cx16\0"
+#endif
+#if REQUIRED_MASK4 & (1 << 14)
+	"\x04\x0e""xtpr\0"
+#endif
+#if REQUIRED_MASK4 & (1 << 15)
+	"\x04\x0f""pdcm\0"
+#endif
+#if REQUIRED_MASK4 & (1 << 17)
+	"\x04\x11""pcid\0"
+#endif
+#if REQUIRED_MASK4 & (1 << 18)
+	"\x04\x12""dca\0"
+#endif
+#if REQUIRED_MASK4 & (1 << 19)
+	"\x04\x13""sse4_1\0"
+#endif
+#if REQUIRED_MASK4 & (1 << 20)
+	"\x04\x14""sse4_2\0"
+#endif
+#if REQUIRED_MASK4 & (1 << 21)
+	"\x04\x15""x2apic\0"
+#endif
+#if REQUIRED_MASK4 & (1 << 22)
+	"\x04\x16""movbe\0"
+#endif
+#if REQUIRED_MASK4 & (1 << 23)
+	"\x04\x17""popcnt\0"
+#endif
+#if REQUIRED_MASK4 & (1 << 24)
+	"\x04\x18""tsc_deadline_timer\0"
+#endif
+#if REQUIRED_MASK4 & (1 << 25)
+	"\x04\x19""aes\0"
+#endif
+#if REQUIRED_MASK4 & (1 << 26)
+	"\x04\x1a""xsave\0"
+#endif
+#if REQUIRED_MASK4 & (1 << 28)
+	"\x04\x1c""avx\0"
+#endif
+#if REQUIRED_MASK4 & (1 << 29)
+	"\x04\x1d""f16c\0"
+#endif
+#if REQUIRED_MASK4 & (1 << 30)
+	"\x04\x1e""rdrand\0"
+#endif
+#if REQUIRED_MASK4 & (1 << 31)
+	"\x04\x1f""hypervisor\0"
+#endif
+#if REQUIRED_MASK5 & (1 << 2)
+	"\x05\x02""rng\0"
+#endif
+#if REQUIRED_MASK5 & (1 << 3)
+	"\x05\x03""rng_en\0"
+#endif
+#if REQUIRED_MASK5 & (1 << 6)
+	"\x05\x06""ace\0"
+#endif
+#if REQUIRED_MASK5 & (1 << 7)
+	"\x05\x07""ace_en\0"
+#endif
+#if REQUIRED_MASK5 & (1 << 8)
+	"\x05\x08""ace2\0"
+#endif
+#if REQUIRED_MASK5 & (1 << 9)
+	"\x05\x09""ace2_en\0"
+#endif
+#if REQUIRED_MASK5 & (1 << 10)
+	"\x05\x0a""phe\0"
+#endif
+#if REQUIRED_MASK5 & (1 << 11)
+	"\x05\x0b""phe_en\0"
+#endif
+#if REQUIRED_MASK5 & (1 << 12)
+	"\x05\x0c""pmm\0"
+#endif
+#if REQUIRED_MASK5 & (1 << 13)
+	"\x05\x0d""pmm_en\0"
+#endif
+#if REQUIRED_MASK6 & (1 << 0)
+	"\x06\x00""lahf_lm\0"
+#endif
+#if REQUIRED_MASK6 & (1 << 1)
+	"\x06\x01""cmp_legacy\0"
+#endif
+#if REQUIRED_MASK6 & (1 << 2)
+	"\x06\x02""svm\0"
+#endif
+#if REQUIRED_MASK6 & (1 << 3)
+	"\x06\x03""extapic\0"
+#endif
+#if REQUIRED_MASK6 & (1 << 4)
+	"\x06\x04""cr8_legacy\0"
+#endif
+#if REQUIRED_MASK6 & (1 << 5)
+	"\x06\x05""abm\0"
+#endif
+#if REQUIRED_MASK6 & (1 << 6)
+	"\x06\x06""sse4a\0"
+#endif
+#if REQUIRED_MASK6 & (1 << 7)
+	"\x06\x07""misalignsse\0"
+#endif
+#if REQUIRED_MASK6 & (1 << 8)
+	"\x06\x08""3dnowprefetch\0"
+#endif
+#if REQUIRED_MASK6 & (1 << 9)
+	"\x06\x09""osvw\0"
+#endif
+#if REQUIRED_MASK6 & (1 << 10)
+	"\x06\x0a""ibs\0"
+#endif
+#if REQUIRED_MASK6 & (1 << 11)
+	"\x06\x0b""xop\0"
+#endif
+#if REQUIRED_MASK6 & (1 << 12)
+	"\x06\x0c""skinit\0"
+#endif
+#if REQUIRED_MASK6 & (1 << 13)
+	"\x06\x0d""wdt\0"
+#endif
+#if REQUIRED_MASK6 & (1 << 15)
+	"\x06\x0f""lwp\0"
+#endif
+#if REQUIRED_MASK6 & (1 << 16)
+	"\x06\x10""fma4\0"
+#endif
+#if REQUIRED_MASK6 & (1 << 17)
+	"\x06\x11""tce\0"
+#endif
+#if REQUIRED_MASK6 & (1 << 19)
+	"\x06\x13""nodeid_msr\0"
+#endif
+#if REQUIRED_MASK6 & (1 << 21)
+	"\x06\x15""tbm\0"
+#endif
+#if REQUIRED_MASK6 & (1 << 22)
+	"\x06\x16""topoext\0"
+#endif
+#if REQUIRED_MASK6 & (1 << 23)
+	"\x06\x17""perfctr_core\0"
+#endif
+#if REQUIRED_MASK6 & (1 << 24)
+	"\x06\x18""perfctr_nb\0"
+#endif
+#if REQUIRED_MASK6 & (1 << 28)
+	"\x06\x1c""perfctr_l2\0"
+#endif
+#if REQUIRED_MASK7 & (1 << 0)
+	"\x07\x00""ida\0"
+#endif
+#if REQUIRED_MASK7 & (1 << 1)
+	"\x07\x01""arat\0"
+#endif
+#if REQUIRED_MASK7 & (1 << 2)
+	"\x07\x02""cpb\0"
+#endif
+#if REQUIRED_MASK7 & (1 << 3)
+	"\x07\x03""epb\0"
+#endif
+#if REQUIRED_MASK7 & (1 << 5)
+	"\x07\x05""pln\0"
+#endif
+#if REQUIRED_MASK7 & (1 << 6)
+	"\x07\x06""pts\0"
+#endif
+#if REQUIRED_MASK7 & (1 << 7)
+	"\x07\x07""dtherm\0"
+#endif
+#if REQUIRED_MASK7 & (1 << 8)
+	"\x07\x08""hw_pstate\0"
+#endif
+#if REQUIRED_MASK7 & (1 << 9)
+	"\x07\x09""proc_feedback\0"
+#endif
+#if REQUIRED_MASK8 & (1 << 0)
+	"\x08\x00""tpr_shadow\0"
+#endif
+#if REQUIRED_MASK8 & (1 << 1)
+	"\x08\x01""vnmi\0"
+#endif
+#if REQUIRED_MASK8 & (1 << 2)
+	"\x08\x02""flexpriority\0"
+#endif
+#if REQUIRED_MASK8 & (1 << 3)
+	"\x08\x03""ept\0"
+#endif
+#if REQUIRED_MASK8 & (1 << 4)
+	"\x08\x04""vpid\0"
+#endif
+#if REQUIRED_MASK8 & (1 << 5)
+	"\x08\x05""npt\0"
+#endif
+#if REQUIRED_MASK8 & (1 << 6)
+	"\x08\x06""lbrv\0"
+#endif
+#if REQUIRED_MASK8 & (1 << 7)
+	"\x08\x07""svm_lock\0"
+#endif
+#if REQUIRED_MASK8 & (1 << 8)
+	"\x08\x08""nrip_save\0"
+#endif
+#if REQUIRED_MASK8 & (1 << 9)
+	"\x08\x09""tsc_scale\0"
+#endif
+#if REQUIRED_MASK8 & (1 << 10)
+	"\x08\x0a""vmcb_clean\0"
+#endif
+#if REQUIRED_MASK8 & (1 << 11)
+	"\x08\x0b""flushbyasid\0"
+#endif
+#if REQUIRED_MASK8 & (1 << 12)
+	"\x08\x0c""decodeassists\0"
+#endif
+#if REQUIRED_MASK8 & (1 << 13)
+	"\x08\x0d""pausefilter\0"
+#endif
+#if REQUIRED_MASK8 & (1 << 14)
+	"\x08\x0e""pfthreshold\0"
+#endif
+#if REQUIRED_MASK8 & (1 << 15)
+	"\x08\x0f""vmmcall\0"
+#endif
+#if REQUIRED_MASK9 & (1 << 0)
+	"\x09\x00""fsgsbase\0"
+#endif
+#if REQUIRED_MASK9 & (1 << 1)
+	"\x09\x01""tsc_adjust\0"
+#endif
+#if REQUIRED_MASK9 & (1 << 3)
+	"\x09\x03""bmi1\0"
+#endif
+#if REQUIRED_MASK9 & (1 << 4)
+	"\x09\x04""hle\0"
+#endif
+#if REQUIRED_MASK9 & (1 << 5)
+	"\x09\x05""avx2\0"
+#endif
+#if REQUIRED_MASK9 & (1 << 7)
+	"\x09\x07""smep\0"
+#endif
+#if REQUIRED_MASK9 & (1 << 8)
+	"\x09\x08""bmi2\0"
+#endif
+#if REQUIRED_MASK9 & (1 << 9)
+	"\x09\x09""erms\0"
+#endif
+#if REQUIRED_MASK9 & (1 << 10)
+	"\x09\x0a""invpcid\0"
+#endif
+#if REQUIRED_MASK9 & (1 << 11)
+	"\x09\x0b""rtm\0"
+#endif
+#if REQUIRED_MASK9 & (1 << 14)
+	"\x09\x0e""mpx\0"
+#endif
+#if REQUIRED_MASK9 & (1 << 16)
+	"\x09\x10""avx512f\0"
+#endif
+#if REQUIRED_MASK9 & (1 << 18)
+	"\x09\x12""rdseed\0"
+#endif
+#if REQUIRED_MASK9 & (1 << 19)
+	"\x09\x13""adx\0"
+#endif
+#if REQUIRED_MASK9 & (1 << 20)
+	"\x09\x14""smap\0"
+#endif
+#if REQUIRED_MASK9 & (1 << 23)
+	"\x09\x17""clflushopt\0"
+#endif
+#if REQUIRED_MASK9 & (1 << 26)
+	"\x09\x1a""avx512pf\0"
+#endif
+#if REQUIRED_MASK9 & (1 << 27)
+	"\x09\x1b""avx512er\0"
+#endif
+#if REQUIRED_MASK9 & (1 << 28)
+	"\x09\x1c""avx512cd\0"
+#endif
+#if REQUIRED_MASK10 & (1 << 0)
+	"\x0a\x00""xsaveopt\0"
+#endif
+#if REQUIRED_MASK10 & (1 << 1)
+	"\x0a\x01""xsavec\0"
+#endif
+#if REQUIRED_MASK10 & (1 << 2)
+	"\x0a\x02""xgetbv1\0"
+#endif
+#if REQUIRED_MASK10 & (1 << 3)
+	"\x0a\x03""xsaves\0"
+#endif
+	"\x0a\x1f"""
+	;
diff -uNr old/arch/x86/include/generated/asm/syscalls_32.h new/arch/x86/include/generated/asm/syscalls_32.h
--- old/arch/x86/include/generated/asm/syscalls_32.h	1970-01-01 05:30:00.000000000 +0530
+++ new/arch/x86/include/generated/asm/syscalls_32.h	2015-01-29 23:58:17.000000000 +0530
@@ -0,0 +1,337 @@
+__SYSCALL_I386(0, sys_restart_syscall, sys_restart_syscall)
+__SYSCALL_I386(1, sys_exit, sys_exit)
+__SYSCALL_I386(2, sys_fork, stub32_fork)
+__SYSCALL_I386(3, sys_read, sys_read)
+__SYSCALL_I386(4, sys_write, sys_write)
+__SYSCALL_I386(5, sys_open, compat_sys_open)
+__SYSCALL_I386(6, sys_close, sys_close)
+__SYSCALL_I386(7, sys_waitpid, sys32_waitpid)
+__SYSCALL_I386(8, sys_creat, sys_creat)
+__SYSCALL_I386(9, sys_link, sys_link)
+__SYSCALL_I386(10, sys_unlink, sys_unlink)
+__SYSCALL_I386(11, sys_execve, stub32_execve)
+__SYSCALL_I386(12, sys_chdir, sys_chdir)
+__SYSCALL_I386(13, sys_time, compat_sys_time)
+__SYSCALL_I386(14, sys_mknod, sys_mknod)
+__SYSCALL_I386(15, sys_chmod, sys_chmod)
+__SYSCALL_I386(16, sys_lchown16, sys_lchown16)
+__SYSCALL_I386(18, sys_stat, sys_stat)
+__SYSCALL_I386(19, sys_lseek, compat_sys_lseek)
+__SYSCALL_I386(20, sys_getpid, sys_getpid)
+__SYSCALL_I386(21, sys_mount, compat_sys_mount)
+__SYSCALL_I386(22, sys_oldumount, sys_oldumount)
+__SYSCALL_I386(23, sys_setuid16, sys_setuid16)
+__SYSCALL_I386(24, sys_getuid16, sys_getuid16)
+__SYSCALL_I386(25, sys_stime, compat_sys_stime)
+__SYSCALL_I386(26, sys_ptrace, compat_sys_ptrace)
+__SYSCALL_I386(27, sys_alarm, sys_alarm)
+__SYSCALL_I386(28, sys_fstat, sys_fstat)
+__SYSCALL_I386(29, sys_pause, sys_pause)
+__SYSCALL_I386(30, sys_utime, compat_sys_utime)
+__SYSCALL_I386(33, sys_access, sys_access)
+__SYSCALL_I386(34, sys_nice, sys_nice)
+__SYSCALL_I386(36, sys_sync, sys_sync)
+__SYSCALL_I386(37, sys_kill, sys_kill)
+__SYSCALL_I386(38, sys_rename, sys_rename)
+__SYSCALL_I386(39, sys_mkdir, sys_mkdir)
+__SYSCALL_I386(40, sys_rmdir, sys_rmdir)
+__SYSCALL_I386(41, sys_dup, sys_dup)
+__SYSCALL_I386(42, sys_pipe, sys_pipe)
+__SYSCALL_I386(43, sys_times, compat_sys_times)
+__SYSCALL_I386(45, sys_brk, sys_brk)
+__SYSCALL_I386(46, sys_setgid16, sys_setgid16)
+__SYSCALL_I386(47, sys_getgid16, sys_getgid16)
+__SYSCALL_I386(48, sys_signal, sys_signal)
+__SYSCALL_I386(49, sys_geteuid16, sys_geteuid16)
+__SYSCALL_I386(50, sys_getegid16, sys_getegid16)
+__SYSCALL_I386(51, sys_acct, sys_acct)
+__SYSCALL_I386(52, sys_umount, sys_umount)
+__SYSCALL_I386(54, sys_ioctl, compat_sys_ioctl)
+__SYSCALL_I386(55, sys_fcntl, compat_sys_fcntl64)
+__SYSCALL_I386(57, sys_setpgid, sys_setpgid)
+__SYSCALL_I386(59, sys_olduname, sys_olduname)
+__SYSCALL_I386(60, sys_umask, sys_umask)
+__SYSCALL_I386(61, sys_chroot, sys_chroot)
+__SYSCALL_I386(62, sys_ustat, compat_sys_ustat)
+__SYSCALL_I386(63, sys_dup2, sys_dup2)
+__SYSCALL_I386(64, sys_getppid, sys_getppid)
+__SYSCALL_I386(65, sys_getpgrp, sys_getpgrp)
+__SYSCALL_I386(66, sys_setsid, sys_setsid)
+__SYSCALL_I386(67, sys_sigaction, compat_sys_sigaction)
+__SYSCALL_I386(68, sys_sgetmask, sys_sgetmask)
+__SYSCALL_I386(69, sys_ssetmask, sys_ssetmask)
+__SYSCALL_I386(70, sys_setreuid16, sys_setreuid16)
+__SYSCALL_I386(71, sys_setregid16, sys_setregid16)
+__SYSCALL_I386(72, sys_sigsuspend, sys_sigsuspend)
+__SYSCALL_I386(73, sys_sigpending, compat_sys_sigpending)
+__SYSCALL_I386(74, sys_sethostname, sys_sethostname)
+__SYSCALL_I386(75, sys_setrlimit, compat_sys_setrlimit)
+__SYSCALL_I386(76, sys_old_getrlimit, compat_sys_old_getrlimit)
+__SYSCALL_I386(77, sys_getrusage, compat_sys_getrusage)
+__SYSCALL_I386(78, sys_gettimeofday, compat_sys_gettimeofday)
+__SYSCALL_I386(79, sys_settimeofday, compat_sys_settimeofday)
+__SYSCALL_I386(80, sys_getgroups16, sys_getgroups16)
+__SYSCALL_I386(81, sys_setgroups16, sys_setgroups16)
+__SYSCALL_I386(82, sys_old_select, compat_sys_old_select)
+__SYSCALL_I386(83, sys_symlink, sys_symlink)
+__SYSCALL_I386(84, sys_lstat, sys_lstat)
+__SYSCALL_I386(85, sys_readlink, sys_readlink)
+__SYSCALL_I386(86, sys_uselib, sys_uselib)
+__SYSCALL_I386(87, sys_swapon, sys_swapon)
+__SYSCALL_I386(88, sys_reboot, sys_reboot)
+__SYSCALL_I386(89, sys_old_readdir, compat_sys_old_readdir)
+__SYSCALL_I386(90, sys_old_mmap, sys32_mmap)
+__SYSCALL_I386(91, sys_munmap, sys_munmap)
+__SYSCALL_I386(92, sys_truncate, compat_sys_truncate)
+__SYSCALL_I386(93, sys_ftruncate, compat_sys_ftruncate)
+__SYSCALL_I386(94, sys_fchmod, sys_fchmod)
+__SYSCALL_I386(95, sys_fchown16, sys_fchown16)
+__SYSCALL_I386(96, sys_getpriority, sys_getpriority)
+__SYSCALL_I386(97, sys_setpriority, sys_setpriority)
+__SYSCALL_I386(99, sys_statfs, compat_sys_statfs)
+__SYSCALL_I386(100, sys_fstatfs, compat_sys_fstatfs)
+__SYSCALL_I386(101, sys_ioperm, sys_ioperm)
+__SYSCALL_I386(102, sys_socketcall, compat_sys_socketcall)
+__SYSCALL_I386(103, sys_syslog, sys_syslog)
+__SYSCALL_I386(104, sys_setitimer, compat_sys_setitimer)
+__SYSCALL_I386(105, sys_getitimer, compat_sys_getitimer)
+__SYSCALL_I386(106, sys_newstat, compat_sys_newstat)
+__SYSCALL_I386(107, sys_newlstat, compat_sys_newlstat)
+__SYSCALL_I386(108, sys_newfstat, compat_sys_newfstat)
+__SYSCALL_I386(109, sys_uname, sys_uname)
+__SYSCALL_I386(110, sys_iopl, sys_iopl)
+__SYSCALL_I386(111, sys_vhangup, sys_vhangup)
+__SYSCALL_I386(113, sys_vm86old, sys32_vm86_warning)
+__SYSCALL_I386(114, sys_wait4, compat_sys_wait4)
+__SYSCALL_I386(115, sys_swapoff, sys_swapoff)
+__SYSCALL_I386(116, sys_sysinfo, compat_sys_sysinfo)
+__SYSCALL_I386(117, sys_ipc, compat_sys_ipc)
+__SYSCALL_I386(118, sys_fsync, sys_fsync)
+__SYSCALL_I386(119, sys_sigreturn, stub32_sigreturn)
+__SYSCALL_I386(120, sys_clone, stub32_clone)
+__SYSCALL_I386(121, sys_setdomainname, sys_setdomainname)
+__SYSCALL_I386(122, sys_newuname, sys_newuname)
+__SYSCALL_I386(123, sys_modify_ldt, sys_modify_ldt)
+__SYSCALL_I386(124, sys_adjtimex, compat_sys_adjtimex)
+__SYSCALL_I386(125, sys_mprotect, sys_mprotect)
+__SYSCALL_I386(126, sys_sigprocmask, compat_sys_sigprocmask)
+__SYSCALL_I386(128, sys_init_module, sys_init_module)
+__SYSCALL_I386(129, sys_delete_module, sys_delete_module)
+__SYSCALL_I386(131, sys_quotactl, sys32_quotactl)
+__SYSCALL_I386(132, sys_getpgid, sys_getpgid)
+__SYSCALL_I386(133, sys_fchdir, sys_fchdir)
+__SYSCALL_I386(134, sys_bdflush, sys_bdflush)
+__SYSCALL_I386(135, sys_sysfs, sys_sysfs)
+__SYSCALL_I386(136, sys_personality, sys_personality)
+__SYSCALL_I386(138, sys_setfsuid16, sys_setfsuid16)
+__SYSCALL_I386(139, sys_setfsgid16, sys_setfsgid16)
+__SYSCALL_I386(140, sys_llseek, sys_llseek)
+__SYSCALL_I386(141, sys_getdents, compat_sys_getdents)
+__SYSCALL_I386(142, sys_select, compat_sys_select)
+__SYSCALL_I386(143, sys_flock, sys_flock)
+__SYSCALL_I386(144, sys_msync, sys_msync)
+__SYSCALL_I386(145, sys_readv, compat_sys_readv)
+__SYSCALL_I386(146, sys_writev, compat_sys_writev)
+__SYSCALL_I386(147, sys_getsid, sys_getsid)
+__SYSCALL_I386(148, sys_fdatasync, sys_fdatasync)
+__SYSCALL_I386(149, sys_sysctl, compat_sys_sysctl)
+__SYSCALL_I386(150, sys_mlock, sys_mlock)
+__SYSCALL_I386(151, sys_munlock, sys_munlock)
+__SYSCALL_I386(152, sys_mlockall, sys_mlockall)
+__SYSCALL_I386(153, sys_munlockall, sys_munlockall)
+__SYSCALL_I386(154, sys_sched_setparam, sys_sched_setparam)
+__SYSCALL_I386(155, sys_sched_getparam, sys_sched_getparam)
+__SYSCALL_I386(156, sys_sched_setscheduler, sys_sched_setscheduler)
+__SYSCALL_I386(157, sys_sched_getscheduler, sys_sched_getscheduler)
+__SYSCALL_I386(158, sys_sched_yield, sys_sched_yield)
+__SYSCALL_I386(159, sys_sched_get_priority_max, sys_sched_get_priority_max)
+__SYSCALL_I386(160, sys_sched_get_priority_min, sys_sched_get_priority_min)
+__SYSCALL_I386(161, sys_sched_rr_get_interval, compat_sys_sched_rr_get_interval)
+__SYSCALL_I386(162, sys_nanosleep, compat_sys_nanosleep)
+__SYSCALL_I386(163, sys_mremap, sys_mremap)
+__SYSCALL_I386(164, sys_setresuid16, sys_setresuid16)
+__SYSCALL_I386(165, sys_getresuid16, sys_getresuid16)
+__SYSCALL_I386(166, sys_vm86, sys32_vm86_warning)
+__SYSCALL_I386(168, sys_poll, sys_poll)
+__SYSCALL_I386(170, sys_setresgid16, sys_setresgid16)
+__SYSCALL_I386(171, sys_getresgid16, sys_getresgid16)
+__SYSCALL_I386(172, sys_prctl, sys_prctl)
+__SYSCALL_I386(173, sys_rt_sigreturn, stub32_rt_sigreturn)
+__SYSCALL_I386(174, sys_rt_sigaction, compat_sys_rt_sigaction)
+__SYSCALL_I386(175, sys_rt_sigprocmask, sys_rt_sigprocmask)
+__SYSCALL_I386(176, sys_rt_sigpending, compat_sys_rt_sigpending)
+__SYSCALL_I386(177, sys_rt_sigtimedwait, compat_sys_rt_sigtimedwait)
+__SYSCALL_I386(178, sys_rt_sigqueueinfo, compat_sys_rt_sigqueueinfo)
+__SYSCALL_I386(179, sys_rt_sigsuspend, sys_rt_sigsuspend)
+__SYSCALL_I386(180, sys_pread64, sys32_pread)
+__SYSCALL_I386(181, sys_pwrite64, sys32_pwrite)
+__SYSCALL_I386(182, sys_chown16, sys_chown16)
+__SYSCALL_I386(183, sys_getcwd, sys_getcwd)
+__SYSCALL_I386(184, sys_capget, sys_capget)
+__SYSCALL_I386(185, sys_capset, sys_capset)
+__SYSCALL_I386(186, sys_sigaltstack, compat_sys_sigaltstack)
+__SYSCALL_I386(187, sys_sendfile, compat_sys_sendfile)
+__SYSCALL_I386(190, sys_vfork, stub32_vfork)
+__SYSCALL_I386(191, sys_getrlimit, compat_sys_getrlimit)
+__SYSCALL_I386(192, sys_mmap_pgoff, sys_mmap_pgoff)
+__SYSCALL_I386(193, sys_truncate64, sys32_truncate64)
+__SYSCALL_I386(194, sys_ftruncate64, sys32_ftruncate64)
+__SYSCALL_I386(195, sys_stat64, sys32_stat64)
+__SYSCALL_I386(196, sys_lstat64, sys32_lstat64)
+__SYSCALL_I386(197, sys_fstat64, sys32_fstat64)
+__SYSCALL_I386(198, sys_lchown, sys_lchown)
+__SYSCALL_I386(199, sys_getuid, sys_getuid)
+__SYSCALL_I386(200, sys_getgid, sys_getgid)
+__SYSCALL_I386(201, sys_geteuid, sys_geteuid)
+__SYSCALL_I386(202, sys_getegid, sys_getegid)
+__SYSCALL_I386(203, sys_setreuid, sys_setreuid)
+__SYSCALL_I386(204, sys_setregid, sys_setregid)
+__SYSCALL_I386(205, sys_getgroups, sys_getgroups)
+__SYSCALL_I386(206, sys_setgroups, sys_setgroups)
+__SYSCALL_I386(207, sys_fchown, sys_fchown)
+__SYSCALL_I386(208, sys_setresuid, sys_setresuid)
+__SYSCALL_I386(209, sys_getresuid, sys_getresuid)
+__SYSCALL_I386(210, sys_setresgid, sys_setresgid)
+__SYSCALL_I386(211, sys_getresgid, sys_getresgid)
+__SYSCALL_I386(212, sys_chown, sys_chown)
+__SYSCALL_I386(213, sys_setuid, sys_setuid)
+__SYSCALL_I386(214, sys_setgid, sys_setgid)
+__SYSCALL_I386(215, sys_setfsuid, sys_setfsuid)
+__SYSCALL_I386(216, sys_setfsgid, sys_setfsgid)
+__SYSCALL_I386(217, sys_pivot_root, sys_pivot_root)
+__SYSCALL_I386(218, sys_mincore, sys_mincore)
+__SYSCALL_I386(219, sys_madvise, sys_madvise)
+__SYSCALL_I386(220, sys_getdents64, compat_sys_getdents64)
+__SYSCALL_I386(221, sys_fcntl64, compat_sys_fcntl64)
+__SYSCALL_I386(224, sys_gettid, sys_gettid)
+__SYSCALL_I386(225, sys_readahead, sys32_readahead)
+__SYSCALL_I386(226, sys_setxattr, sys_setxattr)
+__SYSCALL_I386(227, sys_lsetxattr, sys_lsetxattr)
+__SYSCALL_I386(228, sys_fsetxattr, sys_fsetxattr)
+__SYSCALL_I386(229, sys_getxattr, sys_getxattr)
+__SYSCALL_I386(230, sys_lgetxattr, sys_lgetxattr)
+__SYSCALL_I386(231, sys_fgetxattr, sys_fgetxattr)
+__SYSCALL_I386(232, sys_listxattr, sys_listxattr)
+__SYSCALL_I386(233, sys_llistxattr, sys_llistxattr)
+__SYSCALL_I386(234, sys_flistxattr, sys_flistxattr)
+__SYSCALL_I386(235, sys_removexattr, sys_removexattr)
+__SYSCALL_I386(236, sys_lremovexattr, sys_lremovexattr)
+__SYSCALL_I386(237, sys_fremovexattr, sys_fremovexattr)
+__SYSCALL_I386(238, sys_tkill, sys_tkill)
+__SYSCALL_I386(239, sys_sendfile64, sys_sendfile64)
+__SYSCALL_I386(240, sys_futex, compat_sys_futex)
+__SYSCALL_I386(241, sys_sched_setaffinity, compat_sys_sched_setaffinity)
+__SYSCALL_I386(242, sys_sched_getaffinity, compat_sys_sched_getaffinity)
+__SYSCALL_I386(243, sys_set_thread_area, sys_set_thread_area)
+__SYSCALL_I386(244, sys_get_thread_area, sys_get_thread_area)
+__SYSCALL_I386(245, sys_io_setup, compat_sys_io_setup)
+__SYSCALL_I386(246, sys_io_destroy, sys_io_destroy)
+__SYSCALL_I386(247, sys_io_getevents, compat_sys_io_getevents)
+__SYSCALL_I386(248, sys_io_submit, compat_sys_io_submit)
+__SYSCALL_I386(249, sys_io_cancel, sys_io_cancel)
+__SYSCALL_I386(250, sys_fadvise64, sys32_fadvise64)
+__SYSCALL_I386(252, sys_exit_group, sys_exit_group)
+__SYSCALL_I386(253, sys_lookup_dcookie, compat_sys_lookup_dcookie)
+__SYSCALL_I386(254, sys_epoll_create, sys_epoll_create)
+__SYSCALL_I386(255, sys_epoll_ctl, sys_epoll_ctl)
+__SYSCALL_I386(256, sys_epoll_wait, sys_epoll_wait)
+__SYSCALL_I386(257, sys_remap_file_pages, sys_remap_file_pages)
+__SYSCALL_I386(258, sys_set_tid_address, sys_set_tid_address)
+__SYSCALL_I386(259, sys_timer_create, compat_sys_timer_create)
+__SYSCALL_I386(260, sys_timer_settime, compat_sys_timer_settime)
+__SYSCALL_I386(261, sys_timer_gettime, compat_sys_timer_gettime)
+__SYSCALL_I386(262, sys_timer_getoverrun, sys_timer_getoverrun)
+__SYSCALL_I386(263, sys_timer_delete, sys_timer_delete)
+__SYSCALL_I386(264, sys_clock_settime, compat_sys_clock_settime)
+__SYSCALL_I386(265, sys_clock_gettime, compat_sys_clock_gettime)
+__SYSCALL_I386(266, sys_clock_getres, compat_sys_clock_getres)
+__SYSCALL_I386(267, sys_clock_nanosleep, compat_sys_clock_nanosleep)
+__SYSCALL_I386(268, sys_statfs64, compat_sys_statfs64)
+__SYSCALL_I386(269, sys_fstatfs64, compat_sys_fstatfs64)
+__SYSCALL_I386(270, sys_tgkill, sys_tgkill)
+__SYSCALL_I386(271, sys_utimes, compat_sys_utimes)
+__SYSCALL_I386(272, sys_fadvise64_64, sys32_fadvise64_64)
+__SYSCALL_I386(274, sys_mbind, sys_mbind)
+__SYSCALL_I386(275, sys_get_mempolicy, compat_sys_get_mempolicy)
+__SYSCALL_I386(276, sys_set_mempolicy, sys_set_mempolicy)
+__SYSCALL_I386(277, sys_mq_open, compat_sys_mq_open)
+__SYSCALL_I386(278, sys_mq_unlink, sys_mq_unlink)
+__SYSCALL_I386(279, sys_mq_timedsend, compat_sys_mq_timedsend)
+__SYSCALL_I386(280, sys_mq_timedreceive, compat_sys_mq_timedreceive)
+__SYSCALL_I386(281, sys_mq_notify, compat_sys_mq_notify)
+__SYSCALL_I386(282, sys_mq_getsetattr, compat_sys_mq_getsetattr)
+__SYSCALL_I386(283, sys_kexec_load, compat_sys_kexec_load)
+__SYSCALL_I386(284, sys_waitid, compat_sys_waitid)
+__SYSCALL_I386(286, sys_add_key, sys_add_key)
+__SYSCALL_I386(287, sys_request_key, sys_request_key)
+__SYSCALL_I386(288, sys_keyctl, sys_keyctl)
+__SYSCALL_I386(289, sys_ioprio_set, sys_ioprio_set)
+__SYSCALL_I386(290, sys_ioprio_get, sys_ioprio_get)
+__SYSCALL_I386(291, sys_inotify_init, sys_inotify_init)
+__SYSCALL_I386(292, sys_inotify_add_watch, sys_inotify_add_watch)
+__SYSCALL_I386(293, sys_inotify_rm_watch, sys_inotify_rm_watch)
+__SYSCALL_I386(294, sys_migrate_pages, sys_migrate_pages)
+__SYSCALL_I386(295, sys_openat, compat_sys_openat)
+__SYSCALL_I386(296, sys_mkdirat, sys_mkdirat)
+__SYSCALL_I386(297, sys_mknodat, sys_mknodat)
+__SYSCALL_I386(298, sys_fchownat, sys_fchownat)
+__SYSCALL_I386(299, sys_futimesat, compat_sys_futimesat)
+__SYSCALL_I386(300, sys_fstatat64, sys32_fstatat)
+__SYSCALL_I386(301, sys_unlinkat, sys_unlinkat)
+__SYSCALL_I386(302, sys_renameat, sys_renameat)
+__SYSCALL_I386(303, sys_linkat, sys_linkat)
+__SYSCALL_I386(304, sys_symlinkat, sys_symlinkat)
+__SYSCALL_I386(305, sys_readlinkat, sys_readlinkat)
+__SYSCALL_I386(306, sys_fchmodat, sys_fchmodat)
+__SYSCALL_I386(307, sys_faccessat, sys_faccessat)
+__SYSCALL_I386(308, sys_pselect6, compat_sys_pselect6)
+__SYSCALL_I386(309, sys_ppoll, compat_sys_ppoll)
+__SYSCALL_I386(310, sys_unshare, sys_unshare)
+__SYSCALL_I386(311, sys_set_robust_list, compat_sys_set_robust_list)
+__SYSCALL_I386(312, sys_get_robust_list, compat_sys_get_robust_list)
+__SYSCALL_I386(313, sys_splice, sys_splice)
+__SYSCALL_I386(314, sys_sync_file_range, sys32_sync_file_range)
+__SYSCALL_I386(315, sys_tee, sys_tee)
+__SYSCALL_I386(316, sys_vmsplice, compat_sys_vmsplice)
+__SYSCALL_I386(317, sys_move_pages, compat_sys_move_pages)
+__SYSCALL_I386(318, sys_getcpu, sys_getcpu)
+__SYSCALL_I386(319, sys_epoll_pwait, sys_epoll_pwait)
+__SYSCALL_I386(320, sys_utimensat, compat_sys_utimensat)
+__SYSCALL_I386(321, sys_signalfd, compat_sys_signalfd)
+__SYSCALL_I386(322, sys_timerfd_create, sys_timerfd_create)
+__SYSCALL_I386(323, sys_eventfd, sys_eventfd)
+__SYSCALL_I386(324, sys_fallocate, sys32_fallocate)
+__SYSCALL_I386(325, sys_timerfd_settime, compat_sys_timerfd_settime)
+__SYSCALL_I386(326, sys_timerfd_gettime, compat_sys_timerfd_gettime)
+__SYSCALL_I386(327, sys_signalfd4, compat_sys_signalfd4)
+__SYSCALL_I386(328, sys_eventfd2, sys_eventfd2)
+__SYSCALL_I386(329, sys_epoll_create1, sys_epoll_create1)
+__SYSCALL_I386(330, sys_dup3, sys_dup3)
+__SYSCALL_I386(331, sys_pipe2, sys_pipe2)
+__SYSCALL_I386(332, sys_inotify_init1, sys_inotify_init1)
+__SYSCALL_I386(333, sys_preadv, compat_sys_preadv)
+__SYSCALL_I386(334, sys_pwritev, compat_sys_pwritev)
+__SYSCALL_I386(335, sys_rt_tgsigqueueinfo, compat_sys_rt_tgsigqueueinfo)
+__SYSCALL_I386(336, sys_perf_event_open, sys_perf_event_open)
+__SYSCALL_I386(337, sys_recvmmsg, compat_sys_recvmmsg)
+__SYSCALL_I386(338, sys_fanotify_init, sys_fanotify_init)
+__SYSCALL_I386(339, sys_fanotify_mark, compat_sys_fanotify_mark)
+__SYSCALL_I386(340, sys_prlimit64, sys_prlimit64)
+__SYSCALL_I386(341, sys_name_to_handle_at, sys_name_to_handle_at)
+__SYSCALL_I386(342, sys_open_by_handle_at, compat_sys_open_by_handle_at)
+__SYSCALL_I386(343, sys_clock_adjtime, compat_sys_clock_adjtime)
+__SYSCALL_I386(344, sys_syncfs, sys_syncfs)
+__SYSCALL_I386(345, sys_sendmmsg, compat_sys_sendmmsg)
+__SYSCALL_I386(346, sys_setns, sys_setns)
+__SYSCALL_I386(347, sys_process_vm_readv, compat_sys_process_vm_readv)
+__SYSCALL_I386(348, sys_process_vm_writev, compat_sys_process_vm_writev)
+__SYSCALL_I386(349, sys_kcmp, sys_kcmp)
+__SYSCALL_I386(350, sys_finit_module, sys_finit_module)
+__SYSCALL_I386(351, sys_sched_setattr, sys_sched_setattr)
+__SYSCALL_I386(352, sys_sched_getattr, sys_sched_getattr)
+__SYSCALL_I386(353, sys_renameat2, sys_renameat2)
+__SYSCALL_I386(354, sys_seccomp, sys_seccomp)
+__SYSCALL_I386(355, sys_getrandom, sys_getrandom)
+__SYSCALL_I386(356, sys_memfd_create, sys_memfd_create)
+__SYSCALL_I386(357, sys_bpf, sys_bpf)
+__SYSCALL_I386(358, sys_hello, sys_hello)
diff -uNr old/arch/x86/include/generated/uapi/asm/unistd_32.h new/arch/x86/include/generated/uapi/asm/unistd_32.h
--- old/arch/x86/include/generated/uapi/asm/unistd_32.h	1970-01-01 05:30:00.000000000 +0530
+++ new/arch/x86/include/generated/uapi/asm/unistd_32.h	2015-01-29 23:58:17.000000000 +0530
@@ -0,0 +1,360 @@
+#ifndef _ASM_X86_UNISTD_32_H
+#define _ASM_X86_UNISTD_32_H 1
+
+#define __NR_restart_syscall 0
+#define __NR_exit 1
+#define __NR_fork 2
+#define __NR_read 3
+#define __NR_write 4
+#define __NR_open 5
+#define __NR_close 6
+#define __NR_waitpid 7
+#define __NR_creat 8
+#define __NR_link 9
+#define __NR_unlink 10
+#define __NR_execve 11
+#define __NR_chdir 12
+#define __NR_time 13
+#define __NR_mknod 14
+#define __NR_chmod 15
+#define __NR_lchown 16
+#define __NR_break 17
+#define __NR_oldstat 18
+#define __NR_lseek 19
+#define __NR_getpid 20
+#define __NR_mount 21
+#define __NR_umount 22
+#define __NR_setuid 23
+#define __NR_getuid 24
+#define __NR_stime 25
+#define __NR_ptrace 26
+#define __NR_alarm 27
+#define __NR_oldfstat 28
+#define __NR_pause 29
+#define __NR_utime 30
+#define __NR_stty 31
+#define __NR_gtty 32
+#define __NR_access 33
+#define __NR_nice 34
+#define __NR_ftime 35
+#define __NR_sync 36
+#define __NR_kill 37
+#define __NR_rename 38
+#define __NR_mkdir 39
+#define __NR_rmdir 40
+#define __NR_dup 41
+#define __NR_pipe 42
+#define __NR_times 43
+#define __NR_prof 44
+#define __NR_brk 45
+#define __NR_setgid 46
+#define __NR_getgid 47
+#define __NR_signal 48
+#define __NR_geteuid 49
+#define __NR_getegid 50
+#define __NR_acct 51
+#define __NR_umount2 52
+#define __NR_lock 53
+#define __NR_ioctl 54
+#define __NR_fcntl 55
+#define __NR_mpx 56
+#define __NR_setpgid 57
+#define __NR_ulimit 58
+#define __NR_oldolduname 59
+#define __NR_umask 60
+#define __NR_chroot 61
+#define __NR_ustat 62
+#define __NR_dup2 63
+#define __NR_getppid 64
+#define __NR_getpgrp 65
+#define __NR_setsid 66
+#define __NR_sigaction 67
+#define __NR_sgetmask 68
+#define __NR_ssetmask 69
+#define __NR_setreuid 70
+#define __NR_setregid 71
+#define __NR_sigsuspend 72
+#define __NR_sigpending 73
+#define __NR_sethostname 74
+#define __NR_setrlimit 75
+#define __NR_getrlimit 76
+#define __NR_getrusage 77
+#define __NR_gettimeofday 78
+#define __NR_settimeofday 79
+#define __NR_getgroups 80
+#define __NR_setgroups 81
+#define __NR_select 82
+#define __NR_symlink 83
+#define __NR_oldlstat 84
+#define __NR_readlink 85
+#define __NR_uselib 86
+#define __NR_swapon 87
+#define __NR_reboot 88
+#define __NR_readdir 89
+#define __NR_mmap 90
+#define __NR_munmap 91
+#define __NR_truncate 92
+#define __NR_ftruncate 93
+#define __NR_fchmod 94
+#define __NR_fchown 95
+#define __NR_getpriority 96
+#define __NR_setpriority 97
+#define __NR_profil 98
+#define __NR_statfs 99
+#define __NR_fstatfs 100
+#define __NR_ioperm 101
+#define __NR_socketcall 102
+#define __NR_syslog 103
+#define __NR_setitimer 104
+#define __NR_getitimer 105
+#define __NR_stat 106
+#define __NR_lstat 107
+#define __NR_fstat 108
+#define __NR_olduname 109
+#define __NR_iopl 110
+#define __NR_vhangup 111
+#define __NR_idle 112
+#define __NR_vm86old 113
+#define __NR_wait4 114
+#define __NR_swapoff 115
+#define __NR_sysinfo 116
+#define __NR_ipc 117
+#define __NR_fsync 118
+#define __NR_sigreturn 119
+#define __NR_clone 120
+#define __NR_setdomainname 121
+#define __NR_uname 122
+#define __NR_modify_ldt 123
+#define __NR_adjtimex 124
+#define __NR_mprotect 125
+#define __NR_sigprocmask 126
+#define __NR_create_module 127
+#define __NR_init_module 128
+#define __NR_delete_module 129
+#define __NR_get_kernel_syms 130
+#define __NR_quotactl 131
+#define __NR_getpgid 132
+#define __NR_fchdir 133
+#define __NR_bdflush 134
+#define __NR_sysfs 135
+#define __NR_personality 136
+#define __NR_afs_syscall 137
+#define __NR_setfsuid 138
+#define __NR_setfsgid 139
+#define __NR__llseek 140
+#define __NR_getdents 141
+#define __NR__newselect 142
+#define __NR_flock 143
+#define __NR_msync 144
+#define __NR_readv 145
+#define __NR_writev 146
+#define __NR_getsid 147
+#define __NR_fdatasync 148
+#define __NR__sysctl 149
+#define __NR_mlock 150
+#define __NR_munlock 151
+#define __NR_mlockall 152
+#define __NR_munlockall 153
+#define __NR_sched_setparam 154
+#define __NR_sched_getparam 155
+#define __NR_sched_setscheduler 156
+#define __NR_sched_getscheduler 157
+#define __NR_sched_yield 158
+#define __NR_sched_get_priority_max 159
+#define __NR_sched_get_priority_min 160
+#define __NR_sched_rr_get_interval 161
+#define __NR_nanosleep 162
+#define __NR_mremap 163
+#define __NR_setresuid 164
+#define __NR_getresuid 165
+#define __NR_vm86 166
+#define __NR_query_module 167
+#define __NR_poll 168
+#define __NR_nfsservctl 169
+#define __NR_setresgid 170
+#define __NR_getresgid 171
+#define __NR_prctl 172
+#define __NR_rt_sigreturn 173
+#define __NR_rt_sigaction 174
+#define __NR_rt_sigprocmask 175
+#define __NR_rt_sigpending 176
+#define __NR_rt_sigtimedwait 177
+#define __NR_rt_sigqueueinfo 178
+#define __NR_rt_sigsuspend 179
+#define __NR_pread64 180
+#define __NR_pwrite64 181
+#define __NR_chown 182
+#define __NR_getcwd 183
+#define __NR_capget 184
+#define __NR_capset 185
+#define __NR_sigaltstack 186
+#define __NR_sendfile 187
+#define __NR_getpmsg 188
+#define __NR_putpmsg 189
+#define __NR_vfork 190
+#define __NR_ugetrlimit 191
+#define __NR_mmap2 192
+#define __NR_truncate64 193
+#define __NR_ftruncate64 194
+#define __NR_stat64 195
+#define __NR_lstat64 196
+#define __NR_fstat64 197
+#define __NR_lchown32 198
+#define __NR_getuid32 199
+#define __NR_getgid32 200
+#define __NR_geteuid32 201
+#define __NR_getegid32 202
+#define __NR_setreuid32 203
+#define __NR_setregid32 204
+#define __NR_getgroups32 205
+#define __NR_setgroups32 206
+#define __NR_fchown32 207
+#define __NR_setresuid32 208
+#define __NR_getresuid32 209
+#define __NR_setresgid32 210
+#define __NR_getresgid32 211
+#define __NR_chown32 212
+#define __NR_setuid32 213
+#define __NR_setgid32 214
+#define __NR_setfsuid32 215
+#define __NR_setfsgid32 216
+#define __NR_pivot_root 217
+#define __NR_mincore 218
+#define __NR_madvise 219
+#define __NR_getdents64 220
+#define __NR_fcntl64 221
+#define __NR_gettid 224
+#define __NR_readahead 225
+#define __NR_setxattr 226
+#define __NR_lsetxattr 227
+#define __NR_fsetxattr 228
+#define __NR_getxattr 229
+#define __NR_lgetxattr 230
+#define __NR_fgetxattr 231
+#define __NR_listxattr 232
+#define __NR_llistxattr 233
+#define __NR_flistxattr 234
+#define __NR_removexattr 235
+#define __NR_lremovexattr 236
+#define __NR_fremovexattr 237
+#define __NR_tkill 238
+#define __NR_sendfile64 239
+#define __NR_futex 240
+#define __NR_sched_setaffinity 241
+#define __NR_sched_getaffinity 242
+#define __NR_set_thread_area 243
+#define __NR_get_thread_area 244
+#define __NR_io_setup 245
+#define __NR_io_destroy 246
+#define __NR_io_getevents 247
+#define __NR_io_submit 248
+#define __NR_io_cancel 249
+#define __NR_fadvise64 250
+#define __NR_exit_group 252
+#define __NR_lookup_dcookie 253
+#define __NR_epoll_create 254
+#define __NR_epoll_ctl 255
+#define __NR_epoll_wait 256
+#define __NR_remap_file_pages 257
+#define __NR_set_tid_address 258
+#define __NR_timer_create 259
+#define __NR_timer_settime 260
+#define __NR_timer_gettime 261
+#define __NR_timer_getoverrun 262
+#define __NR_timer_delete 263
+#define __NR_clock_settime 264
+#define __NR_clock_gettime 265
+#define __NR_clock_getres 266
+#define __NR_clock_nanosleep 267
+#define __NR_statfs64 268
+#define __NR_fstatfs64 269
+#define __NR_tgkill 270
+#define __NR_utimes 271
+#define __NR_fadvise64_64 272
+#define __NR_vserver 273
+#define __NR_mbind 274
+#define __NR_get_mempolicy 275
+#define __NR_set_mempolicy 276
+#define __NR_mq_open 277
+#define __NR_mq_unlink 278
+#define __NR_mq_timedsend 279
+#define __NR_mq_timedreceive 280
+#define __NR_mq_notify 281
+#define __NR_mq_getsetattr 282
+#define __NR_kexec_load 283
+#define __NR_waitid 284
+#define __NR_add_key 286
+#define __NR_request_key 287
+#define __NR_keyctl 288
+#define __NR_ioprio_set 289
+#define __NR_ioprio_get 290
+#define __NR_inotify_init 291
+#define __NR_inotify_add_watch 292
+#define __NR_inotify_rm_watch 293
+#define __NR_migrate_pages 294
+#define __NR_openat 295
+#define __NR_mkdirat 296
+#define __NR_mknodat 297
+#define __NR_fchownat 298
+#define __NR_futimesat 299
+#define __NR_fstatat64 300
+#define __NR_unlinkat 301
+#define __NR_renameat 302
+#define __NR_linkat 303
+#define __NR_symlinkat 304
+#define __NR_readlinkat 305
+#define __NR_fchmodat 306
+#define __NR_faccessat 307
+#define __NR_pselect6 308
+#define __NR_ppoll 309
+#define __NR_unshare 310
+#define __NR_set_robust_list 311
+#define __NR_get_robust_list 312
+#define __NR_splice 313
+#define __NR_sync_file_range 314
+#define __NR_tee 315
+#define __NR_vmsplice 316
+#define __NR_move_pages 317
+#define __NR_getcpu 318
+#define __NR_epoll_pwait 319
+#define __NR_utimensat 320
+#define __NR_signalfd 321
+#define __NR_timerfd_create 322
+#define __NR_eventfd 323
+#define __NR_fallocate 324
+#define __NR_timerfd_settime 325
+#define __NR_timerfd_gettime 326
+#define __NR_signalfd4 327
+#define __NR_eventfd2 328
+#define __NR_epoll_create1 329
+#define __NR_dup3 330
+#define __NR_pipe2 331
+#define __NR_inotify_init1 332
+#define __NR_preadv 333
+#define __NR_pwritev 334
+#define __NR_rt_tgsigqueueinfo 335
+#define __NR_perf_event_open 336
+#define __NR_recvmmsg 337
+#define __NR_fanotify_init 338
+#define __NR_fanotify_mark 339
+#define __NR_prlimit64 340
+#define __NR_name_to_handle_at 341
+#define __NR_open_by_handle_at 342
+#define __NR_clock_adjtime 343
+#define __NR_syncfs 344
+#define __NR_sendmmsg 345
+#define __NR_setns 346
+#define __NR_process_vm_readv 347
+#define __NR_process_vm_writev 348
+#define __NR_kcmp 349
+#define __NR_finit_module 350
+#define __NR_sched_setattr 351
+#define __NR_sched_getattr 352
+#define __NR_renameat2 353
+#define __NR_seccomp 354
+#define __NR_getrandom 355
+#define __NR_memfd_create 356
+#define __NR_bpf 357
+#define __NR_hello 358
+
+#endif /* _ASM_X86_UNISTD_32_H */
diff -uNr old/arch/x86/include/generated/uapi/asm/unistd_64.h new/arch/x86/include/generated/uapi/asm/unistd_64.h
--- old/arch/x86/include/generated/uapi/asm/unistd_64.h	1970-01-01 05:30:00.000000000 +0530
+++ new/arch/x86/include/generated/uapi/asm/unistd_64.h	2015-01-29 23:58:17.000000000 +0530
@@ -0,0 +1,328 @@
+#ifndef _ASM_X86_UNISTD_64_H
+#define _ASM_X86_UNISTD_64_H 1
+
+#define __NR_read 0
+#define __NR_write 1
+#define __NR_open 2
+#define __NR_close 3
+#define __NR_stat 4
+#define __NR_fstat 5
+#define __NR_lstat 6
+#define __NR_poll 7
+#define __NR_lseek 8
+#define __NR_mmap 9
+#define __NR_mprotect 10
+#define __NR_munmap 11
+#define __NR_brk 12
+#define __NR_rt_sigaction 13
+#define __NR_rt_sigprocmask 14
+#define __NR_rt_sigreturn 15
+#define __NR_ioctl 16
+#define __NR_pread64 17
+#define __NR_pwrite64 18
+#define __NR_readv 19
+#define __NR_writev 20
+#define __NR_access 21
+#define __NR_pipe 22
+#define __NR_select 23
+#define __NR_sched_yield 24
+#define __NR_mremap 25
+#define __NR_msync 26
+#define __NR_mincore 27
+#define __NR_madvise 28
+#define __NR_shmget 29
+#define __NR_shmat 30
+#define __NR_shmctl 31
+#define __NR_dup 32
+#define __NR_dup2 33
+#define __NR_pause 34
+#define __NR_nanosleep 35
+#define __NR_getitimer 36
+#define __NR_alarm 37
+#define __NR_setitimer 38
+#define __NR_getpid 39
+#define __NR_sendfile 40
+#define __NR_socket 41
+#define __NR_connect 42
+#define __NR_accept 43
+#define __NR_sendto 44
+#define __NR_recvfrom 45
+#define __NR_sendmsg 46
+#define __NR_recvmsg 47
+#define __NR_shutdown 48
+#define __NR_bind 49
+#define __NR_listen 50
+#define __NR_getsockname 51
+#define __NR_getpeername 52
+#define __NR_socketpair 53
+#define __NR_setsockopt 54
+#define __NR_getsockopt 55
+#define __NR_clone 56
+#define __NR_fork 57
+#define __NR_vfork 58
+#define __NR_execve 59
+#define __NR_exit 60
+#define __NR_wait4 61
+#define __NR_kill 62
+#define __NR_uname 63
+#define __NR_semget 64
+#define __NR_semop 65
+#define __NR_semctl 66
+#define __NR_shmdt 67
+#define __NR_msgget 68
+#define __NR_msgsnd 69
+#define __NR_msgrcv 70
+#define __NR_msgctl 71
+#define __NR_fcntl 72
+#define __NR_flock 73
+#define __NR_fsync 74
+#define __NR_fdatasync 75
+#define __NR_truncate 76
+#define __NR_ftruncate 77
+#define __NR_getdents 78
+#define __NR_getcwd 79
+#define __NR_chdir 80
+#define __NR_fchdir 81
+#define __NR_rename 82
+#define __NR_mkdir 83
+#define __NR_rmdir 84
+#define __NR_creat 85
+#define __NR_link 86
+#define __NR_unlink 87
+#define __NR_symlink 88
+#define __NR_readlink 89
+#define __NR_chmod 90
+#define __NR_fchmod 91
+#define __NR_chown 92
+#define __NR_fchown 93
+#define __NR_lchown 94
+#define __NR_umask 95
+#define __NR_gettimeofday 96
+#define __NR_getrlimit 97
+#define __NR_getrusage 98
+#define __NR_sysinfo 99
+#define __NR_times 100
+#define __NR_ptrace 101
+#define __NR_getuid 102
+#define __NR_syslog 103
+#define __NR_getgid 104
+#define __NR_setuid 105
+#define __NR_setgid 106
+#define __NR_geteuid 107
+#define __NR_getegid 108
+#define __NR_setpgid 109
+#define __NR_getppid 110
+#define __NR_getpgrp 111
+#define __NR_setsid 112
+#define __NR_setreuid 113
+#define __NR_setregid 114
+#define __NR_getgroups 115
+#define __NR_setgroups 116
+#define __NR_setresuid 117
+#define __NR_getresuid 118
+#define __NR_setresgid 119
+#define __NR_getresgid 120
+#define __NR_getpgid 121
+#define __NR_setfsuid 122
+#define __NR_setfsgid 123
+#define __NR_getsid 124
+#define __NR_capget 125
+#define __NR_capset 126
+#define __NR_rt_sigpending 127
+#define __NR_rt_sigtimedwait 128
+#define __NR_rt_sigqueueinfo 129
+#define __NR_rt_sigsuspend 130
+#define __NR_sigaltstack 131
+#define __NR_utime 132
+#define __NR_mknod 133
+#define __NR_uselib 134
+#define __NR_personality 135
+#define __NR_ustat 136
+#define __NR_statfs 137
+#define __NR_fstatfs 138
+#define __NR_sysfs 139
+#define __NR_getpriority 140
+#define __NR_setpriority 141
+#define __NR_sched_setparam 142
+#define __NR_sched_getparam 143
+#define __NR_sched_setscheduler 144
+#define __NR_sched_getscheduler 145
+#define __NR_sched_get_priority_max 146
+#define __NR_sched_get_priority_min 147
+#define __NR_sched_rr_get_interval 148
+#define __NR_mlock 149
+#define __NR_munlock 150
+#define __NR_mlockall 151
+#define __NR_munlockall 152
+#define __NR_vhangup 153
+#define __NR_modify_ldt 154
+#define __NR_pivot_root 155
+#define __NR__sysctl 156
+#define __NR_prctl 157
+#define __NR_arch_prctl 158
+#define __NR_adjtimex 159
+#define __NR_setrlimit 160
+#define __NR_chroot 161
+#define __NR_sync 162
+#define __NR_acct 163
+#define __NR_settimeofday 164
+#define __NR_mount 165
+#define __NR_umount2 166
+#define __NR_swapon 167
+#define __NR_swapoff 168
+#define __NR_reboot 169
+#define __NR_sethostname 170
+#define __NR_setdomainname 171
+#define __NR_iopl 172
+#define __NR_ioperm 173
+#define __NR_create_module 174
+#define __NR_init_module 175
+#define __NR_delete_module 176
+#define __NR_get_kernel_syms 177
+#define __NR_query_module 178
+#define __NR_quotactl 179
+#define __NR_nfsservctl 180
+#define __NR_getpmsg 181
+#define __NR_putpmsg 182
+#define __NR_afs_syscall 183
+#define __NR_tuxcall 184
+#define __NR_security 185
+#define __NR_gettid 186
+#define __NR_readahead 187
+#define __NR_setxattr 188
+#define __NR_lsetxattr 189
+#define __NR_fsetxattr 190
+#define __NR_getxattr 191
+#define __NR_lgetxattr 192
+#define __NR_fgetxattr 193
+#define __NR_listxattr 194
+#define __NR_llistxattr 195
+#define __NR_flistxattr 196
+#define __NR_removexattr 197
+#define __NR_lremovexattr 198
+#define __NR_fremovexattr 199
+#define __NR_tkill 200
+#define __NR_time 201
+#define __NR_futex 202
+#define __NR_sched_setaffinity 203
+#define __NR_sched_getaffinity 204
+#define __NR_set_thread_area 205
+#define __NR_io_setup 206
+#define __NR_io_destroy 207
+#define __NR_io_getevents 208
+#define __NR_io_submit 209
+#define __NR_io_cancel 210
+#define __NR_get_thread_area 211
+#define __NR_lookup_dcookie 212
+#define __NR_epoll_create 213
+#define __NR_epoll_ctl_old 214
+#define __NR_epoll_wait_old 215
+#define __NR_remap_file_pages 216
+#define __NR_getdents64 217
+#define __NR_set_tid_address 218
+#define __NR_restart_syscall 219
+#define __NR_semtimedop 220
+#define __NR_fadvise64 221
+#define __NR_timer_create 222
+#define __NR_timer_settime 223
+#define __NR_timer_gettime 224
+#define __NR_timer_getoverrun 225
+#define __NR_timer_delete 226
+#define __NR_clock_settime 227
+#define __NR_clock_gettime 228
+#define __NR_clock_getres 229
+#define __NR_clock_nanosleep 230
+#define __NR_exit_group 231
+#define __NR_epoll_wait 232
+#define __NR_epoll_ctl 233
+#define __NR_tgkill 234
+#define __NR_utimes 235
+#define __NR_vserver 236
+#define __NR_mbind 237
+#define __NR_set_mempolicy 238
+#define __NR_get_mempolicy 239
+#define __NR_mq_open 240
+#define __NR_mq_unlink 241
+#define __NR_mq_timedsend 242
+#define __NR_mq_timedreceive 243
+#define __NR_mq_notify 244
+#define __NR_mq_getsetattr 245
+#define __NR_kexec_load 246
+#define __NR_waitid 247
+#define __NR_add_key 248
+#define __NR_request_key 249
+#define __NR_keyctl 250
+#define __NR_ioprio_set 251
+#define __NR_ioprio_get 252
+#define __NR_inotify_init 253
+#define __NR_inotify_add_watch 254
+#define __NR_inotify_rm_watch 255
+#define __NR_migrate_pages 256
+#define __NR_openat 257
+#define __NR_mkdirat 258
+#define __NR_mknodat 259
+#define __NR_fchownat 260
+#define __NR_futimesat 261
+#define __NR_newfstatat 262
+#define __NR_unlinkat 263
+#define __NR_renameat 264
+#define __NR_linkat 265
+#define __NR_symlinkat 266
+#define __NR_readlinkat 267
+#define __NR_fchmodat 268
+#define __NR_faccessat 269
+#define __NR_pselect6 270
+#define __NR_ppoll 271
+#define __NR_unshare 272
+#define __NR_set_robust_list 273
+#define __NR_get_robust_list 274
+#define __NR_splice 275
+#define __NR_tee 276
+#define __NR_sync_file_range 277
+#define __NR_vmsplice 278
+#define __NR_move_pages 279
+#define __NR_utimensat 280
+#define __NR_epoll_pwait 281
+#define __NR_signalfd 282
+#define __NR_timerfd_create 283
+#define __NR_eventfd 284
+#define __NR_fallocate 285
+#define __NR_timerfd_settime 286
+#define __NR_timerfd_gettime 287
+#define __NR_accept4 288
+#define __NR_signalfd4 289
+#define __NR_eventfd2 290
+#define __NR_epoll_create1 291
+#define __NR_dup3 292
+#define __NR_pipe2 293
+#define __NR_inotify_init1 294
+#define __NR_preadv 295
+#define __NR_pwritev 296
+#define __NR_rt_tgsigqueueinfo 297
+#define __NR_perf_event_open 298
+#define __NR_recvmmsg 299
+#define __NR_fanotify_init 300
+#define __NR_fanotify_mark 301
+#define __NR_prlimit64 302
+#define __NR_name_to_handle_at 303
+#define __NR_open_by_handle_at 304
+#define __NR_clock_adjtime 305
+#define __NR_syncfs 306
+#define __NR_sendmmsg 307
+#define __NR_setns 308
+#define __NR_getcpu 309
+#define __NR_process_vm_readv 310
+#define __NR_process_vm_writev 311
+#define __NR_kcmp 312
+#define __NR_finit_module 313
+#define __NR_sched_setattr 314
+#define __NR_sched_getattr 315
+#define __NR_renameat2 316
+#define __NR_seccomp 317
+#define __NR_getrandom 318
+#define __NR_memfd_create 319
+#define __NR_kexec_file_load 320
+#define __NR_bpf 321
+#define __NR_hello 322
+
+#endif /* _ASM_X86_UNISTD_64_H */
diff -uNr old/arch/x86/include/generated/uapi/asm/unistd_x32.h new/arch/x86/include/generated/uapi/asm/unistd_x32.h
--- old/arch/x86/include/generated/uapi/asm/unistd_x32.h	1970-01-01 05:30:00.000000000 +0530
+++ new/arch/x86/include/generated/uapi/asm/unistd_x32.h	2015-01-29 23:58:17.000000000 +0530
@@ -0,0 +1,317 @@
+#ifndef _ASM_X86_UNISTD_X32_H
+#define _ASM_X86_UNISTD_X32_H 1
+
+#define __NR_read (__X32_SYSCALL_BIT + 0)
+#define __NR_write (__X32_SYSCALL_BIT + 1)
+#define __NR_open (__X32_SYSCALL_BIT + 2)
+#define __NR_close (__X32_SYSCALL_BIT + 3)
+#define __NR_stat (__X32_SYSCALL_BIT + 4)
+#define __NR_fstat (__X32_SYSCALL_BIT + 5)
+#define __NR_lstat (__X32_SYSCALL_BIT + 6)
+#define __NR_poll (__X32_SYSCALL_BIT + 7)
+#define __NR_lseek (__X32_SYSCALL_BIT + 8)
+#define __NR_mmap (__X32_SYSCALL_BIT + 9)
+#define __NR_mprotect (__X32_SYSCALL_BIT + 10)
+#define __NR_munmap (__X32_SYSCALL_BIT + 11)
+#define __NR_brk (__X32_SYSCALL_BIT + 12)
+#define __NR_rt_sigprocmask (__X32_SYSCALL_BIT + 14)
+#define __NR_pread64 (__X32_SYSCALL_BIT + 17)
+#define __NR_pwrite64 (__X32_SYSCALL_BIT + 18)
+#define __NR_access (__X32_SYSCALL_BIT + 21)
+#define __NR_pipe (__X32_SYSCALL_BIT + 22)
+#define __NR_select (__X32_SYSCALL_BIT + 23)
+#define __NR_sched_yield (__X32_SYSCALL_BIT + 24)
+#define __NR_mremap (__X32_SYSCALL_BIT + 25)
+#define __NR_msync (__X32_SYSCALL_BIT + 26)
+#define __NR_mincore (__X32_SYSCALL_BIT + 27)
+#define __NR_madvise (__X32_SYSCALL_BIT + 28)
+#define __NR_shmget (__X32_SYSCALL_BIT + 29)
+#define __NR_shmat (__X32_SYSCALL_BIT + 30)
+#define __NR_shmctl (__X32_SYSCALL_BIT + 31)
+#define __NR_dup (__X32_SYSCALL_BIT + 32)
+#define __NR_dup2 (__X32_SYSCALL_BIT + 33)
+#define __NR_pause (__X32_SYSCALL_BIT + 34)
+#define __NR_nanosleep (__X32_SYSCALL_BIT + 35)
+#define __NR_getitimer (__X32_SYSCALL_BIT + 36)
+#define __NR_alarm (__X32_SYSCALL_BIT + 37)
+#define __NR_setitimer (__X32_SYSCALL_BIT + 38)
+#define __NR_getpid (__X32_SYSCALL_BIT + 39)
+#define __NR_sendfile (__X32_SYSCALL_BIT + 40)
+#define __NR_socket (__X32_SYSCALL_BIT + 41)
+#define __NR_connect (__X32_SYSCALL_BIT + 42)
+#define __NR_accept (__X32_SYSCALL_BIT + 43)
+#define __NR_sendto (__X32_SYSCALL_BIT + 44)
+#define __NR_shutdown (__X32_SYSCALL_BIT + 48)
+#define __NR_bind (__X32_SYSCALL_BIT + 49)
+#define __NR_listen (__X32_SYSCALL_BIT + 50)
+#define __NR_getsockname (__X32_SYSCALL_BIT + 51)
+#define __NR_getpeername (__X32_SYSCALL_BIT + 52)
+#define __NR_socketpair (__X32_SYSCALL_BIT + 53)
+#define __NR_clone (__X32_SYSCALL_BIT + 56)
+#define __NR_fork (__X32_SYSCALL_BIT + 57)
+#define __NR_vfork (__X32_SYSCALL_BIT + 58)
+#define __NR_exit (__X32_SYSCALL_BIT + 60)
+#define __NR_wait4 (__X32_SYSCALL_BIT + 61)
+#define __NR_kill (__X32_SYSCALL_BIT + 62)
+#define __NR_uname (__X32_SYSCALL_BIT + 63)
+#define __NR_semget (__X32_SYSCALL_BIT + 64)
+#define __NR_semop (__X32_SYSCALL_BIT + 65)
+#define __NR_semctl (__X32_SYSCALL_BIT + 66)
+#define __NR_shmdt (__X32_SYSCALL_BIT + 67)
+#define __NR_msgget (__X32_SYSCALL_BIT + 68)
+#define __NR_msgsnd (__X32_SYSCALL_BIT + 69)
+#define __NR_msgrcv (__X32_SYSCALL_BIT + 70)
+#define __NR_msgctl (__X32_SYSCALL_BIT + 71)
+#define __NR_fcntl (__X32_SYSCALL_BIT + 72)
+#define __NR_flock (__X32_SYSCALL_BIT + 73)
+#define __NR_fsync (__X32_SYSCALL_BIT + 74)
+#define __NR_fdatasync (__X32_SYSCALL_BIT + 75)
+#define __NR_truncate (__X32_SYSCALL_BIT + 76)
+#define __NR_ftruncate (__X32_SYSCALL_BIT + 77)
+#define __NR_getdents (__X32_SYSCALL_BIT + 78)
+#define __NR_getcwd (__X32_SYSCALL_BIT + 79)
+#define __NR_chdir (__X32_SYSCALL_BIT + 80)
+#define __NR_fchdir (__X32_SYSCALL_BIT + 81)
+#define __NR_rename (__X32_SYSCALL_BIT + 82)
+#define __NR_mkdir (__X32_SYSCALL_BIT + 83)
+#define __NR_rmdir (__X32_SYSCALL_BIT + 84)
+#define __NR_creat (__X32_SYSCALL_BIT + 85)
+#define __NR_link (__X32_SYSCALL_BIT + 86)
+#define __NR_unlink (__X32_SYSCALL_BIT + 87)
+#define __NR_symlink (__X32_SYSCALL_BIT + 88)
+#define __NR_readlink (__X32_SYSCALL_BIT + 89)
+#define __NR_chmod (__X32_SYSCALL_BIT + 90)
+#define __NR_fchmod (__X32_SYSCALL_BIT + 91)
+#define __NR_chown (__X32_SYSCALL_BIT + 92)
+#define __NR_fchown (__X32_SYSCALL_BIT + 93)
+#define __NR_lchown (__X32_SYSCALL_BIT + 94)
+#define __NR_umask (__X32_SYSCALL_BIT + 95)
+#define __NR_gettimeofday (__X32_SYSCALL_BIT + 96)
+#define __NR_getrlimit (__X32_SYSCALL_BIT + 97)
+#define __NR_getrusage (__X32_SYSCALL_BIT + 98)
+#define __NR_sysinfo (__X32_SYSCALL_BIT + 99)
+#define __NR_times (__X32_SYSCALL_BIT + 100)
+#define __NR_getuid (__X32_SYSCALL_BIT + 102)
+#define __NR_syslog (__X32_SYSCALL_BIT + 103)
+#define __NR_getgid (__X32_SYSCALL_BIT + 104)
+#define __NR_setuid (__X32_SYSCALL_BIT + 105)
+#define __NR_setgid (__X32_SYSCALL_BIT + 106)
+#define __NR_geteuid (__X32_SYSCALL_BIT + 107)
+#define __NR_getegid (__X32_SYSCALL_BIT + 108)
+#define __NR_setpgid (__X32_SYSCALL_BIT + 109)
+#define __NR_getppid (__X32_SYSCALL_BIT + 110)
+#define __NR_getpgrp (__X32_SYSCALL_BIT + 111)
+#define __NR_setsid (__X32_SYSCALL_BIT + 112)
+#define __NR_setreuid (__X32_SYSCALL_BIT + 113)
+#define __NR_setregid (__X32_SYSCALL_BIT + 114)
+#define __NR_getgroups (__X32_SYSCALL_BIT + 115)
+#define __NR_setgroups (__X32_SYSCALL_BIT + 116)
+#define __NR_setresuid (__X32_SYSCALL_BIT + 117)
+#define __NR_getresuid (__X32_SYSCALL_BIT + 118)
+#define __NR_setresgid (__X32_SYSCALL_BIT + 119)
+#define __NR_getresgid (__X32_SYSCALL_BIT + 120)
+#define __NR_getpgid (__X32_SYSCALL_BIT + 121)
+#define __NR_setfsuid (__X32_SYSCALL_BIT + 122)
+#define __NR_setfsgid (__X32_SYSCALL_BIT + 123)
+#define __NR_getsid (__X32_SYSCALL_BIT + 124)
+#define __NR_capget (__X32_SYSCALL_BIT + 125)
+#define __NR_capset (__X32_SYSCALL_BIT + 126)
+#define __NR_rt_sigsuspend (__X32_SYSCALL_BIT + 130)
+#define __NR_utime (__X32_SYSCALL_BIT + 132)
+#define __NR_mknod (__X32_SYSCALL_BIT + 133)
+#define __NR_personality (__X32_SYSCALL_BIT + 135)
+#define __NR_ustat (__X32_SYSCALL_BIT + 136)
+#define __NR_statfs (__X32_SYSCALL_BIT + 137)
+#define __NR_fstatfs (__X32_SYSCALL_BIT + 138)
+#define __NR_sysfs (__X32_SYSCALL_BIT + 139)
+#define __NR_getpriority (__X32_SYSCALL_BIT + 140)
+#define __NR_setpriority (__X32_SYSCALL_BIT + 141)
+#define __NR_sched_setparam (__X32_SYSCALL_BIT + 142)
+#define __NR_sched_getparam (__X32_SYSCALL_BIT + 143)
+#define __NR_sched_setscheduler (__X32_SYSCALL_BIT + 144)
+#define __NR_sched_getscheduler (__X32_SYSCALL_BIT + 145)
+#define __NR_sched_get_priority_max (__X32_SYSCALL_BIT + 146)
+#define __NR_sched_get_priority_min (__X32_SYSCALL_BIT + 147)
+#define __NR_sched_rr_get_interval (__X32_SYSCALL_BIT + 148)
+#define __NR_mlock (__X32_SYSCALL_BIT + 149)
+#define __NR_munlock (__X32_SYSCALL_BIT + 150)
+#define __NR_mlockall (__X32_SYSCALL_BIT + 151)
+#define __NR_munlockall (__X32_SYSCALL_BIT + 152)
+#define __NR_vhangup (__X32_SYSCALL_BIT + 153)
+#define __NR_modify_ldt (__X32_SYSCALL_BIT + 154)
+#define __NR_pivot_root (__X32_SYSCALL_BIT + 155)
+#define __NR_prctl (__X32_SYSCALL_BIT + 157)
+#define __NR_arch_prctl (__X32_SYSCALL_BIT + 158)
+#define __NR_adjtimex (__X32_SYSCALL_BIT + 159)
+#define __NR_setrlimit (__X32_SYSCALL_BIT + 160)
+#define __NR_chroot (__X32_SYSCALL_BIT + 161)
+#define __NR_sync (__X32_SYSCALL_BIT + 162)
+#define __NR_acct (__X32_SYSCALL_BIT + 163)
+#define __NR_settimeofday (__X32_SYSCALL_BIT + 164)
+#define __NR_mount (__X32_SYSCALL_BIT + 165)
+#define __NR_umount2 (__X32_SYSCALL_BIT + 166)
+#define __NR_swapon (__X32_SYSCALL_BIT + 167)
+#define __NR_swapoff (__X32_SYSCALL_BIT + 168)
+#define __NR_reboot (__X32_SYSCALL_BIT + 169)
+#define __NR_sethostname (__X32_SYSCALL_BIT + 170)
+#define __NR_setdomainname (__X32_SYSCALL_BIT + 171)
+#define __NR_iopl (__X32_SYSCALL_BIT + 172)
+#define __NR_ioperm (__X32_SYSCALL_BIT + 173)
+#define __NR_init_module (__X32_SYSCALL_BIT + 175)
+#define __NR_delete_module (__X32_SYSCALL_BIT + 176)
+#define __NR_quotactl (__X32_SYSCALL_BIT + 179)
+#define __NR_getpmsg (__X32_SYSCALL_BIT + 181)
+#define __NR_putpmsg (__X32_SYSCALL_BIT + 182)
+#define __NR_afs_syscall (__X32_SYSCALL_BIT + 183)
+#define __NR_tuxcall (__X32_SYSCALL_BIT + 184)
+#define __NR_security (__X32_SYSCALL_BIT + 185)
+#define __NR_gettid (__X32_SYSCALL_BIT + 186)
+#define __NR_readahead (__X32_SYSCALL_BIT + 187)
+#define __NR_setxattr (__X32_SYSCALL_BIT + 188)
+#define __NR_lsetxattr (__X32_SYSCALL_BIT + 189)
+#define __NR_fsetxattr (__X32_SYSCALL_BIT + 190)
+#define __NR_getxattr (__X32_SYSCALL_BIT + 191)
+#define __NR_lgetxattr (__X32_SYSCALL_BIT + 192)
+#define __NR_fgetxattr (__X32_SYSCALL_BIT + 193)
+#define __NR_listxattr (__X32_SYSCALL_BIT + 194)
+#define __NR_llistxattr (__X32_SYSCALL_BIT + 195)
+#define __NR_flistxattr (__X32_SYSCALL_BIT + 196)
+#define __NR_removexattr (__X32_SYSCALL_BIT + 197)
+#define __NR_lremovexattr (__X32_SYSCALL_BIT + 198)
+#define __NR_fremovexattr (__X32_SYSCALL_BIT + 199)
+#define __NR_tkill (__X32_SYSCALL_BIT + 200)
+#define __NR_time (__X32_SYSCALL_BIT + 201)
+#define __NR_futex (__X32_SYSCALL_BIT + 202)
+#define __NR_sched_setaffinity (__X32_SYSCALL_BIT + 203)
+#define __NR_sched_getaffinity (__X32_SYSCALL_BIT + 204)
+#define __NR_io_destroy (__X32_SYSCALL_BIT + 207)
+#define __NR_io_getevents (__X32_SYSCALL_BIT + 208)
+#define __NR_io_cancel (__X32_SYSCALL_BIT + 210)
+#define __NR_lookup_dcookie (__X32_SYSCALL_BIT + 212)
+#define __NR_epoll_create (__X32_SYSCALL_BIT + 213)
+#define __NR_remap_file_pages (__X32_SYSCALL_BIT + 216)
+#define __NR_getdents64 (__X32_SYSCALL_BIT + 217)
+#define __NR_set_tid_address (__X32_SYSCALL_BIT + 218)
+#define __NR_restart_syscall (__X32_SYSCALL_BIT + 219)
+#define __NR_semtimedop (__X32_SYSCALL_BIT + 220)
+#define __NR_fadvise64 (__X32_SYSCALL_BIT + 221)
+#define __NR_timer_settime (__X32_SYSCALL_BIT + 223)
+#define __NR_timer_gettime (__X32_SYSCALL_BIT + 224)
+#define __NR_timer_getoverrun (__X32_SYSCALL_BIT + 225)
+#define __NR_timer_delete (__X32_SYSCALL_BIT + 226)
+#define __NR_clock_settime (__X32_SYSCALL_BIT + 227)
+#define __NR_clock_gettime (__X32_SYSCALL_BIT + 228)
+#define __NR_clock_getres (__X32_SYSCALL_BIT + 229)
+#define __NR_clock_nanosleep (__X32_SYSCALL_BIT + 230)
+#define __NR_exit_group (__X32_SYSCALL_BIT + 231)
+#define __NR_epoll_wait (__X32_SYSCALL_BIT + 232)
+#define __NR_epoll_ctl (__X32_SYSCALL_BIT + 233)
+#define __NR_tgkill (__X32_SYSCALL_BIT + 234)
+#define __NR_utimes (__X32_SYSCALL_BIT + 235)
+#define __NR_mbind (__X32_SYSCALL_BIT + 237)
+#define __NR_set_mempolicy (__X32_SYSCALL_BIT + 238)
+#define __NR_get_mempolicy (__X32_SYSCALL_BIT + 239)
+#define __NR_mq_open (__X32_SYSCALL_BIT + 240)
+#define __NR_mq_unlink (__X32_SYSCALL_BIT + 241)
+#define __NR_mq_timedsend (__X32_SYSCALL_BIT + 242)
+#define __NR_mq_timedreceive (__X32_SYSCALL_BIT + 243)
+#define __NR_mq_getsetattr (__X32_SYSCALL_BIT + 245)
+#define __NR_add_key (__X32_SYSCALL_BIT + 248)
+#define __NR_request_key (__X32_SYSCALL_BIT + 249)
+#define __NR_keyctl (__X32_SYSCALL_BIT + 250)
+#define __NR_ioprio_set (__X32_SYSCALL_BIT + 251)
+#define __NR_ioprio_get (__X32_SYSCALL_BIT + 252)
+#define __NR_inotify_init (__X32_SYSCALL_BIT + 253)
+#define __NR_inotify_add_watch (__X32_SYSCALL_BIT + 254)
+#define __NR_inotify_rm_watch (__X32_SYSCALL_BIT + 255)
+#define __NR_migrate_pages (__X32_SYSCALL_BIT + 256)
+#define __NR_openat (__X32_SYSCALL_BIT + 257)
+#define __NR_mkdirat (__X32_SYSCALL_BIT + 258)
+#define __NR_mknodat (__X32_SYSCALL_BIT + 259)
+#define __NR_fchownat (__X32_SYSCALL_BIT + 260)
+#define __NR_futimesat (__X32_SYSCALL_BIT + 261)
+#define __NR_newfstatat (__X32_SYSCALL_BIT + 262)
+#define __NR_unlinkat (__X32_SYSCALL_BIT + 263)
+#define __NR_renameat (__X32_SYSCALL_BIT + 264)
+#define __NR_linkat (__X32_SYSCALL_BIT + 265)
+#define __NR_symlinkat (__X32_SYSCALL_BIT + 266)
+#define __NR_readlinkat (__X32_SYSCALL_BIT + 267)
+#define __NR_fchmodat (__X32_SYSCALL_BIT + 268)
+#define __NR_faccessat (__X32_SYSCALL_BIT + 269)
+#define __NR_pselect6 (__X32_SYSCALL_BIT + 270)
+#define __NR_ppoll (__X32_SYSCALL_BIT + 271)
+#define __NR_unshare (__X32_SYSCALL_BIT + 272)
+#define __NR_splice (__X32_SYSCALL_BIT + 275)
+#define __NR_tee (__X32_SYSCALL_BIT + 276)
+#define __NR_sync_file_range (__X32_SYSCALL_BIT + 277)
+#define __NR_utimensat (__X32_SYSCALL_BIT + 280)
+#define __NR_epoll_pwait (__X32_SYSCALL_BIT + 281)
+#define __NR_signalfd (__X32_SYSCALL_BIT + 282)
+#define __NR_timerfd_create (__X32_SYSCALL_BIT + 283)
+#define __NR_eventfd (__X32_SYSCALL_BIT + 284)
+#define __NR_fallocate (__X32_SYSCALL_BIT + 285)
+#define __NR_timerfd_settime (__X32_SYSCALL_BIT + 286)
+#define __NR_timerfd_gettime (__X32_SYSCALL_BIT + 287)
+#define __NR_accept4 (__X32_SYSCALL_BIT + 288)
+#define __NR_signalfd4 (__X32_SYSCALL_BIT + 289)
+#define __NR_eventfd2 (__X32_SYSCALL_BIT + 290)
+#define __NR_epoll_create1 (__X32_SYSCALL_BIT + 291)
+#define __NR_dup3 (__X32_SYSCALL_BIT + 292)
+#define __NR_pipe2 (__X32_SYSCALL_BIT + 293)
+#define __NR_inotify_init1 (__X32_SYSCALL_BIT + 294)
+#define __NR_perf_event_open (__X32_SYSCALL_BIT + 298)
+#define __NR_fanotify_init (__X32_SYSCALL_BIT + 300)
+#define __NR_fanotify_mark (__X32_SYSCALL_BIT + 301)
+#define __NR_prlimit64 (__X32_SYSCALL_BIT + 302)
+#define __NR_name_to_handle_at (__X32_SYSCALL_BIT + 303)
+#define __NR_open_by_handle_at (__X32_SYSCALL_BIT + 304)
+#define __NR_clock_adjtime (__X32_SYSCALL_BIT + 305)
+#define __NR_syncfs (__X32_SYSCALL_BIT + 306)
+#define __NR_setns (__X32_SYSCALL_BIT + 308)
+#define __NR_getcpu (__X32_SYSCALL_BIT + 309)
+#define __NR_kcmp (__X32_SYSCALL_BIT + 312)
+#define __NR_finit_module (__X32_SYSCALL_BIT + 313)
+#define __NR_sched_setattr (__X32_SYSCALL_BIT + 314)
+#define __NR_sched_getattr (__X32_SYSCALL_BIT + 315)
+#define __NR_renameat2 (__X32_SYSCALL_BIT + 316)
+#define __NR_seccomp (__X32_SYSCALL_BIT + 317)
+#define __NR_getrandom (__X32_SYSCALL_BIT + 318)
+#define __NR_memfd_create (__X32_SYSCALL_BIT + 319)
+#define __NR_kexec_file_load (__X32_SYSCALL_BIT + 320)
+#define __NR_bpf (__X32_SYSCALL_BIT + 321)
+#define __NR_hello (__X32_SYSCALL_BIT + 322)
+#define __NR_rt_sigaction (__X32_SYSCALL_BIT + 512)
+#define __NR_rt_sigreturn (__X32_SYSCALL_BIT + 513)
+#define __NR_ioctl (__X32_SYSCALL_BIT + 514)
+#define __NR_readv (__X32_SYSCALL_BIT + 515)
+#define __NR_writev (__X32_SYSCALL_BIT + 516)
+#define __NR_recvfrom (__X32_SYSCALL_BIT + 517)
+#define __NR_sendmsg (__X32_SYSCALL_BIT + 518)
+#define __NR_recvmsg (__X32_SYSCALL_BIT + 519)
+#define __NR_execve (__X32_SYSCALL_BIT + 520)
+#define __NR_ptrace (__X32_SYSCALL_BIT + 521)
+#define __NR_rt_sigpending (__X32_SYSCALL_BIT + 522)
+#define __NR_rt_sigtimedwait (__X32_SYSCALL_BIT + 523)
+#define __NR_rt_sigqueueinfo (__X32_SYSCALL_BIT + 524)
+#define __NR_sigaltstack (__X32_SYSCALL_BIT + 525)
+#define __NR_timer_create (__X32_SYSCALL_BIT + 526)
+#define __NR_mq_notify (__X32_SYSCALL_BIT + 527)
+#define __NR_kexec_load (__X32_SYSCALL_BIT + 528)
+#define __NR_waitid (__X32_SYSCALL_BIT + 529)
+#define __NR_set_robust_list (__X32_SYSCALL_BIT + 530)
+#define __NR_get_robust_list (__X32_SYSCALL_BIT + 531)
+#define __NR_vmsplice (__X32_SYSCALL_BIT + 532)
+#define __NR_move_pages (__X32_SYSCALL_BIT + 533)
+#define __NR_preadv (__X32_SYSCALL_BIT + 534)
+#define __NR_pwritev (__X32_SYSCALL_BIT + 535)
+#define __NR_rt_tgsigqueueinfo (__X32_SYSCALL_BIT + 536)
+#define __NR_recvmmsg (__X32_SYSCALL_BIT + 537)
+#define __NR_sendmmsg (__X32_SYSCALL_BIT + 538)
+#define __NR_process_vm_readv (__X32_SYSCALL_BIT + 539)
+#define __NR_process_vm_writev (__X32_SYSCALL_BIT + 540)
+#define __NR_setsockopt (__X32_SYSCALL_BIT + 541)
+#define __NR_getsockopt (__X32_SYSCALL_BIT + 542)
+#define __NR_io_setup (__X32_SYSCALL_BIT + 543)
+#define __NR_io_submit (__X32_SYSCALL_BIT + 544)
+
+#endif /* _ASM_X86_UNISTD_X32_H */
diff -uNr old/arch/x86/kernel/cpu/capflags.c new/arch/x86/kernel/cpu/capflags.c
--- old/arch/x86/kernel/cpu/capflags.c	1970-01-01 05:30:00.000000000 +0530
+++ new/arch/x86/kernel/cpu/capflags.c	2015-01-29 23:48:25.000000000 +0530
@@ -0,0 +1,189 @@
+#ifndef _ASM_X86_CPUFEATURE_H
+#include <asm/cpufeature.h>
+#endif
+
+const char * const x86_cap_flags[NCAPINTS*32] = {
+	[X86_FEATURE_FPU]		 = "fpu",
+	[X86_FEATURE_VME]		 = "vme",
+	[X86_FEATURE_DE]		 = "de",
+	[X86_FEATURE_PSE]		 = "pse",
+	[X86_FEATURE_TSC]		 = "tsc",
+	[X86_FEATURE_MSR]		 = "msr",
+	[X86_FEATURE_PAE]		 = "pae",
+	[X86_FEATURE_MCE]		 = "mce",
+	[X86_FEATURE_CX8]		 = "cx8",
+	[X86_FEATURE_APIC]		 = "apic",
+	[X86_FEATURE_SEP]		 = "sep",
+	[X86_FEATURE_MTRR]		 = "mtrr",
+	[X86_FEATURE_PGE]		 = "pge",
+	[X86_FEATURE_MCA]		 = "mca",
+	[X86_FEATURE_CMOV]		 = "cmov",
+	[X86_FEATURE_PAT]		 = "pat",
+	[X86_FEATURE_PSE36]		 = "pse36",
+	[X86_FEATURE_PN]		 = "pn",
+	[X86_FEATURE_CLFLUSH]		 = "clflush",
+	[X86_FEATURE_DS]		 = "dts",
+	[X86_FEATURE_ACPI]		 = "acpi",
+	[X86_FEATURE_MMX]		 = "mmx",
+	[X86_FEATURE_FXSR]		 = "fxsr",
+	[X86_FEATURE_XMM]		 = "sse",
+	[X86_FEATURE_XMM2]		 = "sse2",
+	[X86_FEATURE_SELFSNOOP]		 = "ss",
+	[X86_FEATURE_HT]		 = "ht",
+	[X86_FEATURE_ACC]		 = "tm",
+	[X86_FEATURE_IA64]		 = "ia64",
+	[X86_FEATURE_PBE]		 = "pbe",
+	[X86_FEATURE_SYSCALL]		 = "syscall",
+	[X86_FEATURE_MP]		 = "mp",
+	[X86_FEATURE_NX]		 = "nx",
+	[X86_FEATURE_MMXEXT]		 = "mmxext",
+	[X86_FEATURE_FXSR_OPT]		 = "fxsr_opt",
+	[X86_FEATURE_GBPAGES]		 = "pdpe1gb",
+	[X86_FEATURE_RDTSCP]		 = "rdtscp",
+	[X86_FEATURE_LM]		 = "lm",
+	[X86_FEATURE_3DNOWEXT]		 = "3dnowext",
+	[X86_FEATURE_3DNOW]		 = "3dnow",
+	[X86_FEATURE_RECOVERY]		 = "recovery",
+	[X86_FEATURE_LONGRUN]		 = "longrun",
+	[X86_FEATURE_LRTI]		 = "lrti",
+	[X86_FEATURE_CXMMX]		 = "cxmmx",
+	[X86_FEATURE_K6_MTRR]		 = "k6_mtrr",
+	[X86_FEATURE_CYRIX_ARR]		 = "cyrix_arr",
+	[X86_FEATURE_CENTAUR_MCR]	 = "centaur_mcr",
+	[X86_FEATURE_CONSTANT_TSC]	 = "constant_tsc",
+	[X86_FEATURE_UP]		 = "up",
+	[X86_FEATURE_ARCH_PERFMON]	 = "arch_perfmon",
+	[X86_FEATURE_PEBS]		 = "pebs",
+	[X86_FEATURE_BTS]		 = "bts",
+	[X86_FEATURE_REP_GOOD]		 = "rep_good",
+	[X86_FEATURE_NOPL]		 = "nopl",
+	[X86_FEATURE_XTOPOLOGY]		 = "xtopology",
+	[X86_FEATURE_TSC_RELIABLE]	 = "tsc_reliable",
+	[X86_FEATURE_NONSTOP_TSC]	 = "nonstop_tsc",
+	[X86_FEATURE_EXTD_APICID]	 = "extd_apicid",
+	[X86_FEATURE_AMD_DCM]		 = "amd_dcm",
+	[X86_FEATURE_APERFMPERF]	 = "aperfmperf",
+	[X86_FEATURE_EAGER_FPU]		 = "eagerfpu",
+	[X86_FEATURE_NONSTOP_TSC_S3]	 = "nonstop_tsc_s3",
+	[X86_FEATURE_XMM3]		 = "pni",
+	[X86_FEATURE_PCLMULQDQ]		 = "pclmulqdq",
+	[X86_FEATURE_DTES64]		 = "dtes64",
+	[X86_FEATURE_MWAIT]		 = "monitor",
+	[X86_FEATURE_DSCPL]		 = "ds_cpl",
+	[X86_FEATURE_VMX]		 = "vmx",
+	[X86_FEATURE_SMX]		 = "smx",
+	[X86_FEATURE_EST]		 = "est",
+	[X86_FEATURE_TM2]		 = "tm2",
+	[X86_FEATURE_SSSE3]		 = "ssse3",
+	[X86_FEATURE_CID]		 = "cid",
+	[X86_FEATURE_FMA]		 = "fma",
+	[X86_FEATURE_CX16]		 = "cx16",
+	[X86_FEATURE_XTPR]		 = "xtpr",
+	[X86_FEATURE_PDCM]		 = "pdcm",
+	[X86_FEATURE_PCID]		 = "pcid",
+	[X86_FEATURE_DCA]		 = "dca",
+	[X86_FEATURE_XMM4_1]		 = "sse4_1",
+	[X86_FEATURE_XMM4_2]		 = "sse4_2",
+	[X86_FEATURE_X2APIC]		 = "x2apic",
+	[X86_FEATURE_MOVBE]		 = "movbe",
+	[X86_FEATURE_POPCNT]		 = "popcnt",
+	[X86_FEATURE_TSC_DEADLINE_TIMER] = "tsc_deadline_timer",
+	[X86_FEATURE_AES]		 = "aes",
+	[X86_FEATURE_XSAVE]		 = "xsave",
+	[X86_FEATURE_AVX]		 = "avx",
+	[X86_FEATURE_F16C]		 = "f16c",
+	[X86_FEATURE_RDRAND]		 = "rdrand",
+	[X86_FEATURE_HYPERVISOR]	 = "hypervisor",
+	[X86_FEATURE_XSTORE]		 = "rng",
+	[X86_FEATURE_XSTORE_EN]		 = "rng_en",
+	[X86_FEATURE_XCRYPT]		 = "ace",
+	[X86_FEATURE_XCRYPT_EN]		 = "ace_en",
+	[X86_FEATURE_ACE2]		 = "ace2",
+	[X86_FEATURE_ACE2_EN]		 = "ace2_en",
+	[X86_FEATURE_PHE]		 = "phe",
+	[X86_FEATURE_PHE_EN]		 = "phe_en",
+	[X86_FEATURE_PMM]		 = "pmm",
+	[X86_FEATURE_PMM_EN]		 = "pmm_en",
+	[X86_FEATURE_LAHF_LM]		 = "lahf_lm",
+	[X86_FEATURE_CMP_LEGACY]	 = "cmp_legacy",
+	[X86_FEATURE_SVM]		 = "svm",
+	[X86_FEATURE_EXTAPIC]		 = "extapic",
+	[X86_FEATURE_CR8_LEGACY]	 = "cr8_legacy",
+	[X86_FEATURE_ABM]		 = "abm",
+	[X86_FEATURE_SSE4A]		 = "sse4a",
+	[X86_FEATURE_MISALIGNSSE]	 = "misalignsse",
+	[X86_FEATURE_3DNOWPREFETCH]	 = "3dnowprefetch",
+	[X86_FEATURE_OSVW]		 = "osvw",
+	[X86_FEATURE_IBS]		 = "ibs",
+	[X86_FEATURE_XOP]		 = "xop",
+	[X86_FEATURE_SKINIT]		 = "skinit",
+	[X86_FEATURE_WDT]		 = "wdt",
+	[X86_FEATURE_LWP]		 = "lwp",
+	[X86_FEATURE_FMA4]		 = "fma4",
+	[X86_FEATURE_TCE]		 = "tce",
+	[X86_FEATURE_NODEID_MSR]	 = "nodeid_msr",
+	[X86_FEATURE_TBM]		 = "tbm",
+	[X86_FEATURE_TOPOEXT]		 = "topoext",
+	[X86_FEATURE_PERFCTR_CORE]	 = "perfctr_core",
+	[X86_FEATURE_PERFCTR_NB]	 = "perfctr_nb",
+	[X86_FEATURE_PERFCTR_L2]	 = "perfctr_l2",
+	[X86_FEATURE_IDA]		 = "ida",
+	[X86_FEATURE_ARAT]		 = "arat",
+	[X86_FEATURE_CPB]		 = "cpb",
+	[X86_FEATURE_EPB]		 = "epb",
+	[X86_FEATURE_PLN]		 = "pln",
+	[X86_FEATURE_PTS]		 = "pts",
+	[X86_FEATURE_DTHERM]		 = "dtherm",
+	[X86_FEATURE_HW_PSTATE]		 = "hw_pstate",
+	[X86_FEATURE_PROC_FEEDBACK]	 = "proc_feedback",
+	[X86_FEATURE_TPR_SHADOW]	 = "tpr_shadow",
+	[X86_FEATURE_VNMI]		 = "vnmi",
+	[X86_FEATURE_FLEXPRIORITY]	 = "flexpriority",
+	[X86_FEATURE_EPT]		 = "ept",
+	[X86_FEATURE_VPID]		 = "vpid",
+	[X86_FEATURE_NPT]		 = "npt",
+	[X86_FEATURE_LBRV]		 = "lbrv",
+	[X86_FEATURE_SVML]		 = "svm_lock",
+	[X86_FEATURE_NRIPS]		 = "nrip_save",
+	[X86_FEATURE_TSCRATEMSR]	 = "tsc_scale",
+	[X86_FEATURE_VMCBCLEAN]		 = "vmcb_clean",
+	[X86_FEATURE_FLUSHBYASID]	 = "flushbyasid",
+	[X86_FEATURE_DECODEASSISTS]	 = "decodeassists",
+	[X86_FEATURE_PAUSEFILTER]	 = "pausefilter",
+	[X86_FEATURE_PFTHRESHOLD]	 = "pfthreshold",
+	[X86_FEATURE_VMMCALL]		 = "vmmcall",
+	[X86_FEATURE_FSGSBASE]		 = "fsgsbase",
+	[X86_FEATURE_TSC_ADJUST]	 = "tsc_adjust",
+	[X86_FEATURE_BMI1]		 = "bmi1",
+	[X86_FEATURE_HLE]		 = "hle",
+	[X86_FEATURE_AVX2]		 = "avx2",
+	[X86_FEATURE_SMEP]		 = "smep",
+	[X86_FEATURE_BMI2]		 = "bmi2",
+	[X86_FEATURE_ERMS]		 = "erms",
+	[X86_FEATURE_INVPCID]		 = "invpcid",
+	[X86_FEATURE_RTM]		 = "rtm",
+	[X86_FEATURE_MPX]		 = "mpx",
+	[X86_FEATURE_AVX512F]		 = "avx512f",
+	[X86_FEATURE_RDSEED]		 = "rdseed",
+	[X86_FEATURE_ADX]		 = "adx",
+	[X86_FEATURE_SMAP]		 = "smap",
+	[X86_FEATURE_CLFLUSHOPT]	 = "clflushopt",
+	[X86_FEATURE_AVX512PF]		 = "avx512pf",
+	[X86_FEATURE_AVX512ER]		 = "avx512er",
+	[X86_FEATURE_AVX512CD]		 = "avx512cd",
+	[X86_FEATURE_XSAVEOPT]		 = "xsaveopt",
+	[X86_FEATURE_XSAVEC]		 = "xsavec",
+	[X86_FEATURE_XGETBV1]		 = "xgetbv1",
+	[X86_FEATURE_XSAVES]		 = "xsaves",
+};
+
+const char * const x86_bug_flags[NBUGINTS*32] = {
+	[X86_BUG_F00F - NCAPINTS*32]		 = "f00f",
+	[X86_BUG_FDIV - NCAPINTS*32]		 = "fdiv",
+	[X86_BUG_COMA - NCAPINTS*32]		 = "coma",
+	[X86_BUG_AMD_TLB_MMATCH - NCAPINTS*32]	 = "tlb_mmatch",
+	[X86_BUG_AMD_APIC_C1E - NCAPINTS*32]	 = "apic_c1e",
+	[X86_BUG_11AP - NCAPINTS*32]		 = "11ap",
+	[X86_BUG_FXSAVE_LEAK - NCAPINTS*32]	 = "fxsave_leak",
+	[X86_BUG_CLFLUSH_MONITOR - NCAPINTS*32]	 = "clflush_monitor",
+};
diff -uNr old/arch/x86/mm/fault.c new/arch/x86/mm/fault.c
--- old/arch/x86/mm/fault.c	2014-12-16 23:09:45.000000000 +0530
+++ new/arch/x86/mm/fault.c	2015-01-29 23:48:33.000000000 +0530
@@ -1055,6 +1055,13 @@
  * {,trace_}do_page_fault() have notrace on. Having this an actual function
  * guarantees there's a function trace entry.
  */
+
+static void count_wss(unsigned int temp_pid, struct mm_struct *mm, unsigned long virt_addr){
+}
+static void (*pnt_wss)(unsigned int , struct mm_struct *, unsigned long)=&count_wss;
+EXPORT_SYMBOL(pnt_wss);
+
+
 static noinline void
 __do_page_fault(struct pt_regs *regs, unsigned long error_code,
 		unsigned long address)
@@ -1067,7 +1074,7 @@
 
 	tsk = current;
 	mm = tsk->mm;
-
+	
 	/*
 	 * Detect and handle instructions that would cause a page fault for
 	 * both a tracked kernel page and a userspace page.
@@ -1225,6 +1232,9 @@
 	 * we can handle it..
 	 */
 good_area:
+
+	pnt_wss((unsigned int)tsk->pid,mm,address);//Hook for wss
+
 	if (unlikely(access_error(error_code, vma))) {
 		bad_area_access_error(regs, error_code, address);
 		return;
diff -uNr old/arch/x86/syscalls/syscall_32.tbl new/arch/x86/syscalls/syscall_32.tbl
--- old/arch/x86/syscalls/syscall_32.tbl	2014-12-16 23:09:45.000000000 +0530
+++ new/arch/x86/syscalls/syscall_32.tbl	2015-01-29 23:48:30.000000000 +0530
@@ -364,3 +364,4 @@
 355	i386	getrandom		sys_getrandom
 356	i386	memfd_create		sys_memfd_create
 357	i386	bpf			sys_bpf
+358	i386	hello			sys_hello
diff -uNr old/arch/x86/syscalls/syscall_64.tbl new/arch/x86/syscalls/syscall_64.tbl
--- old/arch/x86/syscalls/syscall_64.tbl	2014-12-16 23:09:45.000000000 +0530
+++ new/arch/x86/syscalls/syscall_64.tbl	2015-01-29 23:48:30.000000000 +0530
@@ -328,6 +328,7 @@
 319	common	memfd_create		sys_memfd_create
 320	common	kexec_file_load		sys_kexec_file_load
 321	common	bpf			sys_bpf
+322	common	hello			sys_hello
 
 #
 # x32-specific system call numbers start at 512 to avoid cache impact
diff -uNr old/arch/x86/vdso/vdso-image-32-int80.c new/arch/x86/vdso/vdso-image-32-int80.c
--- old/arch/x86/vdso/vdso-image-32-int80.c	1970-01-01 05:30:00.000000000 +0530
+++ new/arch/x86/vdso/vdso-image-32-int80.c	2015-01-29 23:48:33.000000000 +0530
@@ -0,0 +1,432 @@
+/* AUTOMATICALLY GENERATED -- DO NOT EDIT */
+
+#include <linux/linkage.h>
+#include <asm/page_types.h>
+#include <asm/vdso.h>
+
+static unsigned char raw_data[4096] __page_aligned_data = {
+	0x7F, 0x45, 0x4C, 0x46, 0x01, 0x01, 0x01, 0x00, 0x00, 0x00, 
+	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x00, 0x03, 0x00, 
+	0x01, 0x00, 0x00, 0x00, 0x5C, 0x0C, 0x00, 0x00, 0x34, 0x00, 
+	0x00, 0x00, 0x4C, 0x0D, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
+	0x34, 0x00, 0x20, 0x00, 0x04, 0x00, 0x28, 0x00, 0x10, 0x00, 
+	0x0F, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
+	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7D, 0x0C, 
+	0x00, 0x00, 0x7D, 0x0C, 0x00, 0x00, 0x05, 0x00, 0x00, 0x00, 
+	0x00, 0x10, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x78, 0x02, 
+	0x00, 0x00, 0x78, 0x02, 0x00, 0x00, 0x78, 0x02, 0x00, 0x00, 
+	0x80, 0x00, 0x00, 0x00, 0x80, 0x00, 0x00, 0x00, 0x04, 0x00, 
+	0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 
+	0x20, 0x05, 0x00, 0x00, 0x20, 0x05, 0x00, 0x00, 0x20, 0x05, 
+	0x00, 0x00, 0x3C, 0x00, 0x00, 0x00, 0x3C, 0x00, 0x00, 0x00, 
+	0x04, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x50, 0xE5, 
+	0x74, 0x64, 0x5C, 0x05, 0x00, 0x00, 0x5C, 0x05, 0x00, 0x00, 
+	0x5C, 0x05, 0x00, 0x00, 0x24, 0x00, 0x00, 0x00, 0x24, 0x00, 
+	0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 
+	0x03, 0x00, 0x00, 0x00, 0x09, 0x00, 0x00, 0x00, 0x08, 0x00, 
+	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x06, 0x00, 0x00, 0x00, 
+	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
+	0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 
+	0x04, 0x00, 0x00, 0x00, 0x05, 0x00, 0x00, 0x00, 0x03, 0x00, 
+	0x00, 0x00, 0x07, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
+	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
+	0x00, 0x00, 0x81, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
+	0x00, 0x00, 0x00, 0x00, 0x11, 0x00, 0xF1, 0xFF, 0x16, 0x00, 
+	0x00, 0x00, 0x5C, 0x0C, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 
+	0x12, 0x00, 0x0B, 0x00, 0x28, 0x00, 0x00, 0x00, 0x50, 0x0A, 
+	0x00, 0x00, 0xD0, 0x01, 0x00, 0x00, 0x12, 0x00, 0x0B, 0x00, 
+	0x8B, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
+	0x00, 0x00, 0x11, 0x00, 0xF1, 0xFF, 0x5B, 0x00, 0x00, 0x00, 
+	0x54, 0x0C, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x12, 0x00, 
+	0x0B, 0x00, 0x01, 0x00, 0x00, 0x00, 0xF0, 0x06, 0x00, 0x00, 
+	0x55, 0x03, 0x00, 0x00, 0x12, 0x00, 0x0B, 0x00, 0x48, 0x00, 
+	0x00, 0x00, 0x48, 0x0C, 0x00, 0x00, 0x09, 0x00, 0x00, 0x00, 
+	0x12, 0x00, 0x0B, 0x00, 0x3C, 0x00, 0x00, 0x00, 0x20, 0x0C, 
+	0x00, 0x00, 0x1F, 0x00, 0x00, 0x00, 0x12, 0x00, 0x0B, 0x00, 
+	0x00, 0x5F, 0x5F, 0x76, 0x64, 0x73, 0x6F, 0x5F, 0x63, 0x6C, 
+	0x6F, 0x63, 0x6B, 0x5F, 0x67, 0x65, 0x74, 0x74, 0x69, 0x6D, 
+	0x65, 0x00, 0x5F, 0x5F, 0x6B, 0x65, 0x72, 0x6E, 0x65, 0x6C, 
+	0x5F, 0x76, 0x73, 0x79, 0x73, 0x63, 0x61, 0x6C, 0x6C, 0x00, 
+	0x5F, 0x5F, 0x76, 0x64, 0x73, 0x6F, 0x5F, 0x67, 0x65, 0x74, 
+	0x74, 0x69, 0x6D, 0x65, 0x6F, 0x66, 0x64, 0x61, 0x79, 0x00, 
+	0x5F, 0x5F, 0x76, 0x64, 0x73, 0x6F, 0x5F, 0x74, 0x69, 0x6D, 
+	0x65, 0x00, 0x5F, 0x5F, 0x6B, 0x65, 0x72, 0x6E, 0x65, 0x6C, 
+	0x5F, 0x73, 0x69, 0x67, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6E, 
+	0x00, 0x5F, 0x5F, 0x6B, 0x65, 0x72, 0x6E, 0x65, 0x6C, 0x5F, 
+	0x72, 0x74, 0x5F, 0x73, 0x69, 0x67, 0x72, 0x65, 0x74, 0x75, 
+	0x72, 0x6E, 0x00, 0x6C, 0x69, 0x6E, 0x75, 0x78, 0x2D, 0x67, 
+	0x61, 0x74, 0x65, 0x2E, 0x73, 0x6F, 0x2E, 0x31, 0x00, 0x4C, 
+	0x49, 0x4E, 0x55, 0x58, 0x5F, 0x32, 0x2E, 0x36, 0x00, 0x4C, 
+	0x49, 0x4E, 0x55, 0x58, 0x5F, 0x32, 0x2E, 0x35, 0x00, 0x00, 
+	0x00, 0x00, 0x02, 0x00, 0x03, 0x00, 0x02, 0x00, 0x03, 0x00, 
+	0x03, 0x00, 0x02, 0x00, 0x03, 0x00, 0x02, 0x00, 0x01, 0x00, 
+	0x01, 0x00, 0x01, 0x00, 0x01, 0x00, 0x91, 0xF0, 0xCE, 0x0F, 
+	0x14, 0x00, 0x00, 0x00, 0x1C, 0x00, 0x00, 0x00, 0x71, 0x00, 
+	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 
+	0x02, 0x00, 0x01, 0x00, 0xF6, 0x75, 0xAE, 0x03, 0x14, 0x00, 
+	0x00, 0x00, 0x1C, 0x00, 0x00, 0x00, 0x81, 0x00, 0x00, 0x00, 
+	0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x03, 0x00, 
+	0x01, 0x00, 0xF5, 0x75, 0xAE, 0x03, 0x14, 0x00, 0x00, 0x00, 
+	0x00, 0x00, 0x00, 0x00, 0x8B, 0x00, 0x00, 0x00, 0x00, 0x00, 
+	0x00, 0x00, 0x0E, 0x00, 0x00, 0x00, 0x71, 0x00, 0x00, 0x00, 
+	0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00, 
+	0x00, 0x00, 0xB4, 0x00, 0x00, 0x00, 0x05, 0x00, 0x00, 0x00, 
+	0x7C, 0x01, 0x00, 0x00, 0x06, 0x00, 0x00, 0x00, 0xEC, 0x00, 
+	0x00, 0x00, 0x0A, 0x00, 0x00, 0x00, 0x95, 0x00, 0x00, 0x00, 
+	0x0B, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0xFC, 0xFF, 
+	0xFF, 0x6F, 0x24, 0x02, 0x00, 0x00, 0xFD, 0xFF, 0xFF, 0x6F, 
+	0x03, 0x00, 0x00, 0x00, 0xF0, 0xFF, 0xFF, 0x6F, 0x12, 0x02, 
+	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
+	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
+	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
+	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
+	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
+	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
+	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
+	0x78, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
+	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
+	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
+	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
+	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
+	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
+	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
+	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
+	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
+	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
+	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
+	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
+	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
+	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
+	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
+	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
+	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
+	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
+	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
+	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
+	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
+	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
+	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
+	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
+	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
+	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
+	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
+	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
+	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
+	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
+	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
+	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
+	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
+	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
+	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
+	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
+	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
+	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
+	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
+	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
+	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
+	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
+	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
+	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
+	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
+	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
+	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
+	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
+	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
+	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
+	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
+	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
+	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
+	0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x14, 0x00, 0x00, 0x00, 
+	0x03, 0x00, 0x00, 0x00, 0x47, 0x4E, 0x55, 0x00, 0x50, 0x21, 
+	0x01, 0xF7, 0xF7, 0xBB, 0x3E, 0xF0, 0xC5, 0x5B, 0x68, 0xA7, 
+	0x46, 0x5C, 0x4C, 0x08, 0x6B, 0xF0, 0xC3, 0x7A, 0x06, 0x00, 
+	0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
+	0x4C, 0x69, 0x6E, 0x75, 0x78, 0x00, 0x00, 0x00, 0x01, 0x12, 
+	0x03, 0x00, 0x01, 0x1B, 0x03, 0x3B, 0x20, 0x00, 0x00, 0x00, 
+	0x03, 0x00, 0x00, 0x00, 0xEB, 0x06, 0x00, 0x00, 0x38, 0x00, 
+	0x00, 0x00, 0xF7, 0x06, 0x00, 0x00, 0xA4, 0x00, 0x00, 0x00, 
+	0x00, 0x07, 0x00, 0x00, 0x04, 0x01, 0x00, 0x00, 0x10, 0x00, 
+	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x7A, 0x52, 0x53, 
+	0x00, 0x01, 0x7C, 0x08, 0x01, 0x1B, 0x00, 0x00, 0x68, 0x00, 
+	0x00, 0x00, 0x18, 0x00, 0x00, 0x00, 0xAB, 0x06, 0x00, 0x00, 
+	0x09, 0x00, 0x00, 0x00, 0x00, 0x0F, 0x03, 0x74, 0x20, 0x06, 
+	0x10, 0x00, 0x02, 0x74, 0x30, 0x10, 0x01, 0x02, 0x74, 0x2C, 
+	0x10, 0x02, 0x02, 0x74, 0x28, 0x10, 0x03, 0x02, 0x74, 0x24, 
+	0x10, 0x05, 0x02, 0x74, 0x1C, 0x10, 0x06, 0x02, 0x74, 0x18, 
+	0x10, 0x07, 0x02, 0x74, 0x14, 0x10, 0x08, 0x02, 0x74, 0x3C, 
+	0x42, 0x0F, 0x03, 0x74, 0x1C, 0x06, 0x10, 0x00, 0x02, 0x74, 
+	0x2C, 0x10, 0x01, 0x02, 0x74, 0x28, 0x10, 0x02, 0x02, 0x74, 
+	0x24, 0x10, 0x03, 0x02, 0x74, 0x20, 0x10, 0x05, 0x02, 0x74, 
+	0x18, 0x10, 0x06, 0x02, 0x74, 0x14, 0x10, 0x07, 0x02, 0x74, 
+	0x10, 0x10, 0x08, 0x02, 0x74, 0x38, 0x44, 0x00, 0x00, 0x00, 
+	0x84, 0x00, 0x00, 0x00, 0x4B, 0x06, 0x00, 0x00, 0x08, 0x00, 
+	0x00, 0x00, 0x00, 0x0F, 0x04, 0x74, 0xBC, 0x01, 0x06, 0x10, 
+	0x00, 0x03, 0x74, 0xCC, 0x01, 0x10, 0x01, 0x03, 0x74, 0xC8, 
+	0x01, 0x10, 0x02, 0x03, 0x74, 0xC4, 0x01, 0x10, 0x03, 0x03, 
+	0x74, 0xC0, 0x01, 0x10, 0x05, 0x03, 0x74, 0xB8, 0x01, 0x10, 
+	0x06, 0x03, 0x74, 0xB4, 0x01, 0x10, 0x07, 0x03, 0x74, 0xB0, 
+	0x01, 0x10, 0x08, 0x03, 0x74, 0xD8, 0x01, 0x00, 0x14, 0x00, 
+	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x7A, 0x52, 0x00, 
+	0x01, 0x7C, 0x08, 0x01, 0x1B, 0x0C, 0x04, 0x04, 0x88, 0x01, 
+	0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x1C, 0x00, 0x00, 0x00, 
+	0xF4, 0x05, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 
+	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
+	0x00, 0x00, 0x00, 0x00, 0x55, 0x89, 0xE5, 0x83, 0xEC, 0x10, 
+	0x89, 0x5D, 0xF8, 0x89, 0x75, 0xFC, 0xE8, 0xB2, 0x05, 0x00, 
+	0x00, 0x81, 0xC3, 0x7B, 0xFC, 0xFF, 0xFF, 0x8D, 0x76, 0x00, 
+	0x8D, 0x76, 0x00, 0x0F, 0x31, 0x89, 0x54, 0x24, 0x04, 0x8B, 
+	0x8B, 0x80, 0xDD, 0xFF, 0xFF, 0x8B, 0x54, 0x24, 0x04, 0x89, 
+	0x04, 0x24, 0x8B, 0xB3, 0x7C, 0xDD, 0xFF, 0xFF, 0x8B, 0x04, 
+	0x24, 0x39, 0xD1, 0x72, 0x0B, 0x76, 0x19, 0x89, 0xF0, 0x89, 
+	0xCA, 0x90, 0x8D, 0x74, 0x26, 0x00, 0x8B, 0x5D, 0xF8, 0x8B, 
+	0x75, 0xFC, 0x89, 0xEC, 0x5D, 0xC3, 0x8D, 0xB6, 0x00, 0x00, 
+	0x00, 0x00, 0x39, 0xC6, 0x77, 0xE3, 0x8B, 0x5D, 0xF8, 0x8B, 
+	0x75, 0xFC, 0x89, 0xEC, 0x5D, 0xC3, 0x8D, 0x76, 0x00, 0x8D, 
+	0xBC, 0x27, 0x00, 0x00, 0x00, 0x00, 0x55, 0x89, 0xE5, 0x57, 
+	0x56, 0x53, 0x83, 0xEC, 0x34, 0x8B, 0x75, 0x0C, 0xE8, 0x42, 
+	0x05, 0x00, 0x00, 0x81, 0xC3, 0x0B, 0xFC, 0xFF, 0xFF, 0x83, 
+	0x7D, 0x08, 0x01, 0x74, 0x73, 0x0F, 0x8E, 0x4D, 0x01, 0x00, 
+	0x00, 0x83, 0x7D, 0x08, 0x05, 0x8D, 0x3D, 0x74, 0xDD, 0xFF, 
+	0xFF, 0x8D, 0x0D, 0xAC, 0xDD, 0xFF, 0xFF, 0x8D, 0x15, 0xB0, 
+	0xDD, 0xFF, 0xFF, 0x74, 0x2D, 0x83, 0x7D, 0x08, 0x06, 0x0F, 
+	0x84, 0x13, 0x02, 0x00, 0x00, 0x89, 0xF1, 0xB8, 0x09, 0x01, 
+	0x00, 0x00, 0x89, 0xDA, 0x8B, 0x5D, 0x08, 0xE8, 0x16, 0x05, 
+	0x00, 0x00, 0x89, 0xD3, 0x83, 0xC4, 0x34, 0x5B, 0x5E, 0x5F, 
+	0x5D, 0xC3, 0xF3, 0x90, 0x8D, 0xB6, 0x00, 0x00, 0x00, 0x00, 
+	0x8B, 0x04, 0x1F, 0xA8, 0x01, 0x89, 0x45, 0xF0, 0x75, 0xEE, 
+	0x8B, 0x04, 0x19, 0x89, 0x06, 0x8B, 0x04, 0x1A, 0x89, 0x46, 
+	0x04, 0x8B, 0x45, 0xF0, 0x3B, 0x04, 0x1F, 0x75, 0xE3, 0x31, 
+	0xC0, 0x83, 0xC4, 0x34, 0x5B, 0x5E, 0x5F, 0x5D, 0xC3, 0x90, 
+	0x8D, 0x05, 0x78, 0xDD, 0xFF, 0xFF, 0x89, 0x45, 0xF0, 0x8D, 
+	0x15, 0x90, 0xDD, 0xFF, 0xFF, 0x8D, 0x0D, 0xA0, 0xDD, 0xFF, 
+	0xFF, 0x8D, 0x05, 0xA4, 0xDD, 0xFF, 0xFF, 0x8D, 0x3D, 0x74, 
+	0xDD, 0xFF, 0xFF, 0x89, 0x55, 0xDC, 0x89, 0x4D, 0xE8, 0x89, 
+	0x45, 0xE0, 0x8B, 0x04, 0x1F, 0xA8, 0x01, 0x89, 0x45, 0xEC, 
+	0x0F, 0x85, 0x7D, 0x02, 0x00, 0x00, 0x8B, 0x55, 0xF0, 0x8B, 
+	0x4D, 0xE8, 0x8B, 0x14, 0x1A, 0x8B, 0x04, 0x19, 0x89, 0x55, 
+	0xD8, 0x8B, 0x55, 0xE0, 0x89, 0x06, 0x8B, 0x04, 0x1A, 0x8B, 
+	0x54, 0x1A, 0x04, 0x89, 0x45, 0xD0, 0x8B, 0x45, 0xF0, 0x89, 
+	0x55, 0xD4, 0x8B, 0x0C, 0x18, 0x83, 0xF9, 0x01, 0x0F, 0x84, 
+	0xA0, 0x01, 0x00, 0x00, 0x31, 0xC0, 0x31, 0xD2, 0x83, 0xF9, 
+	0x02, 0x0F, 0x84, 0xCB, 0x01, 0x00, 0x00, 0x8B, 0x4D, 0xDC, 
+	0x03, 0x45, 0xD0, 0x13, 0x55, 0xD4, 0x8B, 0x0C, 0x19, 0x0F, 
+	0xAD, 0xD0, 0xD3, 0xEA, 0xF6, 0xC1, 0x20, 0x74, 0x04, 0x89, 
+	0xD0, 0x31, 0xD2, 0x8B, 0x4D, 0xEC, 0x3B, 0x0C, 0x1F, 0x75, 
+	0x93, 0x83, 0xFA, 0x00, 0x8B, 0x3E, 0x89, 0x45, 0xF0, 0x77, 
+	0x09, 0x31, 0xC9, 0x3D, 0xFF, 0xC9, 0x9A, 0x3B, 0x76, 0x1D, 
+	0x31, 0xC9, 0x8D, 0x74, 0x26, 0x00, 0x05, 0x00, 0x36, 0x65, 
+	0xC4, 0x83, 0xD2, 0xFF, 0x83, 0xC1, 0x01, 0x83, 0xFA, 0x00, 
+	0x77, 0xF0, 0x3D, 0xFF, 0xC9, 0x9A, 0x3B, 0x77, 0xE9, 0x89, 
+	0x46, 0x04, 0x8B, 0x45, 0xD8, 0x01, 0xF9, 0x89, 0x0E, 0x85, 
+	0xC0, 0x0F, 0x84, 0xDC, 0xFE, 0xFF, 0xFF, 0x31, 0xC0, 0xE9, 
+	0x17, 0xFF, 0xFF, 0xFF, 0x8D, 0x05, 0x94, 0xDD, 0xFF, 0xFF, 
+	0x89, 0x45, 0xD8, 0x8B, 0x45, 0x08, 0x8D, 0x15, 0x78, 0xDD, 
+	0xFF, 0xFF, 0x89, 0x55, 0xF0, 0x8D, 0x0D, 0x9C, 0xDD, 0xFF, 
+	0xFF, 0x8D, 0x15, 0x90, 0xDD, 0xFF, 0xFF, 0x8D, 0x3D, 0x74, 
+	0xDD, 0xFF, 0xFF, 0x85, 0xC0, 0x89, 0x4D, 0xD0, 0x89, 0x55, 
+	0xDC, 0x0F, 0x85, 0xA0, 0xFE, 0xFF, 0xFF, 0x8B, 0x0C, 0x1F, 
+	0x89, 0x4D, 0xEC, 0x83, 0xE1, 0x01, 0x0F, 0x85, 0x81, 0x01, 
+	0x00, 0x00, 0x8B, 0x45, 0xF0, 0x8B, 0x55, 0xD0, 0x8B, 0x04, 
+	0x18, 0x89, 0x45, 0xE8, 0x8B, 0x04, 0x1A, 0x8B, 0x55, 0xD8, 
+	0x89, 0x06, 0x8B, 0x04, 0x1A, 0x8B, 0x54, 0x1A, 0x04, 0x89, 
+	0x45, 0xE0, 0x8B, 0x45, 0xF0, 0x89, 0x55, 0xE4, 0x8B, 0x0C, 
+	0x18, 0x83, 0xF9, 0x01, 0x0F, 0x84, 0x3C, 0x01, 0x00, 0x00, 
+	0x31, 0xC0, 0x31, 0xD2, 0x83, 0xF9, 0x02, 0x0F, 0x84, 0xEF, 
+	0x00, 0x00, 0x00, 0x8B, 0x4D, 0xDC, 0x03, 0x45, 0xE0, 0x13, 
+	0x55, 0xE4, 0x8B, 0x0C, 0x19, 0x0F, 0xAD, 0xD0, 0xD3, 0xEA, 
+	0xF6, 0xC1, 0x20, 0x74, 0x04, 0x89, 0xD0, 0x31, 0xD2, 0x8B, 
+	0x4D, 0xEC, 0x3B, 0x0C, 0x1F, 0x75, 0x92, 0x83, 0xFA, 0x00, 
+	0x8B, 0x3E, 0x89, 0x45, 0xF0, 0x77, 0x09, 0x31, 0xC9, 0x3D, 
+	0xFF, 0xC9, 0x9A, 0x3B, 0x76, 0x19, 0x31, 0xC9, 0x05, 0x00, 
+	0x36, 0x65, 0xC4, 0x83, 0xD2, 0xFF, 0x83, 0xC1, 0x01, 0x83, 
+	0xFA, 0x00, 0x77, 0xF0, 0x3D, 0xFF, 0xC9, 0x9A, 0x3B, 0x77, 
+	0xE9, 0x89, 0x46, 0x04, 0x8B, 0x45, 0xE8, 0x01, 0xF9, 0x89, 
+	0x0E, 0x85, 0xC0, 0x0F, 0x84, 0xF4, 0xFD, 0xFF, 0xFF, 0x31, 
+	0xC0, 0xE9, 0x2F, 0xFE, 0xFF, 0xFF, 0x8D, 0x15, 0xB8, 0xDD, 
+	0xFF, 0xFF, 0x8D, 0x3D, 0x74, 0xDD, 0xFF, 0xFF, 0x8D, 0x0D, 
+	0xB4, 0xDD, 0xFF, 0xFF, 0x89, 0x55, 0xF0, 0x8B, 0x04, 0x1F, 
+	0xA8, 0x01, 0x0F, 0x85, 0xAF, 0x00, 0x00, 0x00, 0x8B, 0x14, 
+	0x19, 0x89, 0x16, 0x8B, 0x55, 0xF0, 0x8B, 0x14, 0x1A, 0x89, 
+	0x56, 0x04, 0x3B, 0x04, 0x1F, 0x75, 0xE2, 0x31, 0xC0, 0xE9, 
+	0xF5, 0xFD, 0xFF, 0xFF, 0x8D, 0xB6, 0x00, 0x00, 0x00, 0x00, 
+	0xE8, 0xF3, 0xFC, 0xFF, 0xFF, 0x8B, 0x8B, 0x84, 0xDD, 0xFF, 
+	0xFF, 0x2B, 0x83, 0x7C, 0xDD, 0xFF, 0xFF, 0x1B, 0x93, 0x80, 
+	0xDD, 0xFF, 0xFF, 0x21, 0xC1, 0x8B, 0x83, 0x8C, 0xDD, 0xFF, 
+	0xFF, 0x89, 0x4D, 0xCC, 0x8B, 0x8B, 0x88, 0xDD, 0xFF, 0xFF, 
+	0x21, 0xD1, 0x0F, 0xAF, 0xC8, 0xF7, 0x65, 0xCC, 0x01, 0xCA, 
+	0xE9, 0x36, 0xFE, 0xFF, 0xFF, 0x90, 0x8B, 0x83, 0xE4, 0xED, 
+	0xFF, 0xFF, 0x31, 0xD2, 0xEB, 0xC3, 0x8D, 0xB6, 0x00, 0x00, 
+	0x00, 0x00, 0x8B, 0x83, 0xE4, 0xED, 0xFF, 0xFF, 0x31, 0xD2, 
+	0x8B, 0x8B, 0x84, 0xDD, 0xFF, 0xFF, 0x2B, 0x83, 0x7C, 0xDD, 
+	0xFF, 0xFF, 0x1B, 0x93, 0x80, 0xDD, 0xFF, 0xFF, 0x21, 0xC1, 
+	0x8B, 0x83, 0x8C, 0xDD, 0xFF, 0xFF, 0x89, 0x4D, 0xCC, 0x8B, 
+	0x8B, 0x88, 0xDD, 0xFF, 0xFF, 0x21, 0xD1, 0x0F, 0xAF, 0xC8, 
+	0xF7, 0x65, 0xCC, 0x01, 0xCA, 0xE9, 0xD7, 0xFE, 0xFF, 0xFF, 
+	0x8D, 0xB6, 0x00, 0x00, 0x00, 0x00, 0xE8, 0x6B, 0xFC, 0xFF, 
+	0xFF, 0xEB, 0xC1, 0xF3, 0x90, 0x8D, 0xB4, 0x26, 0x00, 0x00, 
+	0x00, 0x00, 0xE9, 0x38, 0xFF, 0xFF, 0xFF, 0xF3, 0x90, 0x89, 
+	0xF6, 0x8D, 0xBC, 0x27, 0x00, 0x00, 0x00, 0x00, 0xE9, 0x60, 
+	0xFE, 0xFF, 0xFF, 0xF3, 0x90, 0x89, 0xF6, 0x8D, 0xBC, 0x27, 
+	0x00, 0x00, 0x00, 0x00, 0xE9, 0x65, 0xFD, 0xFF, 0xFF, 0x8D, 
+	0x74, 0x26, 0x00, 0x8D, 0xBC, 0x27, 0x00, 0x00, 0x00, 0x00, 
+	0x55, 0x89, 0xE5, 0x57, 0x56, 0x53, 0x83, 0xEC, 0x28, 0x8B, 
+	0x7D, 0x08, 0xE8, 0xE2, 0x01, 0x00, 0x00, 0x81, 0xC3, 0xAB, 
+	0xF8, 0xFF, 0xFF, 0x85, 0xFF, 0x0F, 0x84, 0xDF, 0x00, 0x00, 
+	0x00, 0x8B, 0x83, 0x74, 0xDD, 0xFF, 0xFF, 0x8D, 0x15, 0x74, 
+	0xDD, 0xFF, 0xFF, 0x89, 0x55, 0xEC, 0x8D, 0x0D, 0x9C, 0xDD, 
+	0xFF, 0xFF, 0x8D, 0x15, 0x90, 0xDD, 0xFF, 0xFF, 0x8D, 0x35, 
+	0x78, 0xDD, 0xFF, 0xFF, 0x89, 0x45, 0xF0, 0x8D, 0x05, 0x94, 
+	0xDD, 0xFF, 0xFF, 0x89, 0x4D, 0xD4, 0x89, 0x45, 0xD8, 0x89, 
+	0x55, 0xDC, 0xF6, 0x45, 0xF0, 0x01, 0x0F, 0x85, 0x2B, 0x01, 
+	0x00, 0x00, 0x8B, 0x4D, 0xD4, 0x8B, 0x14, 0x1E, 0x8B, 0x04, 
+	0x19, 0x89, 0x55, 0xE8, 0x8B, 0x55, 0xD8, 0x89, 0x07, 0x8B, 
+	0x0C, 0x1E, 0x8B, 0x04, 0x1A, 0x8B, 0x54, 0x1A, 0x04, 0x83, 
+	0xF9, 0x01, 0x89, 0x45, 0xE0, 0x89, 0x55, 0xE4, 0x0F, 0x84, 
+	0xFA, 0x00, 0x00, 0x00, 0x31, 0xC0, 0x31, 0xD2, 0x83, 0xF9, 
+	0x02, 0x0F, 0x84, 0xAD, 0x00, 0x00, 0x00, 0x8B, 0x4D, 0xDC, 
+	0x03, 0x45, 0xE0, 0x13, 0x55, 0xE4, 0x8B, 0x0C, 0x19, 0x0F, 
+	0xAD, 0xD0, 0xD3, 0xEA, 0xF6, 0xC1, 0x20, 0x74, 0x04, 0x89, 
+	0xD0, 0x31, 0xD2, 0x8B, 0x4D, 0xEC, 0x8B, 0x0C, 0x19, 0x89, 
+	0x4D, 0xE0, 0x8B, 0x4D, 0xF0, 0x39, 0x4D, 0xE0, 0x0F, 0x85, 
+	0xD0, 0x00, 0x00, 0x00, 0x83, 0xFA, 0x00, 0x8B, 0x37, 0x89, 
+	0x45, 0xF0, 0x77, 0x4C, 0x31, 0xC9, 0x3D, 0xFF, 0xC9, 0x9A, 
+	0x3B, 0x77, 0x43, 0x8D, 0x76, 0x00, 0x01, 0xF1, 0x8B, 0x75, 
+	0xE8, 0x89, 0x0F, 0x89, 0xC1, 0x89, 0x47, 0x04, 0x85, 0xF6, 
+	0x0F, 0x84, 0xCC, 0x00, 0x00, 0x00, 0xBA, 0xD3, 0x4D, 0x62, 
+	0x10, 0xF7, 0xEA, 0xC1, 0xF9, 0x1F, 0xC1, 0xFA, 0x06, 0x29, 
+	0xCA, 0x89, 0x57, 0x04, 0x8B, 0x55, 0x0C, 0x85, 0xD2, 0x0F, 
+	0x85, 0x94, 0x00, 0x00, 0x00, 0x31, 0xC0, 0x83, 0xC4, 0x28, 
+	0x5B, 0x5E, 0x5F, 0x5D, 0xC3, 0x90, 0x8D, 0x74, 0x26, 0x00, 
+	0x31, 0xC9, 0x8D, 0xB6, 0x00, 0x00, 0x00, 0x00, 0x05, 0x00, 
+	0x36, 0x65, 0xC4, 0x83, 0xD2, 0xFF, 0x83, 0xC1, 0x01, 0x83, 
+	0xFA, 0x00, 0x77, 0xF0, 0x3D, 0xFF, 0xC9, 0x9A, 0x3B, 0x77, 
+	0xE9, 0xEB, 0x9F, 0x8D, 0xB4, 0x26, 0x00, 0x00, 0x00, 0x00, 
+	0x8B, 0x83, 0xE4, 0xED, 0xFF, 0xFF, 0x31, 0xD2, 0x8B, 0x8B, 
+	0x84, 0xDD, 0xFF, 0xFF, 0x2B, 0x83, 0x7C, 0xDD, 0xFF, 0xFF, 
+	0x1B, 0x93, 0x80, 0xDD, 0xFF, 0xFF, 0x21, 0xC1, 0x8B, 0x83, 
+	0x8C, 0xDD, 0xFF, 0xFF, 0x89, 0x4D, 0xD0, 0x8B, 0x8B, 0x88, 
+	0xDD, 0xFF, 0xFF, 0x21, 0xD1, 0x0F, 0xAF, 0xC8, 0xF7, 0x65, 
+	0xD0, 0x01, 0xCA, 0xE9, 0x19, 0xFF, 0xFF, 0xFF, 0x8D, 0xB6, 
+	0x00, 0x00, 0x00, 0x00, 0xE8, 0xAB, 0xFA, 0xFF, 0xFF, 0xEB, 
+	0xC1, 0xF3, 0x90, 0x8B, 0x45, 0xEC, 0x8B, 0x04, 0x18, 0x89, 
+	0x45, 0xE0, 0x8B, 0x4D, 0xE0, 0x89, 0x4D, 0xF0, 0xE9, 0xB5, 
+	0xFE, 0xFF, 0xFF, 0x8B, 0x83, 0xBC, 0xDD, 0xFF, 0xFF, 0x8B, 
+	0x4D, 0x0C, 0x89, 0x01, 0x8B, 0x83, 0xC0, 0xDD, 0xFF, 0xFF, 
+	0x89, 0x41, 0x04, 0x31, 0xC0, 0xE9, 0x53, 0xFF, 0xFF, 0xFF, 
+	0xB8, 0x4E, 0x00, 0x00, 0x00, 0x8B, 0x4D, 0x0C, 0x89, 0xDA, 
+	0x89, 0xFB, 0xE8, 0x43, 0x00, 0x00, 0x00, 0x89, 0xD3, 0xE9, 
+	0x3B, 0xFF, 0xFF, 0xFF, 0x55, 0xE8, 0x19, 0x00, 0x00, 0x00, 
+	0x81, 0xC1, 0xE6, 0xF6, 0xFF, 0xFF, 0x89, 0xE5, 0x8B, 0x55, 
+	0x08, 0x85, 0xD2, 0x8B, 0x81, 0x9C, 0xDD, 0xFF, 0xFF, 0x74, 
+	0x02, 0x89, 0x02, 0x5D, 0xC3, 0x8B, 0x0C, 0x24, 0xC3, 0x8B, 
+	0x1C, 0x24, 0xC3, 0x90, 0x58, 0xB8, 0x77, 0x00, 0x00, 0x00, 
+	0xCD, 0x80, 0x90, 0x8D, 0x76, 0x00, 0xB8, 0xAD, 0x00, 0x00, 
+	0x00, 0xCD, 0x80, 0x90, 0xCD, 0x80, 0xC3, 0x38, 0xFA, 0xFF, 
+	0xFF, 0x14, 0x00, 0x00, 0x00, 0x71, 0x00, 0x03, 0x03, 0x2F, 
+	0xFA, 0xFF, 0xFF, 0x0B, 0x00, 0x00, 0x00, 0x72, 0x00, 0x03, 
+	0x03, 0x0F, 0xAE, 0xF0, 0x0F, 0xAE, 0xE8, 0x47, 0x43, 0x43, 
+	0x3A, 0x20, 0x28, 0x55, 0x62, 0x75, 0x6E, 0x74, 0x75, 0x2F, 
+	0x4C, 0x69, 0x6E, 0x61, 0x72, 0x6F, 0x20, 0x34, 0x2E, 0x36, 
+	0x2E, 0x33, 0x2D, 0x31, 0x75, 0x62, 0x75, 0x6E, 0x74, 0x75, 
+	0x35, 0x29, 0x20, 0x34, 0x2E, 0x36, 0x2E, 0x33, 0x00, 0x00, 
+	0x2E, 0x73, 0x68, 0x73, 0x74, 0x72, 0x74, 0x61, 0x62, 0x00, 
+	0x2E, 0x68, 0x61, 0x73, 0x68, 0x00, 0x2E, 0x64, 0x79, 0x6E, 
+	0x73, 0x79, 0x6D, 0x00, 0x2E, 0x64, 0x79, 0x6E, 0x73, 0x74, 
+	0x72, 0x00, 0x2E, 0x67, 0x6E, 0x75, 0x2E, 0x76, 0x65, 0x72, 
+	0x73, 0x69, 0x6F, 0x6E, 0x00, 0x2E, 0x67, 0x6E, 0x75, 0x2E, 
+	0x76, 0x65, 0x72, 0x73, 0x69, 0x6F, 0x6E, 0x5F, 0x64, 0x00, 
+	0x2E, 0x64, 0x79, 0x6E, 0x61, 0x6D, 0x69, 0x63, 0x00, 0x2E, 
+	0x72, 0x6F, 0x64, 0x61, 0x74, 0x61, 0x00, 0x2E, 0x6E, 0x6F, 
+	0x74, 0x65, 0x00, 0x2E, 0x65, 0x68, 0x5F, 0x66, 0x72, 0x61, 
+	0x6D, 0x65, 0x5F, 0x68, 0x64, 0x72, 0x00, 0x2E, 0x65, 0x68, 
+	0x5F, 0x66, 0x72, 0x61, 0x6D, 0x65, 0x00, 0x2E, 0x74, 0x65, 
+	0x78, 0x74, 0x00, 0x2E, 0x61, 0x6C, 0x74, 0x69, 0x6E, 0x73, 
+	0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6F, 0x6E, 0x73, 0x00, 
+	0x2E, 0x61, 0x6C, 0x74, 0x69, 0x6E, 0x73, 0x74, 0x72, 0x5F, 
+	0x72, 0x65, 0x70, 0x6C, 0x61, 0x63, 0x65, 0x6D, 0x65, 0x6E, 
+	0x74, 0x00, 0x2E, 0x63, 0x6F, 0x6D, 0x6D, 0x65, 0x6E, 0x74, 
+	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
+	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
+	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
+	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
+	0x00, 0x00, 0x00, 0x00, 0x0B, 0x00, 0x00, 0x00, 0x05, 0x00, 
+	0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0xB4, 0x00, 0x00, 0x00, 
+	0xB4, 0x00, 0x00, 0x00, 0x38, 0x00, 0x00, 0x00, 0x02, 0x00, 
+	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 
+	0x04, 0x00, 0x00, 0x00, 0x11, 0x00, 0x00, 0x00, 0x0B, 0x00, 
+	0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0xEC, 0x00, 0x00, 0x00, 
+	0xEC, 0x00, 0x00, 0x00, 0x90, 0x00, 0x00, 0x00, 0x03, 0x00, 
+	0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 
+	0x10, 0x00, 0x00, 0x00, 0x19, 0x00, 0x00, 0x00, 0x03, 0x00, 
+	0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x7C, 0x01, 0x00, 0x00, 
+	0x7C, 0x01, 0x00, 0x00, 0x95, 0x00, 0x00, 0x00, 0x00, 0x00, 
+	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 
+	0x00, 0x00, 0x00, 0x00, 0x21, 0x00, 0x00, 0x00, 0xFF, 0xFF, 
+	0xFF, 0x6F, 0x02, 0x00, 0x00, 0x00, 0x12, 0x02, 0x00, 0x00, 
+	0x12, 0x02, 0x00, 0x00, 0x12, 0x00, 0x00, 0x00, 0x02, 0x00, 
+	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 
+	0x02, 0x00, 0x00, 0x00, 0x2E, 0x00, 0x00, 0x00, 0xFD, 0xFF, 
+	0xFF, 0x6F, 0x02, 0x00, 0x00, 0x00, 0x24, 0x02, 0x00, 0x00, 
+	0x24, 0x02, 0x00, 0x00, 0x54, 0x00, 0x00, 0x00, 0x03, 0x00, 
+	0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 
+	0x00, 0x00, 0x00, 0x00, 0x3D, 0x00, 0x00, 0x00, 0x06, 0x00, 
+	0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x78, 0x02, 0x00, 0x00, 
+	0x78, 0x02, 0x00, 0x00, 0x80, 0x00, 0x00, 0x00, 0x03, 0x00, 
+	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 
+	0x08, 0x00, 0x00, 0x00, 0x46, 0x00, 0x00, 0x00, 0x01, 0x00, 
+	0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0xF8, 0x02, 0x00, 0x00, 
+	0xF8, 0x02, 0x00, 0x00, 0x28, 0x02, 0x00, 0x00, 0x00, 0x00, 
+	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 
+	0x04, 0x00, 0x00, 0x00, 0x4E, 0x00, 0x00, 0x00, 0x07, 0x00, 
+	0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x20, 0x05, 0x00, 0x00, 
+	0x20, 0x05, 0x00, 0x00, 0x3C, 0x00, 0x00, 0x00, 0x00, 0x00, 
+	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 
+	0x00, 0x00, 0x00, 0x00, 0x54, 0x00, 0x00, 0x00, 0x01, 0x00, 
+	0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x5C, 0x05, 0x00, 0x00, 
+	0x5C, 0x05, 0x00, 0x00, 0x24, 0x00, 0x00, 0x00, 0x00, 0x00, 
+	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 
+	0x00, 0x00, 0x00, 0x00, 0x62, 0x00, 0x00, 0x00, 0x01, 0x00, 
+	0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x80, 0x05, 0x00, 0x00, 
+	0x80, 0x05, 0x00, 0x00, 0xF4, 0x00, 0x00, 0x00, 0x00, 0x00, 
+	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 
+	0x00, 0x00, 0x00, 0x00, 0x6C, 0x00, 0x00, 0x00, 0x01, 0x00, 
+	0x00, 0x00, 0x06, 0x00, 0x00, 0x00, 0x80, 0x06, 0x00, 0x00, 
+	0x80, 0x06, 0x00, 0x00, 0xDF, 0x05, 0x00, 0x00, 0x00, 0x00, 
+	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 
+	0x00, 0x00, 0x00, 0x00, 0x72, 0x00, 0x00, 0x00, 0x01, 0x00, 
+	0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x5F, 0x0C, 0x00, 0x00, 
+	0x5F, 0x0C, 0x00, 0x00, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 
+	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 
+	0x00, 0x00, 0x00, 0x00, 0x83, 0x00, 0x00, 0x00, 0x01, 0x00, 
+	0x00, 0x00, 0x06, 0x00, 0x00, 0x00, 0x77, 0x0C, 0x00, 0x00, 
+	0x77, 0x0C, 0x00, 0x00, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 
+	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 
+	0x00, 0x00, 0x00, 0x00, 0x99, 0x00, 0x00, 0x00, 0x01, 0x00, 
+	0x00, 0x00, 0x30, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
+	0x7D, 0x0C, 0x00, 0x00, 0x2A, 0x00, 0x00, 0x00, 0x00, 0x00, 
+	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 
+	0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x03, 0x00, 
+	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
+	0xA7, 0x0C, 0x00, 0x00, 0xA2, 0x00, 0x00, 0x00, 0x00, 0x00, 
+	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 
+	0x00, 0x00, 0x00, 0x00, 
+};
+
+static struct page *pages[1];
+
+const struct vdso_image vdso_image_32_int80 = {
+	.data = raw_data,
+	.size = 4096,
+	.text_mapping = {
+		.name = "[vdso]",
+		.pages = pages,
+	},
+	.alt = 3167,
+	.alt_len = 24,
+	.sym_vvar_start = -8192,
+	.sym_vvar_page = -8192,
+	.sym_hpet_page = -4096,
+	.sym___kernel_vsyscall = 3164,
+	.sym___kernel_sigreturn = 3144,
+	.sym___kernel_rt_sigreturn = 3156,
+};
diff -uNr old/arch/x86/vdso/vdso-image-32-sysenter.c new/arch/x86/vdso/vdso-image-32-sysenter.c
--- old/arch/x86/vdso/vdso-image-32-sysenter.c	1970-01-01 05:30:00.000000000 +0530
+++ new/arch/x86/vdso/vdso-image-32-sysenter.c	2015-01-29 23:48:33.000000000 +0530
@@ -0,0 +1,434 @@
+/* AUTOMATICALLY GENERATED -- DO NOT EDIT */
+
+#include <linux/linkage.h>
+#include <asm/page_types.h>
+#include <asm/vdso.h>
+
+static unsigned char raw_data[4096] __page_aligned_data = {
+	0x7F, 0x45, 0x4C, 0x46, 0x01, 0x01, 0x01, 0x00, 0x00, 0x00, 
+	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x00, 0x03, 0x00, 
+	0x01, 0x00, 0x00, 0x00, 0x5C, 0x0C, 0x00, 0x00, 0x34, 0x00, 
+	0x00, 0x00, 0x5C, 0x0D, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
+	0x34, 0x00, 0x20, 0x00, 0x04, 0x00, 0x28, 0x00, 0x10, 0x00, 
+	0x0F, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
+	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x8E, 0x0C, 
+	0x00, 0x00, 0x8E, 0x0C, 0x00, 0x00, 0x05, 0x00, 0x00, 0x00, 
+	0x00, 0x10, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x78, 0x02, 
+	0x00, 0x00, 0x78, 0x02, 0x00, 0x00, 0x78, 0x02, 0x00, 0x00, 
+	0x80, 0x00, 0x00, 0x00, 0x80, 0x00, 0x00, 0x00, 0x04, 0x00, 
+	0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 
+	0x0C, 0x05, 0x00, 0x00, 0x0C, 0x05, 0x00, 0x00, 0x0C, 0x05, 
+	0x00, 0x00, 0x3C, 0x00, 0x00, 0x00, 0x3C, 0x00, 0x00, 0x00, 
+	0x04, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x50, 0xE5, 
+	0x74, 0x64, 0x48, 0x05, 0x00, 0x00, 0x48, 0x05, 0x00, 0x00, 
+	0x48, 0x05, 0x00, 0x00, 0x24, 0x00, 0x00, 0x00, 0x24, 0x00, 
+	0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 
+	0x03, 0x00, 0x00, 0x00, 0x09, 0x00, 0x00, 0x00, 0x08, 0x00, 
+	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x06, 0x00, 0x00, 0x00, 
+	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
+	0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 
+	0x04, 0x00, 0x00, 0x00, 0x05, 0x00, 0x00, 0x00, 0x03, 0x00, 
+	0x00, 0x00, 0x07, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
+	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
+	0x00, 0x00, 0x81, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
+	0x00, 0x00, 0x00, 0x00, 0x11, 0x00, 0xF1, 0xFF, 0x16, 0x00, 
+	0x00, 0x00, 0x5C, 0x0C, 0x00, 0x00, 0x14, 0x00, 0x00, 0x00, 
+	0x12, 0x00, 0x0B, 0x00, 0x28, 0x00, 0x00, 0x00, 0x50, 0x0A, 
+	0x00, 0x00, 0xD0, 0x01, 0x00, 0x00, 0x12, 0x00, 0x0B, 0x00, 
+	0x8B, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
+	0x00, 0x00, 0x11, 0x00, 0xF1, 0xFF, 0x5B, 0x00, 0x00, 0x00, 
+	0x54, 0x0C, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x12, 0x00, 
+	0x0B, 0x00, 0x01, 0x00, 0x00, 0x00, 0xF0, 0x06, 0x00, 0x00, 
+	0x55, 0x03, 0x00, 0x00, 0x12, 0x00, 0x0B, 0x00, 0x48, 0x00, 
+	0x00, 0x00, 0x48, 0x0C, 0x00, 0x00, 0x09, 0x00, 0x00, 0x00, 
+	0x12, 0x00, 0x0B, 0x00, 0x3C, 0x00, 0x00, 0x00, 0x20, 0x0C, 
+	0x00, 0x00, 0x1F, 0x00, 0x00, 0x00, 0x12, 0x00, 0x0B, 0x00, 
+	0x00, 0x5F, 0x5F, 0x76, 0x64, 0x73, 0x6F, 0x5F, 0x63, 0x6C, 
+	0x6F, 0x63, 0x6B, 0x5F, 0x67, 0x65, 0x74, 0x74, 0x69, 0x6D, 
+	0x65, 0x00, 0x5F, 0x5F, 0x6B, 0x65, 0x72, 0x6E, 0x65, 0x6C, 
+	0x5F, 0x76, 0x73, 0x79, 0x73, 0x63, 0x61, 0x6C, 0x6C, 0x00, 
+	0x5F, 0x5F, 0x76, 0x64, 0x73, 0x6F, 0x5F, 0x67, 0x65, 0x74, 
+	0x74, 0x69, 0x6D, 0x65, 0x6F, 0x66, 0x64, 0x61, 0x79, 0x00, 
+	0x5F, 0x5F, 0x76, 0x64, 0x73, 0x6F, 0x5F, 0x74, 0x69, 0x6D, 
+	0x65, 0x00, 0x5F, 0x5F, 0x6B, 0x65, 0x72, 0x6E, 0x65, 0x6C, 
+	0x5F, 0x73, 0x69, 0x67, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6E, 
+	0x00, 0x5F, 0x5F, 0x6B, 0x65, 0x72, 0x6E, 0x65, 0x6C, 0x5F, 
+	0x72, 0x74, 0x5F, 0x73, 0x69, 0x67, 0x72, 0x65, 0x74, 0x75, 
+	0x72, 0x6E, 0x00, 0x6C, 0x69, 0x6E, 0x75, 0x78, 0x2D, 0x67, 
+	0x61, 0x74, 0x65, 0x2E, 0x73, 0x6F, 0x2E, 0x31, 0x00, 0x4C, 
+	0x49, 0x4E, 0x55, 0x58, 0x5F, 0x32, 0x2E, 0x36, 0x00, 0x4C, 
+	0x49, 0x4E, 0x55, 0x58, 0x5F, 0x32, 0x2E, 0x35, 0x00, 0x00, 
+	0x00, 0x00, 0x02, 0x00, 0x03, 0x00, 0x02, 0x00, 0x03, 0x00, 
+	0x03, 0x00, 0x02, 0x00, 0x03, 0x00, 0x02, 0x00, 0x01, 0x00, 
+	0x01, 0x00, 0x01, 0x00, 0x01, 0x00, 0x91, 0xF0, 0xCE, 0x0F, 
+	0x14, 0x00, 0x00, 0x00, 0x1C, 0x00, 0x00, 0x00, 0x71, 0x00, 
+	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 
+	0x02, 0x00, 0x01, 0x00, 0xF6, 0x75, 0xAE, 0x03, 0x14, 0x00, 
+	0x00, 0x00, 0x1C, 0x00, 0x00, 0x00, 0x81, 0x00, 0x00, 0x00, 
+	0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x03, 0x00, 
+	0x01, 0x00, 0xF5, 0x75, 0xAE, 0x03, 0x14, 0x00, 0x00, 0x00, 
+	0x00, 0x00, 0x00, 0x00, 0x8B, 0x00, 0x00, 0x00, 0x00, 0x00, 
+	0x00, 0x00, 0x0E, 0x00, 0x00, 0x00, 0x71, 0x00, 0x00, 0x00, 
+	0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00, 
+	0x00, 0x00, 0xB4, 0x00, 0x00, 0x00, 0x05, 0x00, 0x00, 0x00, 
+	0x7C, 0x01, 0x00, 0x00, 0x06, 0x00, 0x00, 0x00, 0xEC, 0x00, 
+	0x00, 0x00, 0x0A, 0x00, 0x00, 0x00, 0x95, 0x00, 0x00, 0x00, 
+	0x0B, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0xFC, 0xFF, 
+	0xFF, 0x6F, 0x24, 0x02, 0x00, 0x00, 0xFD, 0xFF, 0xFF, 0x6F, 
+	0x03, 0x00, 0x00, 0x00, 0xF0, 0xFF, 0xFF, 0x6F, 0x12, 0x02, 
+	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
+	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
+	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
+	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
+	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
+	0x78, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
+	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
+	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
+	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
+	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
+	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
+	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
+	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
+	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
+	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
+	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
+	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
+	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
+	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
+	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
+	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
+	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
+	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
+	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
+	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
+	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
+	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
+	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
+	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
+	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
+	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
+	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
+	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
+	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
+	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
+	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
+	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
+	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
+	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
+	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
+	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
+	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
+	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
+	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
+	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
+	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
+	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
+	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
+	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
+	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
+	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
+	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
+	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
+	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
+	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
+	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
+	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
+	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
+	0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x14, 0x00, 0x00, 0x00, 
+	0x03, 0x00, 0x00, 0x00, 0x47, 0x4E, 0x55, 0x00, 0xFF, 0x3E, 
+	0xD0, 0xC0, 0xA4, 0x76, 0xE2, 0x76, 0x06, 0xD8, 0x10, 0xCD, 
+	0x71, 0xEE, 0x4B, 0x8E, 0xEF, 0x37, 0xC3, 0x76, 0x06, 0x00, 
+	0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
+	0x4C, 0x69, 0x6E, 0x75, 0x78, 0x00, 0x00, 0x00, 0x01, 0x12, 
+	0x03, 0x00, 0x01, 0x1B, 0x03, 0x3B, 0x20, 0x00, 0x00, 0x00, 
+	0x03, 0x00, 0x00, 0x00, 0xFF, 0x06, 0x00, 0x00, 0x38, 0x00, 
+	0x00, 0x00, 0x0B, 0x07, 0x00, 0x00, 0xA4, 0x00, 0x00, 0x00, 
+	0x14, 0x07, 0x00, 0x00, 0x04, 0x01, 0x00, 0x00, 0x10, 0x00, 
+	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x7A, 0x52, 0x53, 
+	0x00, 0x01, 0x7C, 0x08, 0x01, 0x1B, 0x00, 0x00, 0x68, 0x00, 
+	0x00, 0x00, 0x18, 0x00, 0x00, 0x00, 0xBF, 0x06, 0x00, 0x00, 
+	0x09, 0x00, 0x00, 0x00, 0x00, 0x0F, 0x03, 0x74, 0x20, 0x06, 
+	0x10, 0x00, 0x02, 0x74, 0x30, 0x10, 0x01, 0x02, 0x74, 0x2C, 
+	0x10, 0x02, 0x02, 0x74, 0x28, 0x10, 0x03, 0x02, 0x74, 0x24, 
+	0x10, 0x05, 0x02, 0x74, 0x1C, 0x10, 0x06, 0x02, 0x74, 0x18, 
+	0x10, 0x07, 0x02, 0x74, 0x14, 0x10, 0x08, 0x02, 0x74, 0x3C, 
+	0x42, 0x0F, 0x03, 0x74, 0x1C, 0x06, 0x10, 0x00, 0x02, 0x74, 
+	0x2C, 0x10, 0x01, 0x02, 0x74, 0x28, 0x10, 0x02, 0x02, 0x74, 
+	0x24, 0x10, 0x03, 0x02, 0x74, 0x20, 0x10, 0x05, 0x02, 0x74, 
+	0x18, 0x10, 0x06, 0x02, 0x74, 0x14, 0x10, 0x07, 0x02, 0x74, 
+	0x10, 0x10, 0x08, 0x02, 0x74, 0x38, 0x44, 0x00, 0x00, 0x00, 
+	0x84, 0x00, 0x00, 0x00, 0x5F, 0x06, 0x00, 0x00, 0x08, 0x00, 
+	0x00, 0x00, 0x00, 0x0F, 0x04, 0x74, 0xBC, 0x01, 0x06, 0x10, 
+	0x00, 0x03, 0x74, 0xCC, 0x01, 0x10, 0x01, 0x03, 0x74, 0xC8, 
+	0x01, 0x10, 0x02, 0x03, 0x74, 0xC4, 0x01, 0x10, 0x03, 0x03, 
+	0x74, 0xC0, 0x01, 0x10, 0x05, 0x03, 0x74, 0xB8, 0x01, 0x10, 
+	0x06, 0x03, 0x74, 0xB4, 0x01, 0x10, 0x07, 0x03, 0x74, 0xB0, 
+	0x01, 0x10, 0x08, 0x03, 0x74, 0xD8, 0x01, 0x00, 0x14, 0x00, 
+	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x7A, 0x52, 0x00, 
+	0x01, 0x7C, 0x08, 0x01, 0x1B, 0x0C, 0x04, 0x04, 0x88, 0x01, 
+	0x00, 0x00, 0x24, 0x00, 0x00, 0x00, 0x1C, 0x00, 0x00, 0x00, 
+	0x08, 0x06, 0x00, 0x00, 0x14, 0x00, 0x00, 0x00, 0x00, 0x41, 
+	0x0E, 0x08, 0x41, 0x0E, 0x0C, 0x41, 0x0E, 0x10, 0x85, 0x04, 
+	0x4E, 0x0E, 0x0C, 0xC5, 0x41, 0x0E, 0x08, 0x41, 0x0E, 0x04, 
+	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
+	0x00, 0x00, 0x00, 0x00, 0x55, 0x89, 0xE5, 0x83, 0xEC, 0x10, 
+	0x89, 0x5D, 0xF8, 0x89, 0x75, 0xFC, 0xE8, 0xB2, 0x05, 0x00, 
+	0x00, 0x81, 0xC3, 0x67, 0xFC, 0xFF, 0xFF, 0x8D, 0x76, 0x00, 
+	0x8D, 0x76, 0x00, 0x0F, 0x31, 0x89, 0x54, 0x24, 0x04, 0x8B, 
+	0x8B, 0x94, 0xDD, 0xFF, 0xFF, 0x8B, 0x54, 0x24, 0x04, 0x89, 
+	0x04, 0x24, 0x8B, 0xB3, 0x90, 0xDD, 0xFF, 0xFF, 0x8B, 0x04, 
+	0x24, 0x39, 0xD1, 0x72, 0x0B, 0x76, 0x19, 0x89, 0xF0, 0x89, 
+	0xCA, 0x90, 0x8D, 0x74, 0x26, 0x00, 0x8B, 0x5D, 0xF8, 0x8B, 
+	0x75, 0xFC, 0x89, 0xEC, 0x5D, 0xC3, 0x8D, 0xB6, 0x00, 0x00, 
+	0x00, 0x00, 0x39, 0xC6, 0x77, 0xE3, 0x8B, 0x5D, 0xF8, 0x8B, 
+	0x75, 0xFC, 0x89, 0xEC, 0x5D, 0xC3, 0x8D, 0x76, 0x00, 0x8D, 
+	0xBC, 0x27, 0x00, 0x00, 0x00, 0x00, 0x55, 0x89, 0xE5, 0x57, 
+	0x56, 0x53, 0x83, 0xEC, 0x34, 0x8B, 0x75, 0x0C, 0xE8, 0x42, 
+	0x05, 0x00, 0x00, 0x81, 0xC3, 0xF7, 0xFB, 0xFF, 0xFF, 0x83, 
+	0x7D, 0x08, 0x01, 0x74, 0x73, 0x0F, 0x8E, 0x4D, 0x01, 0x00, 
+	0x00, 0x83, 0x7D, 0x08, 0x05, 0x8D, 0x3D, 0x88, 0xDD, 0xFF, 
+	0xFF, 0x8D, 0x0D, 0xC0, 0xDD, 0xFF, 0xFF, 0x8D, 0x15, 0xC4, 
+	0xDD, 0xFF, 0xFF, 0x74, 0x2D, 0x83, 0x7D, 0x08, 0x06, 0x0F, 
+	0x84, 0x13, 0x02, 0x00, 0x00, 0x89, 0xF1, 0xB8, 0x09, 0x01, 
+	0x00, 0x00, 0x89, 0xDA, 0x8B, 0x5D, 0x08, 0xE8, 0x16, 0x05, 
+	0x00, 0x00, 0x89, 0xD3, 0x83, 0xC4, 0x34, 0x5B, 0x5E, 0x5F, 
+	0x5D, 0xC3, 0xF3, 0x90, 0x8D, 0xB6, 0x00, 0x00, 0x00, 0x00, 
+	0x8B, 0x04, 0x1F, 0xA8, 0x01, 0x89, 0x45, 0xF0, 0x75, 0xEE, 
+	0x8B, 0x04, 0x19, 0x89, 0x06, 0x8B, 0x04, 0x1A, 0x89, 0x46, 
+	0x04, 0x8B, 0x45, 0xF0, 0x3B, 0x04, 0x1F, 0x75, 0xE3, 0x31, 
+	0xC0, 0x83, 0xC4, 0x34, 0x5B, 0x5E, 0x5F, 0x5D, 0xC3, 0x90, 
+	0x8D, 0x05, 0x8C, 0xDD, 0xFF, 0xFF, 0x89, 0x45, 0xF0, 0x8D, 
+	0x15, 0xA4, 0xDD, 0xFF, 0xFF, 0x8D, 0x0D, 0xB4, 0xDD, 0xFF, 
+	0xFF, 0x8D, 0x05, 0xB8, 0xDD, 0xFF, 0xFF, 0x8D, 0x3D, 0x88, 
+	0xDD, 0xFF, 0xFF, 0x89, 0x55, 0xDC, 0x89, 0x4D, 0xE8, 0x89, 
+	0x45, 0xE0, 0x8B, 0x04, 0x1F, 0xA8, 0x01, 0x89, 0x45, 0xEC, 
+	0x0F, 0x85, 0x7D, 0x02, 0x00, 0x00, 0x8B, 0x55, 0xF0, 0x8B, 
+	0x4D, 0xE8, 0x8B, 0x14, 0x1A, 0x8B, 0x04, 0x19, 0x89, 0x55, 
+	0xD8, 0x8B, 0x55, 0xE0, 0x89, 0x06, 0x8B, 0x04, 0x1A, 0x8B, 
+	0x54, 0x1A, 0x04, 0x89, 0x45, 0xD0, 0x8B, 0x45, 0xF0, 0x89, 
+	0x55, 0xD4, 0x8B, 0x0C, 0x18, 0x83, 0xF9, 0x01, 0x0F, 0x84, 
+	0xA0, 0x01, 0x00, 0x00, 0x31, 0xC0, 0x31, 0xD2, 0x83, 0xF9, 
+	0x02, 0x0F, 0x84, 0xCB, 0x01, 0x00, 0x00, 0x8B, 0x4D, 0xDC, 
+	0x03, 0x45, 0xD0, 0x13, 0x55, 0xD4, 0x8B, 0x0C, 0x19, 0x0F, 
+	0xAD, 0xD0, 0xD3, 0xEA, 0xF6, 0xC1, 0x20, 0x74, 0x04, 0x89, 
+	0xD0, 0x31, 0xD2, 0x8B, 0x4D, 0xEC, 0x3B, 0x0C, 0x1F, 0x75, 
+	0x93, 0x83, 0xFA, 0x00, 0x8B, 0x3E, 0x89, 0x45, 0xF0, 0x77, 
+	0x09, 0x31, 0xC9, 0x3D, 0xFF, 0xC9, 0x9A, 0x3B, 0x76, 0x1D, 
+	0x31, 0xC9, 0x8D, 0x74, 0x26, 0x00, 0x05, 0x00, 0x36, 0x65, 
+	0xC4, 0x83, 0xD2, 0xFF, 0x83, 0xC1, 0x01, 0x83, 0xFA, 0x00, 
+	0x77, 0xF0, 0x3D, 0xFF, 0xC9, 0x9A, 0x3B, 0x77, 0xE9, 0x89, 
+	0x46, 0x04, 0x8B, 0x45, 0xD8, 0x01, 0xF9, 0x89, 0x0E, 0x85, 
+	0xC0, 0x0F, 0x84, 0xDC, 0xFE, 0xFF, 0xFF, 0x31, 0xC0, 0xE9, 
+	0x17, 0xFF, 0xFF, 0xFF, 0x8D, 0x05, 0xA8, 0xDD, 0xFF, 0xFF, 
+	0x89, 0x45, 0xD8, 0x8B, 0x45, 0x08, 0x8D, 0x15, 0x8C, 0xDD, 
+	0xFF, 0xFF, 0x89, 0x55, 0xF0, 0x8D, 0x0D, 0xB0, 0xDD, 0xFF, 
+	0xFF, 0x8D, 0x15, 0xA4, 0xDD, 0xFF, 0xFF, 0x8D, 0x3D, 0x88, 
+	0xDD, 0xFF, 0xFF, 0x85, 0xC0, 0x89, 0x4D, 0xD0, 0x89, 0x55, 
+	0xDC, 0x0F, 0x85, 0xA0, 0xFE, 0xFF, 0xFF, 0x8B, 0x0C, 0x1F, 
+	0x89, 0x4D, 0xEC, 0x83, 0xE1, 0x01, 0x0F, 0x85, 0x81, 0x01, 
+	0x00, 0x00, 0x8B, 0x45, 0xF0, 0x8B, 0x55, 0xD0, 0x8B, 0x04, 
+	0x18, 0x89, 0x45, 0xE8, 0x8B, 0x04, 0x1A, 0x8B, 0x55, 0xD8, 
+	0x89, 0x06, 0x8B, 0x04, 0x1A, 0x8B, 0x54, 0x1A, 0x04, 0x89, 
+	0x45, 0xE0, 0x8B, 0x45, 0xF0, 0x89, 0x55, 0xE4, 0x8B, 0x0C, 
+	0x18, 0x83, 0xF9, 0x01, 0x0F, 0x84, 0x3C, 0x01, 0x00, 0x00, 
+	0x31, 0xC0, 0x31, 0xD2, 0x83, 0xF9, 0x02, 0x0F, 0x84, 0xEF, 
+	0x00, 0x00, 0x00, 0x8B, 0x4D, 0xDC, 0x03, 0x45, 0xE0, 0x13, 
+	0x55, 0xE4, 0x8B, 0x0C, 0x19, 0x0F, 0xAD, 0xD0, 0xD3, 0xEA, 
+	0xF6, 0xC1, 0x20, 0x74, 0x04, 0x89, 0xD0, 0x31, 0xD2, 0x8B, 
+	0x4D, 0xEC, 0x3B, 0x0C, 0x1F, 0x75, 0x92, 0x83, 0xFA, 0x00, 
+	0x8B, 0x3E, 0x89, 0x45, 0xF0, 0x77, 0x09, 0x31, 0xC9, 0x3D, 
+	0xFF, 0xC9, 0x9A, 0x3B, 0x76, 0x19, 0x31, 0xC9, 0x05, 0x00, 
+	0x36, 0x65, 0xC4, 0x83, 0xD2, 0xFF, 0x83, 0xC1, 0x01, 0x83, 
+	0xFA, 0x00, 0x77, 0xF0, 0x3D, 0xFF, 0xC9, 0x9A, 0x3B, 0x77, 
+	0xE9, 0x89, 0x46, 0x04, 0x8B, 0x45, 0xE8, 0x01, 0xF9, 0x89, 
+	0x0E, 0x85, 0xC0, 0x0F, 0x84, 0xF4, 0xFD, 0xFF, 0xFF, 0x31, 
+	0xC0, 0xE9, 0x2F, 0xFE, 0xFF, 0xFF, 0x8D, 0x15, 0xCC, 0xDD, 
+	0xFF, 0xFF, 0x8D, 0x3D, 0x88, 0xDD, 0xFF, 0xFF, 0x8D, 0x0D, 
+	0xC8, 0xDD, 0xFF, 0xFF, 0x89, 0x55, 0xF0, 0x8B, 0x04, 0x1F, 
+	0xA8, 0x01, 0x0F, 0x85, 0xAF, 0x00, 0x00, 0x00, 0x8B, 0x14, 
+	0x19, 0x89, 0x16, 0x8B, 0x55, 0xF0, 0x8B, 0x14, 0x1A, 0x89, 
+	0x56, 0x04, 0x3B, 0x04, 0x1F, 0x75, 0xE2, 0x31, 0xC0, 0xE9, 
+	0xF5, 0xFD, 0xFF, 0xFF, 0x8D, 0xB6, 0x00, 0x00, 0x00, 0x00, 
+	0xE8, 0xF3, 0xFC, 0xFF, 0xFF, 0x8B, 0x8B, 0x98, 0xDD, 0xFF, 
+	0xFF, 0x2B, 0x83, 0x90, 0xDD, 0xFF, 0xFF, 0x1B, 0x93, 0x94, 
+	0xDD, 0xFF, 0xFF, 0x21, 0xC1, 0x8B, 0x83, 0xA0, 0xDD, 0xFF, 
+	0xFF, 0x89, 0x4D, 0xCC, 0x8B, 0x8B, 0x9C, 0xDD, 0xFF, 0xFF, 
+	0x21, 0xD1, 0x0F, 0xAF, 0xC8, 0xF7, 0x65, 0xCC, 0x01, 0xCA, 
+	0xE9, 0x36, 0xFE, 0xFF, 0xFF, 0x90, 0x8B, 0x83, 0xF8, 0xED, 
+	0xFF, 0xFF, 0x31, 0xD2, 0xEB, 0xC3, 0x8D, 0xB6, 0x00, 0x00, 
+	0x00, 0x00, 0x8B, 0x83, 0xF8, 0xED, 0xFF, 0xFF, 0x31, 0xD2, 
+	0x8B, 0x8B, 0x98, 0xDD, 0xFF, 0xFF, 0x2B, 0x83, 0x90, 0xDD, 
+	0xFF, 0xFF, 0x1B, 0x93, 0x94, 0xDD, 0xFF, 0xFF, 0x21, 0xC1, 
+	0x8B, 0x83, 0xA0, 0xDD, 0xFF, 0xFF, 0x89, 0x4D, 0xCC, 0x8B, 
+	0x8B, 0x9C, 0xDD, 0xFF, 0xFF, 0x21, 0xD1, 0x0F, 0xAF, 0xC8, 
+	0xF7, 0x65, 0xCC, 0x01, 0xCA, 0xE9, 0xD7, 0xFE, 0xFF, 0xFF, 
+	0x8D, 0xB6, 0x00, 0x00, 0x00, 0x00, 0xE8, 0x6B, 0xFC, 0xFF, 
+	0xFF, 0xEB, 0xC1, 0xF3, 0x90, 0x8D, 0xB4, 0x26, 0x00, 0x00, 
+	0x00, 0x00, 0xE9, 0x38, 0xFF, 0xFF, 0xFF, 0xF3, 0x90, 0x89, 
+	0xF6, 0x8D, 0xBC, 0x27, 0x00, 0x00, 0x00, 0x00, 0xE9, 0x60, 
+	0xFE, 0xFF, 0xFF, 0xF3, 0x90, 0x89, 0xF6, 0x8D, 0xBC, 0x27, 
+	0x00, 0x00, 0x00, 0x00, 0xE9, 0x65, 0xFD, 0xFF, 0xFF, 0x8D, 
+	0x74, 0x26, 0x00, 0x8D, 0xBC, 0x27, 0x00, 0x00, 0x00, 0x00, 
+	0x55, 0x89, 0xE5, 0x57, 0x56, 0x53, 0x83, 0xEC, 0x28, 0x8B, 
+	0x7D, 0x08, 0xE8, 0xE2, 0x01, 0x00, 0x00, 0x81, 0xC3, 0x97, 
+	0xF8, 0xFF, 0xFF, 0x85, 0xFF, 0x0F, 0x84, 0xDF, 0x00, 0x00, 
+	0x00, 0x8B, 0x83, 0x88, 0xDD, 0xFF, 0xFF, 0x8D, 0x15, 0x88, 
+	0xDD, 0xFF, 0xFF, 0x89, 0x55, 0xEC, 0x8D, 0x0D, 0xB0, 0xDD, 
+	0xFF, 0xFF, 0x8D, 0x15, 0xA4, 0xDD, 0xFF, 0xFF, 0x8D, 0x35, 
+	0x8C, 0xDD, 0xFF, 0xFF, 0x89, 0x45, 0xF0, 0x8D, 0x05, 0xA8, 
+	0xDD, 0xFF, 0xFF, 0x89, 0x4D, 0xD4, 0x89, 0x45, 0xD8, 0x89, 
+	0x55, 0xDC, 0xF6, 0x45, 0xF0, 0x01, 0x0F, 0x85, 0x2B, 0x01, 
+	0x00, 0x00, 0x8B, 0x4D, 0xD4, 0x8B, 0x14, 0x1E, 0x8B, 0x04, 
+	0x19, 0x89, 0x55, 0xE8, 0x8B, 0x55, 0xD8, 0x89, 0x07, 0x8B, 
+	0x0C, 0x1E, 0x8B, 0x04, 0x1A, 0x8B, 0x54, 0x1A, 0x04, 0x83, 
+	0xF9, 0x01, 0x89, 0x45, 0xE0, 0x89, 0x55, 0xE4, 0x0F, 0x84, 
+	0xFA, 0x00, 0x00, 0x00, 0x31, 0xC0, 0x31, 0xD2, 0x83, 0xF9, 
+	0x02, 0x0F, 0x84, 0xAD, 0x00, 0x00, 0x00, 0x8B, 0x4D, 0xDC, 
+	0x03, 0x45, 0xE0, 0x13, 0x55, 0xE4, 0x8B, 0x0C, 0x19, 0x0F, 
+	0xAD, 0xD0, 0xD3, 0xEA, 0xF6, 0xC1, 0x20, 0x74, 0x04, 0x89, 
+	0xD0, 0x31, 0xD2, 0x8B, 0x4D, 0xEC, 0x8B, 0x0C, 0x19, 0x89, 
+	0x4D, 0xE0, 0x8B, 0x4D, 0xF0, 0x39, 0x4D, 0xE0, 0x0F, 0x85, 
+	0xD0, 0x00, 0x00, 0x00, 0x83, 0xFA, 0x00, 0x8B, 0x37, 0x89, 
+	0x45, 0xF0, 0x77, 0x4C, 0x31, 0xC9, 0x3D, 0xFF, 0xC9, 0x9A, 
+	0x3B, 0x77, 0x43, 0x8D, 0x76, 0x00, 0x01, 0xF1, 0x8B, 0x75, 
+	0xE8, 0x89, 0x0F, 0x89, 0xC1, 0x89, 0x47, 0x04, 0x85, 0xF6, 
+	0x0F, 0x84, 0xCC, 0x00, 0x00, 0x00, 0xBA, 0xD3, 0x4D, 0x62, 
+	0x10, 0xF7, 0xEA, 0xC1, 0xF9, 0x1F, 0xC1, 0xFA, 0x06, 0x29, 
+	0xCA, 0x89, 0x57, 0x04, 0x8B, 0x55, 0x0C, 0x85, 0xD2, 0x0F, 
+	0x85, 0x94, 0x00, 0x00, 0x00, 0x31, 0xC0, 0x83, 0xC4, 0x28, 
+	0x5B, 0x5E, 0x5F, 0x5D, 0xC3, 0x90, 0x8D, 0x74, 0x26, 0x00, 
+	0x31, 0xC9, 0x8D, 0xB6, 0x00, 0x00, 0x00, 0x00, 0x05, 0x00, 
+	0x36, 0x65, 0xC4, 0x83, 0xD2, 0xFF, 0x83, 0xC1, 0x01, 0x83, 
+	0xFA, 0x00, 0x77, 0xF0, 0x3D, 0xFF, 0xC9, 0x9A, 0x3B, 0x77, 
+	0xE9, 0xEB, 0x9F, 0x8D, 0xB4, 0x26, 0x00, 0x00, 0x00, 0x00, 
+	0x8B, 0x83, 0xF8, 0xED, 0xFF, 0xFF, 0x31, 0xD2, 0x8B, 0x8B, 
+	0x98, 0xDD, 0xFF, 0xFF, 0x2B, 0x83, 0x90, 0xDD, 0xFF, 0xFF, 
+	0x1B, 0x93, 0x94, 0xDD, 0xFF, 0xFF, 0x21, 0xC1, 0x8B, 0x83, 
+	0xA0, 0xDD, 0xFF, 0xFF, 0x89, 0x4D, 0xD0, 0x8B, 0x8B, 0x9C, 
+	0xDD, 0xFF, 0xFF, 0x21, 0xD1, 0x0F, 0xAF, 0xC8, 0xF7, 0x65, 
+	0xD0, 0x01, 0xCA, 0xE9, 0x19, 0xFF, 0xFF, 0xFF, 0x8D, 0xB6, 
+	0x00, 0x00, 0x00, 0x00, 0xE8, 0xAB, 0xFA, 0xFF, 0xFF, 0xEB, 
+	0xC1, 0xF3, 0x90, 0x8B, 0x45, 0xEC, 0x8B, 0x04, 0x18, 0x89, 
+	0x45, 0xE0, 0x8B, 0x4D, 0xE0, 0x89, 0x4D, 0xF0, 0xE9, 0xB5, 
+	0xFE, 0xFF, 0xFF, 0x8B, 0x83, 0xD0, 0xDD, 0xFF, 0xFF, 0x8B, 
+	0x4D, 0x0C, 0x89, 0x01, 0x8B, 0x83, 0xD4, 0xDD, 0xFF, 0xFF, 
+	0x89, 0x41, 0x04, 0x31, 0xC0, 0xE9, 0x53, 0xFF, 0xFF, 0xFF, 
+	0xB8, 0x4E, 0x00, 0x00, 0x00, 0x8B, 0x4D, 0x0C, 0x89, 0xDA, 
+	0x89, 0xFB, 0xE8, 0x43, 0x00, 0x00, 0x00, 0x89, 0xD3, 0xE9, 
+	0x3B, 0xFF, 0xFF, 0xFF, 0x55, 0xE8, 0x19, 0x00, 0x00, 0x00, 
+	0x81, 0xC1, 0xD2, 0xF6, 0xFF, 0xFF, 0x89, 0xE5, 0x8B, 0x55, 
+	0x08, 0x85, 0xD2, 0x8B, 0x81, 0xB0, 0xDD, 0xFF, 0xFF, 0x74, 
+	0x02, 0x89, 0x02, 0x5D, 0xC3, 0x8B, 0x0C, 0x24, 0xC3, 0x8B, 
+	0x1C, 0x24, 0xC3, 0x90, 0x58, 0xB8, 0x77, 0x00, 0x00, 0x00, 
+	0xCD, 0x80, 0x90, 0x8D, 0x76, 0x00, 0xB8, 0xAD, 0x00, 0x00, 
+	0x00, 0xCD, 0x80, 0x90, 0x51, 0x52, 0x55, 0x89, 0xE5, 0x0F, 
+	0x34, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0xCD, 0x80, 
+	0x5D, 0x5A, 0x59, 0xC3, 0x27, 0xFA, 0xFF, 0xFF, 0x14, 0x00, 
+	0x00, 0x00, 0x71, 0x00, 0x03, 0x03, 0x1E, 0xFA, 0xFF, 0xFF, 
+	0x0B, 0x00, 0x00, 0x00, 0x72, 0x00, 0x03, 0x03, 0x0F, 0xAE, 
+	0xF0, 0x0F, 0xAE, 0xE8, 0x47, 0x43, 0x43, 0x3A, 0x20, 0x28, 
+	0x55, 0x62, 0x75, 0x6E, 0x74, 0x75, 0x2F, 0x4C, 0x69, 0x6E, 
+	0x61, 0x72, 0x6F, 0x20, 0x34, 0x2E, 0x36, 0x2E, 0x33, 0x2D, 
+	0x31, 0x75, 0x62, 0x75, 0x6E, 0x74, 0x75, 0x35, 0x29, 0x20, 
+	0x34, 0x2E, 0x36, 0x2E, 0x33, 0x00, 0x00, 0x2E, 0x73, 0x68, 
+	0x73, 0x74, 0x72, 0x74, 0x61, 0x62, 0x00, 0x2E, 0x68, 0x61, 
+	0x73, 0x68, 0x00, 0x2E, 0x64, 0x79, 0x6E, 0x73, 0x79, 0x6D, 
+	0x00, 0x2E, 0x64, 0x79, 0x6E, 0x73, 0x74, 0x72, 0x00, 0x2E, 
+	0x67, 0x6E, 0x75, 0x2E, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6F, 
+	0x6E, 0x00, 0x2E, 0x67, 0x6E, 0x75, 0x2E, 0x76, 0x65, 0x72, 
+	0x73, 0x69, 0x6F, 0x6E, 0x5F, 0x64, 0x00, 0x2E, 0x64, 0x79, 
+	0x6E, 0x61, 0x6D, 0x69, 0x63, 0x00, 0x2E, 0x72, 0x6F, 0x64, 
+	0x61, 0x74, 0x61, 0x00, 0x2E, 0x6E, 0x6F, 0x74, 0x65, 0x00, 
+	0x2E, 0x65, 0x68, 0x5F, 0x66, 0x72, 0x61, 0x6D, 0x65, 0x5F, 
+	0x68, 0x64, 0x72, 0x00, 0x2E, 0x65, 0x68, 0x5F, 0x66, 0x72, 
+	0x61, 0x6D, 0x65, 0x00, 0x2E, 0x74, 0x65, 0x78, 0x74, 0x00, 
+	0x2E, 0x61, 0x6C, 0x74, 0x69, 0x6E, 0x73, 0x74, 0x72, 0x75, 
+	0x63, 0x74, 0x69, 0x6F, 0x6E, 0x73, 0x00, 0x2E, 0x61, 0x6C, 
+	0x74, 0x69, 0x6E, 0x73, 0x74, 0x72, 0x5F, 0x72, 0x65, 0x70, 
+	0x6C, 0x61, 0x63, 0x65, 0x6D, 0x65, 0x6E, 0x74, 0x00, 0x2E, 
+	0x63, 0x6F, 0x6D, 0x6D, 0x65, 0x6E, 0x74, 0x00, 0x00, 0x00, 
+	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
+	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
+	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
+	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
+	0x0B, 0x00, 0x00, 0x00, 0x05, 0x00, 0x00, 0x00, 0x02, 0x00, 
+	0x00, 0x00, 0xB4, 0x00, 0x00, 0x00, 0xB4, 0x00, 0x00, 0x00, 
+	0x38, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 
+	0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 
+	0x11, 0x00, 0x00, 0x00, 0x0B, 0x00, 0x00, 0x00, 0x02, 0x00, 
+	0x00, 0x00, 0xEC, 0x00, 0x00, 0x00, 0xEC, 0x00, 0x00, 0x00, 
+	0x90, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x01, 0x00, 
+	0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 
+	0x19, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x02, 0x00, 
+	0x00, 0x00, 0x7C, 0x01, 0x00, 0x00, 0x7C, 0x01, 0x00, 0x00, 
+	0x95, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
+	0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
+	0x21, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0x6F, 0x02, 0x00, 
+	0x00, 0x00, 0x12, 0x02, 0x00, 0x00, 0x12, 0x02, 0x00, 0x00, 
+	0x12, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 
+	0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 
+	0x2E, 0x00, 0x00, 0x00, 0xFD, 0xFF, 0xFF, 0x6F, 0x02, 0x00, 
+	0x00, 0x00, 0x24, 0x02, 0x00, 0x00, 0x24, 0x02, 0x00, 0x00, 
+	0x54, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x03, 0x00, 
+	0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
+	0x3D, 0x00, 0x00, 0x00, 0x06, 0x00, 0x00, 0x00, 0x03, 0x00, 
+	0x00, 0x00, 0x78, 0x02, 0x00, 0x00, 0x78, 0x02, 0x00, 0x00, 
+	0x80, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 
+	0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 
+	0x46, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x03, 0x00, 
+	0x00, 0x00, 0xF8, 0x02, 0x00, 0x00, 0xF8, 0x02, 0x00, 0x00, 
+	0x14, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
+	0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 
+	0x4E, 0x00, 0x00, 0x00, 0x07, 0x00, 0x00, 0x00, 0x02, 0x00, 
+	0x00, 0x00, 0x0C, 0x05, 0x00, 0x00, 0x0C, 0x05, 0x00, 0x00, 
+	0x3C, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
+	0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
+	0x54, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x02, 0x00, 
+	0x00, 0x00, 0x48, 0x05, 0x00, 0x00, 0x48, 0x05, 0x00, 0x00, 
+	0x24, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
+	0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
+	0x62, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x02, 0x00, 
+	0x00, 0x00, 0x6C, 0x05, 0x00, 0x00, 0x6C, 0x05, 0x00, 0x00, 
+	0x08, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
+	0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
+	0x6C, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x06, 0x00, 
+	0x00, 0x00, 0x80, 0x06, 0x00, 0x00, 0x80, 0x06, 0x00, 0x00, 
+	0xF0, 0x05, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
+	0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
+	0x72, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x02, 0x00, 
+	0x00, 0x00, 0x70, 0x0C, 0x00, 0x00, 0x70, 0x0C, 0x00, 0x00, 
+	0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
+	0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
+	0x83, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x06, 0x00, 
+	0x00, 0x00, 0x88, 0x0C, 0x00, 0x00, 0x88, 0x0C, 0x00, 0x00, 
+	0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
+	0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
+	0x99, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x30, 0x00, 
+	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x8E, 0x0C, 0x00, 0x00, 
+	0x2A, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
+	0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 
+	0x01, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 
+	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xB8, 0x0C, 0x00, 0x00, 
+	0xA2, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
+	0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
+};
+
+static struct page *pages[1];
+
+const struct vdso_image vdso_image_32_sysenter = {
+	.data = raw_data,
+	.size = 4096,
+	.text_mapping = {
+		.name = "[vdso]",
+		.pages = pages,
+	},
+	.alt = 3184,
+	.alt_len = 24,
+	.sym_vvar_start = -8192,
+	.sym_vvar_page = -8192,
+	.sym_hpet_page = -4096,
+	.sym_VDSO32_SYSENTER_RETURN = 3180,
+	.sym___kernel_vsyscall = 3164,
+	.sym___kernel_sigreturn = 3144,
+	.sym___kernel_rt_sigreturn = 3156,
+};
diff -uNr old/compile.sh new/compile.sh
--- old/compile.sh	1970-01-01 05:30:00.000000000 +0530
+++ new/compile.sh	2015-01-29 23:54:07.000000000 +0530
@@ -0,0 +1,5 @@
+make -j2
+make -j2 modules
+make -j2 modules_install
+make -j2 install
+#reboot
diff -uNr old/hello/hello.c new/hello/hello.c
--- old/hello/hello.c	1970-01-01 05:30:00.000000000 +0530
+++ new/hello/hello.c	2015-01-29 23:49:38.000000000 +0530
@@ -0,0 +1,11 @@
+#include<linux/kernel.h>
+
+long def_hello(void){
+	printk("Hello System call called.\n");
+	return 0;
+}
+static long (*ref_hello)(void)=&def_hello;
+EXPORT_SYMBOL(ref_hello);
+asmlinkage long sys_hello(void){
+	return (ref_hello!=&def_hello)?ref_hello():def_hello();
+}
diff -uNr old/hello/Makefile new/hello/Makefile
--- old/hello/Makefile	1970-01-01 05:30:00.000000000 +0530
+++ new/hello/Makefile	2015-01-29 23:49:38.000000000 +0530
@@ -0,0 +1 @@
+obj-y := hello.o
Binary files old/include/linux/.path.h.swp and new/include/linux/.path.h.swp differ
diff -uNr old/include/linux/syscalls.h new/include/linux/syscalls.h
--- old/include/linux/syscalls.h	2014-12-16 23:09:45.000000000 +0530
+++ new/include/linux/syscalls.h	2015-01-29 23:49:34.000000000 +0530
@@ -877,4 +877,5 @@
 asmlinkage long sys_getrandom(char __user *buf, size_t count,
 			      unsigned int flags);
 asmlinkage long sys_bpf(int cmd, union bpf_attr *attr, unsigned int size);
+asmlinkage long sys_hello(void);
 #endif
diff -uNr old/Makefile new/Makefile
--- old/Makefile	2014-12-16 23:09:45.000000000 +0530
+++ new/Makefile	2015-01-29 23:49:35.000000000 +0530
@@ -877,7 +877,7 @@
 
 
 ifeq ($(KBUILD_EXTMOD),)
-core-y		+= kernel/ mm/ fs/ ipc/ security/ crypto/ block/
+core-y		+= kernel/ mm/ fs/ ipc/ security/ crypto/ block/ hello/
 
 vmlinux-dirs	:= $(patsubst %/,%,$(filter %/, $(init-y) $(init-m) \
 		     $(core-y) $(core-m) $(drivers-y) $(drivers-m) \
diff -uNr old/mm/filemap.c new/mm/filemap.c
--- old/mm/filemap.c	2014-12-16 23:09:45.000000000 +0530
+++ new/mm/filemap.c	2015-01-29 23:51:29.000000000 +0530
@@ -1041,6 +1041,22 @@
 }
 EXPORT_SYMBOL(find_lock_entry);
 
+
+//static int temp_cnt=0;
+static void callme(struct address_space *mapping){
+/*
+	if(temp_cnt==0)
+		printk(KERN_ALERT" callme() Called\n");
+	else if(temp_cnt==200)
+		temp_cnt=0;
+	else
+		temp_cnt++;
+*/
+}
+static void (*pnt_pagehit)(struct address_space *mapping)=&callme;
+EXPORT_SYMBOL(pnt_pagehit);
+
+
 /**
  * pagecache_get_page - find and get a page reference
  * @mapping: the address_space to search
@@ -1098,8 +1114,11 @@
 		VM_BUG_ON_PAGE(page->index != offset, page);
 	}
 
-	if (page && (fgp_flags & FGP_ACCESSED))
+	if (page && (fgp_flags & FGP_ACCESSED)){
 		mark_page_accessed(page);
+		//page is found and accessed --> page-cache hit
+		pnt_pagehit(mapping);
+	}
 
 no_page:
 	if (!page && (fgp_flags & FGP_CREAT)) {
@@ -1130,11 +1149,17 @@
 				goto repeat;
 		}
 	}
-
+/*
+	if(page!=NULL && (fgp_flags==0 && cache_gfp_mask==0 && radix_gfp_mask==0))
+	{//page cache hit found.
+		pnt_pagehit(mapping);
+	}
+*/
 	return page;
 }
 EXPORT_SYMBOL(pagecache_get_page);
 
+
 /**
  * find_get_entries - gang pagecache lookup
  * @mapping:	The address_space to search
@@ -1559,7 +1584,10 @@
 		 * only mark it as accessed the first time.
 		 */
 		if (prev_index != index || offset != prev_offset)
+		{
 			mark_page_accessed(page);
+			pnt_pagehit(mapping);
+		}
 		prev_index = index;
 
 		/*
@@ -2213,6 +2241,7 @@
 	}
 out:
 	mark_page_accessed(page);
+	pnt_pagehit(mapping);
 	return page;
 }
 
diff -uNr old/mm/shmem.c new/mm/shmem.c
--- old/mm/shmem.c	2014-12-16 23:09:45.000000000 +0530
+++ new/mm/shmem.c	2015-01-29 23:51:29.000000000 +0530
@@ -1027,6 +1027,18 @@
 	return error;
 }
 
+void callme_2(struct address_space *mapping){
+/*
+        if(temp_cnt==0)
+                printk(KERN_ALERT" callme() Called\n");
+        else if(temp_cnt==200)
+                temp_cnt=0;
+        else
+                temp_cnt++;
+*/
+}
+static void (*pnt_pagehit_2)(struct address_space *mapping)=&callme_2;
+EXPORT_SYMBOL_GPL(pnt_pagehit_2);
 /*
  * shmem_getpage_gfp - find page in cache, or get from swap, or allocate
  *
@@ -1063,8 +1075,10 @@
 		goto failed;
 	}
 
-	if (page && sgp == SGP_WRITE)
+	if (page && sgp == SGP_WRITE){
 		mark_page_accessed(page);
+		pnt_pagehit_2(mapping);
+	}
 
 	/* fallocated page? */
 	if (page && !PageUptodate(page)) {
@@ -1150,8 +1164,10 @@
 		shmem_recalc_inode(inode);
 		spin_unlock(&info->lock);
 
-		if (sgp == SGP_WRITE)
+		if (sgp == SGP_WRITE){
 			mark_page_accessed(page);
+			pnt_pagehit_2(mapping);
+		}
 
 		delete_from_swap_cache(page);
 		set_page_dirty(page);
@@ -1594,8 +1610,10 @@
 			/*
 			 * Mark the page accessed if we read the beginning.
 			 */
-			if (!offset)
+			if (!offset){
 				mark_page_accessed(page);
+				pnt_pagehit_2(mapping);
+			}
 		} else {
 			page = ZERO_PAGE(0);
 			page_cache_get(page);
Binary files old/scripts/basic/fixdep and new/scripts/basic/fixdep differ
Binary files old/scripts/kconfig/conf and new/scripts/kconfig/conf differ
diff -uNr old/scripts/kconfig/zconf.hash.c new/scripts/kconfig/zconf.hash.c
--- old/scripts/kconfig/zconf.hash.c	1970-01-01 05:30:00.000000000 +0530
+++ new/scripts/kconfig/zconf.hash.c	2015-01-29 23:57:54.000000000 +0530
@@ -0,0 +1,289 @@
+/* ANSI-C code produced by gperf version 3.0.4 */
+/* Command-line: gperf -t --output-file scripts/kconfig/zconf.hash.c_shipped -a -C -E -g -k '1,3,$' -p -t scripts/kconfig/zconf.gperf  */
+
+#if !((' ' == 32) && ('!' == 33) && ('"' == 34) && ('#' == 35) \
+      && ('%' == 37) && ('&' == 38) && ('\'' == 39) && ('(' == 40) \
+      && (')' == 41) && ('*' == 42) && ('+' == 43) && (',' == 44) \
+      && ('-' == 45) && ('.' == 46) && ('/' == 47) && ('0' == 48) \
+      && ('1' == 49) && ('2' == 50) && ('3' == 51) && ('4' == 52) \
+      && ('5' == 53) && ('6' == 54) && ('7' == 55) && ('8' == 56) \
+      && ('9' == 57) && (':' == 58) && (';' == 59) && ('<' == 60) \
+      && ('=' == 61) && ('>' == 62) && ('?' == 63) && ('A' == 65) \
+      && ('B' == 66) && ('C' == 67) && ('D' == 68) && ('E' == 69) \
+      && ('F' == 70) && ('G' == 71) && ('H' == 72) && ('I' == 73) \
+      && ('J' == 74) && ('K' == 75) && ('L' == 76) && ('M' == 77) \
+      && ('N' == 78) && ('O' == 79) && ('P' == 80) && ('Q' == 81) \
+      && ('R' == 82) && ('S' == 83) && ('T' == 84) && ('U' == 85) \
+      && ('V' == 86) && ('W' == 87) && ('X' == 88) && ('Y' == 89) \
+      && ('Z' == 90) && ('[' == 91) && ('\\' == 92) && (']' == 93) \
+      && ('^' == 94) && ('_' == 95) && ('a' == 97) && ('b' == 98) \
+      && ('c' == 99) && ('d' == 100) && ('e' == 101) && ('f' == 102) \
+      && ('g' == 103) && ('h' == 104) && ('i' == 105) && ('j' == 106) \
+      && ('k' == 107) && ('l' == 108) && ('m' == 109) && ('n' == 110) \
+      && ('o' == 111) && ('p' == 112) && ('q' == 113) && ('r' == 114) \
+      && ('s' == 115) && ('t' == 116) && ('u' == 117) && ('v' == 118) \
+      && ('w' == 119) && ('x' == 120) && ('y' == 121) && ('z' == 122) \
+      && ('{' == 123) && ('|' == 124) && ('}' == 125) && ('~' == 126))
+/* The character set is not based on ISO-646.  */
+#error "gperf generated tables don't work with this execution character set. Please report a bug to <bug-gnu-gperf@gnu.org>."
+#endif
+
+#line 10 "scripts/kconfig/zconf.gperf"
+struct kconf_id;
+
+static const struct kconf_id *kconf_id_lookup(register const char *str, register unsigned int len);
+/* maximum key range = 71, duplicates = 0 */
+
+#ifdef __GNUC__
+__inline
+#else
+#ifdef __cplusplus
+inline
+#endif
+#endif
+static unsigned int
+kconf_id_hash (register const char *str, register unsigned int len)
+{
+  static const unsigned char asso_values[] =
+    {
+      73, 73, 73, 73, 73, 73, 73, 73, 73, 73,
+      73, 73, 73, 73, 73, 73, 73, 73, 73, 73,
+      73, 73, 73, 73, 73, 73, 73, 73, 73, 73,
+      73, 73, 73, 73, 73, 73, 73, 73, 73, 73,
+      73, 73, 73, 73, 73, 73, 73, 73, 73, 73,
+      73, 73, 73, 73, 73, 73, 73, 73, 73, 73,
+      73, 73, 73, 73, 73, 73, 73, 73, 73, 73,
+      73, 73, 73, 73, 73, 73, 73, 73, 73, 73,
+      73, 73, 73, 73, 73, 73, 73, 73, 73, 73,
+      73, 73, 73, 73, 73, 73, 73,  5, 25, 25,
+       0,  0,  0,  5,  0,  0, 73, 73,  5,  0,
+      10,  5, 45, 73, 20, 20,  0, 15, 15, 73,
+      20,  5, 73, 73, 73, 73, 73, 73, 73, 73,
+      73, 73, 73, 73, 73, 73, 73, 73, 73, 73,
+      73, 73, 73, 73, 73, 73, 73, 73, 73, 73,
+      73, 73, 73, 73, 73, 73, 73, 73, 73, 73,
+      73, 73, 73, 73, 73, 73, 73, 73, 73, 73,
+      73, 73, 73, 73, 73, 73, 73, 73, 73, 73,
+      73, 73, 73, 73, 73, 73, 73, 73, 73, 73,
+      73, 73, 73, 73, 73, 73, 73, 73, 73, 73,
+      73, 73, 73, 73, 73, 73, 73, 73, 73, 73,
+      73, 73, 73, 73, 73, 73, 73, 73, 73, 73,
+      73, 73, 73, 73, 73, 73, 73, 73, 73, 73,
+      73, 73, 73, 73, 73, 73, 73, 73, 73, 73,
+      73, 73, 73, 73, 73, 73, 73, 73, 73, 73,
+      73, 73, 73, 73, 73, 73
+    };
+  register int hval = len;
+
+  switch (hval)
+    {
+      default:
+        hval += asso_values[(unsigned char)str[2]];
+      /*FALLTHROUGH*/
+      case 2:
+      case 1:
+        hval += asso_values[(unsigned char)str[0]];
+        break;
+    }
+  return hval + asso_values[(unsigned char)str[len - 1]];
+}
+
+struct kconf_id_strings_t
+  {
+    char kconf_id_strings_str2[sizeof("if")];
+    char kconf_id_strings_str3[sizeof("int")];
+    char kconf_id_strings_str5[sizeof("endif")];
+    char kconf_id_strings_str7[sizeof("default")];
+    char kconf_id_strings_str8[sizeof("tristate")];
+    char kconf_id_strings_str9[sizeof("endchoice")];
+    char kconf_id_strings_str12[sizeof("def_tristate")];
+    char kconf_id_strings_str13[sizeof("def_bool")];
+    char kconf_id_strings_str14[sizeof("defconfig_list")];
+    char kconf_id_strings_str17[sizeof("on")];
+    char kconf_id_strings_str18[sizeof("optional")];
+    char kconf_id_strings_str21[sizeof("option")];
+    char kconf_id_strings_str22[sizeof("endmenu")];
+    char kconf_id_strings_str23[sizeof("mainmenu")];
+    char kconf_id_strings_str25[sizeof("menuconfig")];
+    char kconf_id_strings_str27[sizeof("modules")];
+    char kconf_id_strings_str28[sizeof("allnoconfig_y")];
+    char kconf_id_strings_str29[sizeof("menu")];
+    char kconf_id_strings_str31[sizeof("select")];
+    char kconf_id_strings_str32[sizeof("comment")];
+    char kconf_id_strings_str33[sizeof("env")];
+    char kconf_id_strings_str35[sizeof("range")];
+    char kconf_id_strings_str36[sizeof("choice")];
+    char kconf_id_strings_str39[sizeof("bool")];
+    char kconf_id_strings_str41[sizeof("source")];
+    char kconf_id_strings_str42[sizeof("visible")];
+    char kconf_id_strings_str43[sizeof("hex")];
+    char kconf_id_strings_str46[sizeof("config")];
+    char kconf_id_strings_str47[sizeof("boolean")];
+    char kconf_id_strings_str51[sizeof("string")];
+    char kconf_id_strings_str54[sizeof("help")];
+    char kconf_id_strings_str56[sizeof("prompt")];
+    char kconf_id_strings_str72[sizeof("depends")];
+  };
+static const struct kconf_id_strings_t kconf_id_strings_contents =
+  {
+    "if",
+    "int",
+    "endif",
+    "default",
+    "tristate",
+    "endchoice",
+    "def_tristate",
+    "def_bool",
+    "defconfig_list",
+    "on",
+    "optional",
+    "option",
+    "endmenu",
+    "mainmenu",
+    "menuconfig",
+    "modules",
+    "allnoconfig_y",
+    "menu",
+    "select",
+    "comment",
+    "env",
+    "range",
+    "choice",
+    "bool",
+    "source",
+    "visible",
+    "hex",
+    "config",
+    "boolean",
+    "string",
+    "help",
+    "prompt",
+    "depends"
+  };
+#define kconf_id_strings ((const char *) &kconf_id_strings_contents)
+#ifdef __GNUC__
+__inline
+#if defined __GNUC_STDC_INLINE__ || defined __GNUC_GNU_INLINE__
+__attribute__ ((__gnu_inline__))
+#endif
+#endif
+const struct kconf_id *
+kconf_id_lookup (register const char *str, register unsigned int len)
+{
+  enum
+    {
+      TOTAL_KEYWORDS = 33,
+      MIN_WORD_LENGTH = 2,
+      MAX_WORD_LENGTH = 14,
+      MIN_HASH_VALUE = 2,
+      MAX_HASH_VALUE = 72
+    };
+
+  static const struct kconf_id wordlist[] =
+    {
+      {-1}, {-1},
+#line 25 "scripts/kconfig/zconf.gperf"
+      {(int)(long)&((struct kconf_id_strings_t *)0)->kconf_id_strings_str2,		T_IF,		TF_COMMAND|TF_PARAM},
+#line 36 "scripts/kconfig/zconf.gperf"
+      {(int)(long)&((struct kconf_id_strings_t *)0)->kconf_id_strings_str3,		T_TYPE,		TF_COMMAND, S_INT},
+      {-1},
+#line 26 "scripts/kconfig/zconf.gperf"
+      {(int)(long)&((struct kconf_id_strings_t *)0)->kconf_id_strings_str5,		T_ENDIF,	TF_COMMAND},
+      {-1},
+#line 29 "scripts/kconfig/zconf.gperf"
+      {(int)(long)&((struct kconf_id_strings_t *)0)->kconf_id_strings_str7,	T_DEFAULT,	TF_COMMAND, S_UNKNOWN},
+#line 31 "scripts/kconfig/zconf.gperf"
+      {(int)(long)&((struct kconf_id_strings_t *)0)->kconf_id_strings_str8,	T_TYPE,		TF_COMMAND, S_TRISTATE},
+#line 20 "scripts/kconfig/zconf.gperf"
+      {(int)(long)&((struct kconf_id_strings_t *)0)->kconf_id_strings_str9,	T_ENDCHOICE,	TF_COMMAND},
+      {-1}, {-1},
+#line 32 "scripts/kconfig/zconf.gperf"
+      {(int)(long)&((struct kconf_id_strings_t *)0)->kconf_id_strings_str12,	T_DEFAULT,	TF_COMMAND, S_TRISTATE},
+#line 35 "scripts/kconfig/zconf.gperf"
+      {(int)(long)&((struct kconf_id_strings_t *)0)->kconf_id_strings_str13,	T_DEFAULT,	TF_COMMAND, S_BOOLEAN},
+#line 45 "scripts/kconfig/zconf.gperf"
+      {(int)(long)&((struct kconf_id_strings_t *)0)->kconf_id_strings_str14,	T_OPT_DEFCONFIG_LIST,TF_OPTION},
+      {-1}, {-1},
+#line 43 "scripts/kconfig/zconf.gperf"
+      {(int)(long)&((struct kconf_id_strings_t *)0)->kconf_id_strings_str17,		T_ON,		TF_PARAM},
+#line 28 "scripts/kconfig/zconf.gperf"
+      {(int)(long)&((struct kconf_id_strings_t *)0)->kconf_id_strings_str18,	T_OPTIONAL,	TF_COMMAND},
+      {-1}, {-1},
+#line 42 "scripts/kconfig/zconf.gperf"
+      {(int)(long)&((struct kconf_id_strings_t *)0)->kconf_id_strings_str21,		T_OPTION,	TF_COMMAND},
+#line 17 "scripts/kconfig/zconf.gperf"
+      {(int)(long)&((struct kconf_id_strings_t *)0)->kconf_id_strings_str22,	T_ENDMENU,	TF_COMMAND},
+#line 15 "scripts/kconfig/zconf.gperf"
+      {(int)(long)&((struct kconf_id_strings_t *)0)->kconf_id_strings_str23,	T_MAINMENU,	TF_COMMAND},
+      {-1},
+#line 23 "scripts/kconfig/zconf.gperf"
+      {(int)(long)&((struct kconf_id_strings_t *)0)->kconf_id_strings_str25,	T_MENUCONFIG,	TF_COMMAND},
+      {-1},
+#line 44 "scripts/kconfig/zconf.gperf"
+      {(int)(long)&((struct kconf_id_strings_t *)0)->kconf_id_strings_str27,	T_OPT_MODULES,	TF_OPTION},
+#line 47 "scripts/kconfig/zconf.gperf"
+      {(int)(long)&((struct kconf_id_strings_t *)0)->kconf_id_strings_str28,	T_OPT_ALLNOCONFIG_Y,TF_OPTION},
+#line 16 "scripts/kconfig/zconf.gperf"
+      {(int)(long)&((struct kconf_id_strings_t *)0)->kconf_id_strings_str29,		T_MENU,		TF_COMMAND},
+      {-1},
+#line 39 "scripts/kconfig/zconf.gperf"
+      {(int)(long)&((struct kconf_id_strings_t *)0)->kconf_id_strings_str31,		T_SELECT,	TF_COMMAND},
+#line 21 "scripts/kconfig/zconf.gperf"
+      {(int)(long)&((struct kconf_id_strings_t *)0)->kconf_id_strings_str32,	T_COMMENT,	TF_COMMAND},
+#line 46 "scripts/kconfig/zconf.gperf"
+      {(int)(long)&((struct kconf_id_strings_t *)0)->kconf_id_strings_str33,		T_OPT_ENV,	TF_OPTION},
+      {-1},
+#line 40 "scripts/kconfig/zconf.gperf"
+      {(int)(long)&((struct kconf_id_strings_t *)0)->kconf_id_strings_str35,		T_RANGE,	TF_COMMAND},
+#line 19 "scripts/kconfig/zconf.gperf"
+      {(int)(long)&((struct kconf_id_strings_t *)0)->kconf_id_strings_str36,		T_CHOICE,	TF_COMMAND},
+      {-1}, {-1},
+#line 33 "scripts/kconfig/zconf.gperf"
+      {(int)(long)&((struct kconf_id_strings_t *)0)->kconf_id_strings_str39,		T_TYPE,		TF_COMMAND, S_BOOLEAN},
+      {-1},
+#line 18 "scripts/kconfig/zconf.gperf"
+      {(int)(long)&((struct kconf_id_strings_t *)0)->kconf_id_strings_str41,		T_SOURCE,	TF_COMMAND},
+#line 41 "scripts/kconfig/zconf.gperf"
+      {(int)(long)&((struct kconf_id_strings_t *)0)->kconf_id_strings_str42,	T_VISIBLE,	TF_COMMAND},
+#line 37 "scripts/kconfig/zconf.gperf"
+      {(int)(long)&((struct kconf_id_strings_t *)0)->kconf_id_strings_str43,		T_TYPE,		TF_COMMAND, S_HEX},
+      {-1}, {-1},
+#line 22 "scripts/kconfig/zconf.gperf"
+      {(int)(long)&((struct kconf_id_strings_t *)0)->kconf_id_strings_str46,		T_CONFIG,	TF_COMMAND},
+#line 34 "scripts/kconfig/zconf.gperf"
+      {(int)(long)&((struct kconf_id_strings_t *)0)->kconf_id_strings_str47,	T_TYPE,		TF_COMMAND, S_BOOLEAN},
+      {-1}, {-1}, {-1},
+#line 38 "scripts/kconfig/zconf.gperf"
+      {(int)(long)&((struct kconf_id_strings_t *)0)->kconf_id_strings_str51,		T_TYPE,		TF_COMMAND, S_STRING},
+      {-1}, {-1},
+#line 24 "scripts/kconfig/zconf.gperf"
+      {(int)(long)&((struct kconf_id_strings_t *)0)->kconf_id_strings_str54,		T_HELP,		TF_COMMAND},
+      {-1},
+#line 30 "scripts/kconfig/zconf.gperf"
+      {(int)(long)&((struct kconf_id_strings_t *)0)->kconf_id_strings_str56,		T_PROMPT,	TF_COMMAND},
+      {-1}, {-1}, {-1}, {-1}, {-1}, {-1}, {-1}, {-1}, {-1},
+      {-1}, {-1}, {-1}, {-1}, {-1}, {-1},
+#line 27 "scripts/kconfig/zconf.gperf"
+      {(int)(long)&((struct kconf_id_strings_t *)0)->kconf_id_strings_str72,	T_DEPENDS,	TF_COMMAND}
+    };
+
+  if (len <= MAX_WORD_LENGTH && len >= MIN_WORD_LENGTH)
+    {
+      register int key = kconf_id_hash (str, len);
+
+      if (key <= MAX_HASH_VALUE && key >= 0)
+        {
+          register int o = wordlist[key].name;
+          if (o >= 0)
+            {
+              register const char *s = o + kconf_id_strings;
+
+              if (*str == *s && !strncmp (str + 1, s + 1, len - 1) && s[len] == '\0')
+                return &wordlist[key];
+            }
+        }
+    }
+  return 0;
+}
+#line 48 "scripts/kconfig/zconf.gperf"
+
diff -uNr old/scripts/kconfig/zconf.lex.c new/scripts/kconfig/zconf.lex.c
--- old/scripts/kconfig/zconf.lex.c	1970-01-01 05:30:00.000000000 +0530
+++ new/scripts/kconfig/zconf.lex.c	2015-01-29 23:57:54.000000000 +0530
@@ -0,0 +1,2420 @@
+
+#line 3 "scripts/kconfig/zconf.lex.c_shipped"
+
+#define  YY_INT_ALIGNED short int
+
+/* A lexical scanner generated by flex */
+
+#define yy_create_buffer zconf_create_buffer
+#define yy_delete_buffer zconf_delete_buffer
+#define yy_flex_debug zconf_flex_debug
+#define yy_init_buffer zconf_init_buffer
+#define yy_flush_buffer zconf_flush_buffer
+#define yy_load_buffer_state zconf_load_buffer_state
+#define yy_switch_to_buffer zconf_switch_to_buffer
+#define yyin zconfin
+#define yyleng zconfleng
+#define yylex zconflex
+#define yylineno zconflineno
+#define yyout zconfout
+#define yyrestart zconfrestart
+#define yytext zconftext
+#define yywrap zconfwrap
+#define yyalloc zconfalloc
+#define yyrealloc zconfrealloc
+#define yyfree zconffree
+
+#define FLEX_SCANNER
+#define YY_FLEX_MAJOR_VERSION 2
+#define YY_FLEX_MINOR_VERSION 5
+#define YY_FLEX_SUBMINOR_VERSION 35
+#if YY_FLEX_SUBMINOR_VERSION > 0
+#define FLEX_BETA
+#endif
+
+/* First, we deal with  platform-specific or compiler-specific issues. */
+
+/* begin standard C headers. */
+#include <stdio.h>
+#include <string.h>
+#include <errno.h>
+#include <stdlib.h>
+
+/* end standard C headers. */
+
+/* flex integer type definitions */
+
+#ifndef FLEXINT_H
+#define FLEXINT_H
+
+/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */
+
+#if defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L
+
+/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
+ * if you want the limit (max/min) macros for int types. 
+ */
+#ifndef __STDC_LIMIT_MACROS
+#define __STDC_LIMIT_MACROS 1
+#endif
+
+#include <inttypes.h>
+typedef int8_t flex_int8_t;
+typedef uint8_t flex_uint8_t;
+typedef int16_t flex_int16_t;
+typedef uint16_t flex_uint16_t;
+typedef int32_t flex_int32_t;
+typedef uint32_t flex_uint32_t;
+#else
+typedef signed char flex_int8_t;
+typedef short int flex_int16_t;
+typedef int flex_int32_t;
+typedef unsigned char flex_uint8_t; 
+typedef unsigned short int flex_uint16_t;
+typedef unsigned int flex_uint32_t;
+#endif /* ! C99 */
+
+/* Limits of integral types. */
+#ifndef INT8_MIN
+#define INT8_MIN               (-128)
+#endif
+#ifndef INT16_MIN
+#define INT16_MIN              (-32767-1)
+#endif
+#ifndef INT32_MIN
+#define INT32_MIN              (-2147483647-1)
+#endif
+#ifndef INT8_MAX
+#define INT8_MAX               (127)
+#endif
+#ifndef INT16_MAX
+#define INT16_MAX              (32767)
+#endif
+#ifndef INT32_MAX
+#define INT32_MAX              (2147483647)
+#endif
+#ifndef UINT8_MAX
+#define UINT8_MAX              (255U)
+#endif
+#ifndef UINT16_MAX
+#define UINT16_MAX             (65535U)
+#endif
+#ifndef UINT32_MAX
+#define UINT32_MAX             (4294967295U)
+#endif
+
+#endif /* ! FLEXINT_H */
+
+#ifdef __cplusplus
+
+/* The "const" storage-class-modifier is valid. */
+#define YY_USE_CONST
+
+#else	/* ! __cplusplus */
+
+/* C99 requires __STDC__ to be defined as 1. */
+#if defined (__STDC__)
+
+#define YY_USE_CONST
+
+#endif	/* defined (__STDC__) */
+#endif	/* ! __cplusplus */
+
+#ifdef YY_USE_CONST
+#define yyconst const
+#else
+#define yyconst
+#endif
+
+/* Returned upon end-of-file. */
+#define YY_NULL 0
+
+/* Promotes a possibly negative, possibly signed char to an unsigned
+ * integer for use as an array index.  If the signed char is negative,
+ * we want to instead treat it as an 8-bit unsigned char, hence the
+ * double cast.
+ */
+#define YY_SC_TO_UI(c) ((unsigned int) (unsigned char) c)
+
+/* Enter a start condition.  This macro really ought to take a parameter,
+ * but we do it the disgusting crufty way forced on us by the ()-less
+ * definition of BEGIN.
+ */
+#define BEGIN (yy_start) = 1 + 2 *
+
+/* Translate the current start state into a value that can be later handed
+ * to BEGIN to return to the state.  The YYSTATE alias is for lex
+ * compatibility.
+ */
+#define YY_START (((yy_start) - 1) / 2)
+#define YYSTATE YY_START
+
+/* Action number for EOF rule of a given start state. */
+#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)
+
+/* Special action meaning "start processing a new file". */
+#define YY_NEW_FILE zconfrestart(zconfin  )
+
+#define YY_END_OF_BUFFER_CHAR 0
+
+/* Size of default input buffer. */
+#ifndef YY_BUF_SIZE
+#define YY_BUF_SIZE 16384
+#endif
+
+/* The state buf must be large enough to hold one state per character in the main buffer.
+ */
+#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))
+
+#ifndef YY_TYPEDEF_YY_BUFFER_STATE
+#define YY_TYPEDEF_YY_BUFFER_STATE
+typedef struct yy_buffer_state *YY_BUFFER_STATE;
+#endif
+
+extern int zconfleng;
+
+extern FILE *zconfin, *zconfout;
+
+#define EOB_ACT_CONTINUE_SCAN 0
+#define EOB_ACT_END_OF_FILE 1
+#define EOB_ACT_LAST_MATCH 2
+
+    #define YY_LESS_LINENO(n)
+    
+/* Return all but the first "n" matched characters back to the input stream. */
+#define yyless(n) \
+	do \
+		{ \
+		/* Undo effects of setting up zconftext. */ \
+        int yyless_macro_arg = (n); \
+        YY_LESS_LINENO(yyless_macro_arg);\
+		*yy_cp = (yy_hold_char); \
+		YY_RESTORE_YY_MORE_OFFSET \
+		(yy_c_buf_p) = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
+		YY_DO_BEFORE_ACTION; /* set up zconftext again */ \
+		} \
+	while ( 0 )
+
+#define unput(c) yyunput( c, (yytext_ptr)  )
+
+#ifndef YY_TYPEDEF_YY_SIZE_T
+#define YY_TYPEDEF_YY_SIZE_T
+typedef size_t yy_size_t;
+#endif
+
+#ifndef YY_STRUCT_YY_BUFFER_STATE
+#define YY_STRUCT_YY_BUFFER_STATE
+struct yy_buffer_state
+	{
+	FILE *yy_input_file;
+
+	char *yy_ch_buf;		/* input buffer */
+	char *yy_buf_pos;		/* current position in input buffer */
+
+	/* Size of input buffer in bytes, not including room for EOB
+	 * characters.
+	 */
+	yy_size_t yy_buf_size;
+
+	/* Number of characters read into yy_ch_buf, not including EOB
+	 * characters.
+	 */
+	int yy_n_chars;
+
+	/* Whether we "own" the buffer - i.e., we know we created it,
+	 * and can realloc() it to grow it, and should free() it to
+	 * delete it.
+	 */
+	int yy_is_our_buffer;
+
+	/* Whether this is an "interactive" input source; if so, and
+	 * if we're using stdio for input, then we want to use getc()
+	 * instead of fread(), to make sure we stop fetching input after
+	 * each newline.
+	 */
+	int yy_is_interactive;
+
+	/* Whether we're considered to be at the beginning of a line.
+	 * If so, '^' rules will be active on the next match, otherwise
+	 * not.
+	 */
+	int yy_at_bol;
+
+    int yy_bs_lineno; /**< The line count. */
+    int yy_bs_column; /**< The column count. */
+    
+	/* Whether to try to fill the input buffer when we reach the
+	 * end of it.
+	 */
+	int yy_fill_buffer;
+
+	int yy_buffer_status;
+
+#define YY_BUFFER_NEW 0
+#define YY_BUFFER_NORMAL 1
+	/* When an EOF's been seen but there's still some text to process
+	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
+	 * shouldn't try reading from the input source any more.  We might
+	 * still have a bunch of tokens to match, though, because of
+	 * possible backing-up.
+	 *
+	 * When we actually see the EOF, we change the status to "new"
+	 * (via zconfrestart()), so that the user can continue scanning by
+	 * just pointing zconfin at a new input file.
+	 */
+#define YY_BUFFER_EOF_PENDING 2
+
+	};
+#endif /* !YY_STRUCT_YY_BUFFER_STATE */
+
+/* Stack of input buffers. */
+static size_t yy_buffer_stack_top = 0; /**< index of top of stack. */
+static size_t yy_buffer_stack_max = 0; /**< capacity of stack. */
+static YY_BUFFER_STATE * yy_buffer_stack = 0; /**< Stack as an array. */
+
+/* We provide macros for accessing buffer states in case in the
+ * future we want to put the buffer states in a more general
+ * "scanner state".
+ *
+ * Returns the top of the stack, or NULL.
+ */
+#define YY_CURRENT_BUFFER ( (yy_buffer_stack) \
+                          ? (yy_buffer_stack)[(yy_buffer_stack_top)] \
+                          : NULL)
+
+/* Same as previous macro, but useful when we know that the buffer stack is not
+ * NULL or when we need an lvalue. For internal use only.
+ */
+#define YY_CURRENT_BUFFER_LVALUE (yy_buffer_stack)[(yy_buffer_stack_top)]
+
+/* yy_hold_char holds the character lost when zconftext is formed. */
+static char yy_hold_char;
+static int yy_n_chars;		/* number of characters read into yy_ch_buf */
+int zconfleng;
+
+/* Points to current character in buffer. */
+static char *yy_c_buf_p = (char *) 0;
+static int yy_init = 0;		/* whether we need to initialize */
+static int yy_start = 0;	/* start state number */
+
+/* Flag which is used to allow zconfwrap()'s to do buffer switches
+ * instead of setting up a fresh zconfin.  A bit of a hack ...
+ */
+static int yy_did_buffer_switch_on_eof;
+
+void zconfrestart (FILE *input_file  );
+void zconf_switch_to_buffer (YY_BUFFER_STATE new_buffer  );
+YY_BUFFER_STATE zconf_create_buffer (FILE *file,int size  );
+void zconf_delete_buffer (YY_BUFFER_STATE b  );
+void zconf_flush_buffer (YY_BUFFER_STATE b  );
+void zconfpush_buffer_state (YY_BUFFER_STATE new_buffer  );
+void zconfpop_buffer_state (void );
+
+static void zconfensure_buffer_stack (void );
+static void zconf_load_buffer_state (void );
+static void zconf_init_buffer (YY_BUFFER_STATE b,FILE *file  );
+
+#define YY_FLUSH_BUFFER zconf_flush_buffer(YY_CURRENT_BUFFER )
+
+YY_BUFFER_STATE zconf_scan_buffer (char *base,yy_size_t size  );
+YY_BUFFER_STATE zconf_scan_string (yyconst char *yy_str  );
+YY_BUFFER_STATE zconf_scan_bytes (yyconst char *bytes,int len  );
+
+void *zconfalloc (yy_size_t  );
+void *zconfrealloc (void *,yy_size_t  );
+void zconffree (void *  );
+
+#define yy_new_buffer zconf_create_buffer
+
+#define yy_set_interactive(is_interactive) \
+	{ \
+	if ( ! YY_CURRENT_BUFFER ){ \
+        zconfensure_buffer_stack (); \
+		YY_CURRENT_BUFFER_LVALUE =    \
+            zconf_create_buffer(zconfin,YY_BUF_SIZE ); \
+	} \
+	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
+	}
+
+#define yy_set_bol(at_bol) \
+	{ \
+	if ( ! YY_CURRENT_BUFFER ){\
+        zconfensure_buffer_stack (); \
+		YY_CURRENT_BUFFER_LVALUE =    \
+            zconf_create_buffer(zconfin,YY_BUF_SIZE ); \
+	} \
+	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
+	}
+
+#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)
+
+/* Begin user sect3 */
+
+#define zconfwrap(n) 1
+#define YY_SKIP_YYWRAP
+
+typedef unsigned char YY_CHAR;
+
+FILE *zconfin = (FILE *) 0, *zconfout = (FILE *) 0;
+
+typedef int yy_state_type;
+
+extern int zconflineno;
+
+int zconflineno = 1;
+
+extern char *zconftext;
+#define yytext_ptr zconftext
+static yyconst flex_int16_t yy_nxt[][17] =
+    {
+    {
+        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
+        0,    0,    0,    0,    0,    0,    0
+    },
+
+    {
+       11,   12,   13,   14,   12,   12,   15,   12,   12,   12,
+       12,   12,   12,   12,   12,   12,   12
+    },
+
+    {
+       11,   12,   13,   14,   12,   12,   15,   12,   12,   12,
+       12,   12,   12,   12,   12,   12,   12
+    },
+
+    {
+       11,   16,   16,   17,   16,   16,   16,   16,   16,   16,
+       16,   16,   16,   18,   16,   16,   16
+    },
+
+    {
+       11,   16,   16,   17,   16,   16,   16,   16,   16,   16,
+       16,   16,   16,   18,   16,   16,   16
+
+    },
+
+    {
+       11,   19,   20,   21,   19,   19,   19,   19,   19,   19,
+       19,   19,   19,   19,   19,   19,   19
+    },
+
+    {
+       11,   19,   20,   21,   19,   19,   19,   19,   19,   19,
+       19,   19,   19,   19,   19,   19,   19
+    },
+
+    {
+       11,   22,   22,   23,   22,   24,   22,   22,   24,   22,
+       22,   22,   22,   22,   22,   25,   22
+    },
+
+    {
+       11,   22,   22,   23,   22,   24,   22,   22,   24,   22,
+       22,   22,   22,   22,   22,   25,   22
+    },
+
+    {
+       11,   26,   26,   27,   28,   29,   30,   31,   29,   32,
+       33,   34,   35,   35,   36,   37,   38
+
+    },
+
+    {
+       11,   26,   26,   27,   28,   29,   30,   31,   29,   32,
+       33,   34,   35,   35,   36,   37,   38
+    },
+
+    {
+      -11,  -11,  -11,  -11,  -11,  -11,  -11,  -11,  -11,  -11,
+      -11,  -11,  -11,  -11,  -11,  -11,  -11
+    },
+
+    {
+       11,  -12,  -12,  -12,  -12,  -12,  -12,  -12,  -12,  -12,
+      -12,  -12,  -12,  -12,  -12,  -12,  -12
+    },
+
+    {
+       11,  -13,   39,   40,  -13,  -13,   41,  -13,  -13,  -13,
+      -13,  -13,  -13,  -13,  -13,  -13,  -13
+    },
+
+    {
+       11,  -14,  -14,  -14,  -14,  -14,  -14,  -14,  -14,  -14,
+      -14,  -14,  -14,  -14,  -14,  -14,  -14
+
+    },
+
+    {
+       11,   42,   42,   43,   42,   42,   42,   42,   42,   42,
+       42,   42,   42,   42,   42,   42,   42
+    },
+
+    {
+       11,  -16,  -16,  -16,  -16,  -16,  -16,  -16,  -16,  -16,
+      -16,  -16,  -16,  -16,  -16,  -16,  -16
+    },
+
+    {
+       11,  -17,  -17,  -17,  -17,  -17,  -17,  -17,  -17,  -17,
+      -17,  -17,  -17,  -17,  -17,  -17,  -17
+    },
+
+    {
+       11,  -18,  -18,  -18,  -18,  -18,  -18,  -18,  -18,  -18,
+      -18,  -18,  -18,   44,  -18,  -18,  -18
+    },
+
+    {
+       11,   45,   45,  -19,   45,   45,   45,   45,   45,   45,
+       45,   45,   45,   45,   45,   45,   45
+
+    },
+
+    {
+       11,  -20,   46,   47,  -20,  -20,  -20,  -20,  -20,  -20,
+      -20,  -20,  -20,  -20,  -20,  -20,  -20
+    },
+
+    {
+       11,   48,  -21,  -21,   48,   48,   48,   48,   48,   48,
+       48,   48,   48,   48,   48,   48,   48
+    },
+
+    {
+       11,   49,   49,   50,   49,  -22,   49,   49,  -22,   49,
+       49,   49,   49,   49,   49,  -22,   49
+    },
+
+    {
+       11,  -23,  -23,  -23,  -23,  -23,  -23,  -23,  -23,  -23,
+      -23,  -23,  -23,  -23,  -23,  -23,  -23
+    },
+
+    {
+       11,  -24,  -24,  -24,  -24,  -24,  -24,  -24,  -24,  -24,
+      -24,  -24,  -24,  -24,  -24,  -24,  -24
+
+    },
+
+    {
+       11,   51,   51,   52,   51,   51,   51,   51,   51,   51,
+       51,   51,   51,   51,   51,   51,   51
+    },
+
+    {
+       11,  -26,  -26,  -26,  -26,  -26,  -26,  -26,  -26,  -26,
+      -26,  -26,  -26,  -26,  -26,  -26,  -26
+    },
+
+    {
+       11,  -27,  -27,  -27,  -27,  -27,  -27,  -27,  -27,  -27,
+      -27,  -27,  -27,  -27,  -27,  -27,  -27
+    },
+
+    {
+       11,  -28,  -28,  -28,  -28,  -28,  -28,  -28,  -28,  -28,
+      -28,  -28,  -28,  -28,   53,  -28,  -28
+    },
+
+    {
+       11,  -29,  -29,  -29,  -29,  -29,  -29,  -29,  -29,  -29,
+      -29,  -29,  -29,  -29,  -29,  -29,  -29
+
+    },
+
+    {
+       11,   54,   54,  -30,   54,   54,   54,   54,   54,   54,
+       54,   54,   54,   54,   54,   54,   54
+    },
+
+    {
+       11,  -31,  -31,  -31,  -31,  -31,  -31,   55,  -31,  -31,
+      -31,  -31,  -31,  -31,  -31,  -31,  -31
+    },
+
+    {
+       11,  -32,  -32,  -32,  -32,  -32,  -32,  -32,  -32,  -32,
+      -32,  -32,  -32,  -32,  -32,  -32,  -32
+    },
+
+    {
+       11,  -33,  -33,  -33,  -33,  -33,  -33,  -33,  -33,  -33,
+      -33,  -33,  -33,  -33,  -33,  -33,  -33
+    },
+
+    {
+       11,  -34,  -34,  -34,  -34,  -34,  -34,  -34,  -34,  -34,
+      -34,   56,   57,   57,  -34,  -34,  -34
+
+    },
+
+    {
+       11,  -35,  -35,  -35,  -35,  -35,  -35,  -35,  -35,  -35,
+      -35,   57,   57,   57,  -35,  -35,  -35
+    },
+
+    {
+       11,  -36,  -36,  -36,  -36,  -36,  -36,  -36,  -36,  -36,
+      -36,  -36,  -36,  -36,  -36,  -36,  -36
+    },
+
+    {
+       11,  -37,  -37,   58,  -37,  -37,  -37,  -37,  -37,  -37,
+      -37,  -37,  -37,  -37,  -37,  -37,  -37
+    },
+
+    {
+       11,  -38,  -38,  -38,  -38,  -38,  -38,  -38,  -38,  -38,
+      -38,  -38,  -38,  -38,  -38,  -38,   59
+    },
+
+    {
+       11,  -39,   39,   40,  -39,  -39,   41,  -39,  -39,  -39,
+      -39,  -39,  -39,  -39,  -39,  -39,  -39
+
+    },
+
+    {
+       11,  -40,  -40,  -40,  -40,  -40,  -40,  -40,  -40,  -40,
+      -40,  -40,  -40,  -40,  -40,  -40,  -40
+    },
+
+    {
+       11,   42,   42,   43,   42,   42,   42,   42,   42,   42,
+       42,   42,   42,   42,   42,   42,   42
+    },
+
+    {
+       11,   42,   42,   43,   42,   42,   42,   42,   42,   42,
+       42,   42,   42,   42,   42,   42,   42
+    },
+
+    {
+       11,  -43,  -43,  -43,  -43,  -43,  -43,  -43,  -43,  -43,
+      -43,  -43,  -43,  -43,  -43,  -43,  -43
+    },
+
+    {
+       11,  -44,  -44,  -44,  -44,  -44,  -44,  -44,  -44,  -44,
+      -44,  -44,  -44,   44,  -44,  -44,  -44
+
+    },
+
+    {
+       11,   45,   45,  -45,   45,   45,   45,   45,   45,   45,
+       45,   45,   45,   45,   45,   45,   45
+    },
+
+    {
+       11,  -46,   46,   47,  -46,  -46,  -46,  -46,  -46,  -46,
+      -46,  -46,  -46,  -46,  -46,  -46,  -46
+    },
+
+    {
+       11,   48,  -47,  -47,   48,   48,   48,   48,   48,   48,
+       48,   48,   48,   48,   48,   48,   48
+    },
+
+    {
+       11,  -48,  -48,  -48,  -48,  -48,  -48,  -48,  -48,  -48,
+      -48,  -48,  -48,  -48,  -48,  -48,  -48
+    },
+
+    {
+       11,   49,   49,   50,   49,  -49,   49,   49,  -49,   49,
+       49,   49,   49,   49,   49,  -49,   49
+
+    },
+
+    {
+       11,  -50,  -50,  -50,  -50,  -50,  -50,  -50,  -50,  -50,
+      -50,  -50,  -50,  -50,  -50,  -50,  -50
+    },
+
+    {
+       11,  -51,  -51,   52,  -51,  -51,  -51,  -51,  -51,  -51,
+      -51,  -51,  -51,  -51,  -51,  -51,  -51
+    },
+
+    {
+       11,  -52,  -52,  -52,  -52,  -52,  -52,  -52,  -52,  -52,
+      -52,  -52,  -52,  -52,  -52,  -52,  -52
+    },
+
+    {
+       11,  -53,  -53,  -53,  -53,  -53,  -53,  -53,  -53,  -53,
+      -53,  -53,  -53,  -53,  -53,  -53,  -53
+    },
+
+    {
+       11,   54,   54,  -54,   54,   54,   54,   54,   54,   54,
+       54,   54,   54,   54,   54,   54,   54
+
+    },
+
+    {
+       11,  -55,  -55,  -55,  -55,  -55,  -55,  -55,  -55,  -55,
+      -55,  -55,  -55,  -55,  -55,  -55,  -55
+    },
+
+    {
+       11,  -56,  -56,  -56,  -56,  -56,  -56,  -56,  -56,  -56,
+      -56,   60,   57,   57,  -56,  -56,  -56
+    },
+
+    {
+       11,  -57,  -57,  -57,  -57,  -57,  -57,  -57,  -57,  -57,
+      -57,   57,   57,   57,  -57,  -57,  -57
+    },
+
+    {
+       11,  -58,  -58,  -58,  -58,  -58,  -58,  -58,  -58,  -58,
+      -58,  -58,  -58,  -58,  -58,  -58,  -58
+    },
+
+    {
+       11,  -59,  -59,  -59,  -59,  -59,  -59,  -59,  -59,  -59,
+      -59,  -59,  -59,  -59,  -59,  -59,  -59
+
+    },
+
+    {
+       11,  -60,  -60,  -60,  -60,  -60,  -60,  -60,  -60,  -60,
+      -60,   57,   57,   57,  -60,  -60,  -60
+    },
+
+    } ;
+
+static yy_state_type yy_get_previous_state (void );
+static yy_state_type yy_try_NUL_trans (yy_state_type current_state  );
+static int yy_get_next_buffer (void );
+static void yy_fatal_error (yyconst char msg[]  );
+
+/* Done after the current pattern has been matched and before the
+ * corresponding action - sets up zconftext.
+ */
+#define YY_DO_BEFORE_ACTION \
+	(yytext_ptr) = yy_bp; \
+	zconfleng = (size_t) (yy_cp - yy_bp); \
+	(yy_hold_char) = *yy_cp; \
+	*yy_cp = '\0'; \
+	(yy_c_buf_p) = yy_cp;
+
+#define YY_NUM_RULES 33
+#define YY_END_OF_BUFFER 34
+/* This struct is not used in this scanner,
+   but its presence is necessary. */
+struct yy_trans_info
+	{
+	flex_int32_t yy_verify;
+	flex_int32_t yy_nxt;
+	};
+static yyconst flex_int16_t yy_accept[61] =
+    {   0,
+        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
+       34,    5,    4,    2,    3,    7,    8,    6,   32,   29,
+       31,   24,   28,   27,   26,   22,   17,   13,   16,   20,
+       22,   11,   12,   19,   19,   14,   22,   22,    4,    2,
+        3,    3,    1,    6,   32,   29,   31,   30,   24,   23,
+       26,   25,   15,   20,    9,   19,   19,   21,   10,   18
+    } ;
+
+static yyconst flex_int32_t yy_ec[256] =
+    {   0,
+        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
+        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
+        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
+        1,    2,    4,    5,    6,    1,    1,    7,    8,    9,
+       10,    1,    1,    1,   11,   12,   12,   13,   13,   13,
+       13,   13,   13,   13,   13,   13,   13,    1,    1,    1,
+       14,    1,    1,    1,   13,   13,   13,   13,   13,   13,
+       13,   13,   13,   13,   13,   13,   13,   13,   13,   13,
+       13,   13,   13,   13,   13,   13,   13,   13,   13,   13,
+        1,   15,    1,    1,   13,    1,   13,   13,   13,   13,
+
+       13,   13,   13,   13,   13,   13,   13,   13,   13,   13,
+       13,   13,   13,   13,   13,   13,   13,   13,   13,   13,
+       13,   13,    1,   16,    1,    1,    1,    1,    1,    1,
+        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
+        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
+        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
+        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
+        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
+        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
+        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
+
+        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
+        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
+        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
+        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
+        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
+        1,    1,    1,    1,    1
+    } ;
+
+extern int zconf_flex_debug;
+int zconf_flex_debug = 0;
+
+/* The intent behind this definition is that it'll catch
+ * any uses of REJECT which flex missed.
+ */
+#define REJECT reject_used_but_not_detected
+#define yymore() yymore_used_but_not_detected
+#define YY_MORE_ADJ 0
+#define YY_RESTORE_YY_MORE_OFFSET
+char *zconftext;
+#define YY_NO_INPUT 1
+
+/*
+ * Copyright (C) 2002 Roman Zippel <zippel@linux-m68k.org>
+ * Released under the terms of the GNU GPL v2.0.
+ */
+
+#include <limits.h>
+#include <stdio.h>
+#include <stdlib.h>
+#include <string.h>
+#include <unistd.h>
+
+#include "lkc.h"
+
+#define START_STRSIZE	16
+
+static struct {
+	struct file *file;
+	int lineno;
+} current_pos;
+
+static char *text;
+static int text_size, text_asize;
+
+struct buffer {
+	struct buffer *parent;
+	YY_BUFFER_STATE state;
+};
+
+struct buffer *current_buf;
+
+static int last_ts, first_ts;
+
+static void zconf_endhelp(void);
+static void zconf_endfile(void);
+
+static void new_string(void)
+{
+	text = xmalloc(START_STRSIZE);
+	text_asize = START_STRSIZE;
+	text_size = 0;
+	*text = 0;
+}
+
+static void append_string(const char *str, int size)
+{
+	int new_size = text_size + size + 1;
+	if (new_size > text_asize) {
+		new_size += START_STRSIZE - 1;
+		new_size &= -START_STRSIZE;
+		text = realloc(text, new_size);
+		text_asize = new_size;
+	}
+	memcpy(text + text_size, str, size);
+	text_size += size;
+	text[text_size] = 0;
+}
+
+static void alloc_string(const char *str, int size)
+{
+	text = xmalloc(size + 1);
+	memcpy(text, str, size);
+	text[size] = 0;
+}
+
+#define INITIAL 0
+#define COMMAND 1
+#define HELP 2
+#define STRING 3
+#define PARAM 4
+
+#ifndef YY_NO_UNISTD_H
+/* Special case for "unistd.h", since it is non-ANSI. We include it way
+ * down here because we want the user's section 1 to have been scanned first.
+ * The user has a chance to override it with an option.
+ */
+#include <unistd.h>
+#endif
+
+#ifndef YY_EXTRA_TYPE
+#define YY_EXTRA_TYPE void *
+#endif
+
+static int yy_init_globals (void );
+
+/* Accessor methods to globals.
+   These are made visible to non-reentrant scanners for convenience. */
+
+int zconflex_destroy (void );
+
+int zconfget_debug (void );
+
+void zconfset_debug (int debug_flag  );
+
+YY_EXTRA_TYPE zconfget_extra (void );
+
+void zconfset_extra (YY_EXTRA_TYPE user_defined  );
+
+FILE *zconfget_in (void );
+
+void zconfset_in  (FILE * in_str  );
+
+FILE *zconfget_out (void );
+
+void zconfset_out  (FILE * out_str  );
+
+int zconfget_leng (void );
+
+char *zconfget_text (void );
+
+int zconfget_lineno (void );
+
+void zconfset_lineno (int line_number  );
+
+/* Macros after this point can all be overridden by user definitions in
+ * section 1.
+ */
+
+#ifndef YY_SKIP_YYWRAP
+#ifdef __cplusplus
+extern "C" int zconfwrap (void );
+#else
+extern int zconfwrap (void );
+#endif
+#endif
+
+    static void yyunput (int c,char *buf_ptr  );
+    
+#ifndef yytext_ptr
+static void yy_flex_strncpy (char *,yyconst char *,int );
+#endif
+
+#ifdef YY_NEED_STRLEN
+static int yy_flex_strlen (yyconst char * );
+#endif
+
+#ifndef YY_NO_INPUT
+
+#ifdef __cplusplus
+static int yyinput (void );
+#else
+static int input (void );
+#endif
+
+#endif
+
+/* Amount of stuff to slurp up with each read. */
+#ifndef YY_READ_BUF_SIZE
+#define YY_READ_BUF_SIZE 8192
+#endif
+
+/* Copy whatever the last rule matched to the standard output. */
+#ifndef ECHO
+/* This used to be an fputs(), but since the string might contain NUL's,
+ * we now use fwrite().
+ */
+#define ECHO do { if (fwrite( zconftext, zconfleng, 1, zconfout )) {} } while (0)
+#endif
+
+/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
+ * is returned in "result".
+ */
+#ifndef YY_INPUT
+#define YY_INPUT(buf,result,max_size) \
+	errno=0; \
+	while ( (result = read( fileno(zconfin), (char *) buf, max_size )) < 0 ) \
+	{ \
+		if( errno != EINTR) \
+		{ \
+			YY_FATAL_ERROR( "input in flex scanner failed" ); \
+			break; \
+		} \
+		errno=0; \
+		clearerr(zconfin); \
+	}\
+\
+
+#endif
+
+/* No semi-colon after return; correct usage is to write "yyterminate();" -
+ * we don't want an extra ';' after the "return" because that will cause
+ * some compilers to complain about unreachable statements.
+ */
+#ifndef yyterminate
+#define yyterminate() return YY_NULL
+#endif
+
+/* Number of entries by which start-condition stack grows. */
+#ifndef YY_START_STACK_INCR
+#define YY_START_STACK_INCR 25
+#endif
+
+/* Report a fatal error. */
+#ifndef YY_FATAL_ERROR
+#define YY_FATAL_ERROR(msg) yy_fatal_error( msg )
+#endif
+
+/* end tables serialization structures and prototypes */
+
+/* Default declaration of generated scanner - a define so the user can
+ * easily add parameters.
+ */
+#ifndef YY_DECL
+#define YY_DECL_IS_OURS 1
+
+extern int zconflex (void);
+
+#define YY_DECL int zconflex (void)
+#endif /* !YY_DECL */
+
+/* Code executed at the beginning of each rule, after zconftext and zconfleng
+ * have been set up.
+ */
+#ifndef YY_USER_ACTION
+#define YY_USER_ACTION
+#endif
+
+/* Code executed at the end of each rule. */
+#ifndef YY_BREAK
+#define YY_BREAK break;
+#endif
+
+#define YY_RULE_SETUP \
+	YY_USER_ACTION
+
+/** The main scanner function which does all the work.
+ */
+YY_DECL
+{
+	register yy_state_type yy_current_state;
+	register char *yy_cp, *yy_bp;
+	register int yy_act;
+    
+	int str = 0;
+	int ts, i;
+
+	if ( !(yy_init) )
+		{
+		(yy_init) = 1;
+
+#ifdef YY_USER_INIT
+		YY_USER_INIT;
+#endif
+
+		if ( ! (yy_start) )
+			(yy_start) = 1;	/* first start state */
+
+		if ( ! zconfin )
+			zconfin = stdin;
+
+		if ( ! zconfout )
+			zconfout = stdout;
+
+		if ( ! YY_CURRENT_BUFFER ) {
+			zconfensure_buffer_stack ();
+			YY_CURRENT_BUFFER_LVALUE =
+				zconf_create_buffer(zconfin,YY_BUF_SIZE );
+		}
+
+		zconf_load_buffer_state( );
+		}
+
+	while ( 1 )		/* loops until end-of-file is reached */
+		{
+		yy_cp = (yy_c_buf_p);
+
+		/* Support of zconftext. */
+		*yy_cp = (yy_hold_char);
+
+		/* yy_bp points to the position in yy_ch_buf of the start of
+		 * the current run.
+		 */
+		yy_bp = yy_cp;
+
+		yy_current_state = (yy_start);
+yy_match:
+		while ( (yy_current_state = yy_nxt[yy_current_state][ yy_ec[YY_SC_TO_UI(*yy_cp)]  ]) > 0 )
+			++yy_cp;
+
+		yy_current_state = -yy_current_state;
+
+yy_find_action:
+		yy_act = yy_accept[yy_current_state];
+
+		YY_DO_BEFORE_ACTION;
+
+do_action:	/* This label is used only to access EOF actions. */
+
+		switch ( yy_act )
+	{ /* beginning of action switch */
+case 1:
+/* rule 1 can match eol */
+case 2:
+/* rule 2 can match eol */
+YY_RULE_SETUP
+{
+	current_file->lineno++;
+	return T_EOL;
+}
+	YY_BREAK
+case 3:
+YY_RULE_SETUP
+
+	YY_BREAK
+case 4:
+YY_RULE_SETUP
+{
+	BEGIN(COMMAND);
+}
+	YY_BREAK
+case 5:
+YY_RULE_SETUP
+{
+	unput(zconftext[0]);
+	BEGIN(COMMAND);
+}
+	YY_BREAK
+
+case 6:
+YY_RULE_SETUP
+{
+		const struct kconf_id *id = kconf_id_lookup(zconftext, zconfleng);
+		BEGIN(PARAM);
+		current_pos.file = current_file;
+		current_pos.lineno = current_file->lineno;
+		if (id && id->flags & TF_COMMAND) {
+			zconflval.id = id;
+			return id->token;
+		}
+		alloc_string(zconftext, zconfleng);
+		zconflval.string = text;
+		return T_WORD;
+	}
+	YY_BREAK
+case 7:
+YY_RULE_SETUP
+
+	YY_BREAK
+case 8:
+/* rule 8 can match eol */
+YY_RULE_SETUP
+{
+		BEGIN(INITIAL);
+		current_file->lineno++;
+		return T_EOL;
+	}
+	YY_BREAK
+
+case 9:
+YY_RULE_SETUP
+return T_AND;
+	YY_BREAK
+case 10:
+YY_RULE_SETUP
+return T_OR;
+	YY_BREAK
+case 11:
+YY_RULE_SETUP
+return T_OPEN_PAREN;
+	YY_BREAK
+case 12:
+YY_RULE_SETUP
+return T_CLOSE_PAREN;
+	YY_BREAK
+case 13:
+YY_RULE_SETUP
+return T_NOT;
+	YY_BREAK
+case 14:
+YY_RULE_SETUP
+return T_EQUAL;
+	YY_BREAK
+case 15:
+YY_RULE_SETUP
+return T_UNEQUAL;
+	YY_BREAK
+case 16:
+YY_RULE_SETUP
+{
+		str = zconftext[0];
+		new_string();
+		BEGIN(STRING);
+	}
+	YY_BREAK
+case 17:
+/* rule 17 can match eol */
+YY_RULE_SETUP
+BEGIN(INITIAL); current_file->lineno++; return T_EOL;
+	YY_BREAK
+case 18:
+YY_RULE_SETUP
+/* ignore */
+	YY_BREAK
+case 19:
+YY_RULE_SETUP
+{
+		const struct kconf_id *id = kconf_id_lookup(zconftext, zconfleng);
+		if (id && id->flags & TF_PARAM) {
+			zconflval.id = id;
+			return id->token;
+		}
+		alloc_string(zconftext, zconfleng);
+		zconflval.string = text;
+		return T_WORD;
+	}
+	YY_BREAK
+case 20:
+YY_RULE_SETUP
+/* comment */
+	YY_BREAK
+case 21:
+/* rule 21 can match eol */
+YY_RULE_SETUP
+current_file->lineno++;
+	YY_BREAK
+case 22:
+YY_RULE_SETUP
+
+	YY_BREAK
+case YY_STATE_EOF(PARAM):
+{
+		BEGIN(INITIAL);
+	}
+	YY_BREAK
+
+case 23:
+/* rule 23 can match eol */
+*yy_cp = (yy_hold_char); /* undo effects of setting up zconftext */
+(yy_c_buf_p) = yy_cp -= 1;
+YY_DO_BEFORE_ACTION; /* set up zconftext again */
+YY_RULE_SETUP
+{
+		append_string(zconftext, zconfleng);
+		zconflval.string = text;
+		return T_WORD_QUOTE;
+	}
+	YY_BREAK
+case 24:
+YY_RULE_SETUP
+{
+		append_string(zconftext, zconfleng);
+	}
+	YY_BREAK
+case 25:
+/* rule 25 can match eol */
+*yy_cp = (yy_hold_char); /* undo effects of setting up zconftext */
+(yy_c_buf_p) = yy_cp -= 1;
+YY_DO_BEFORE_ACTION; /* set up zconftext again */
+YY_RULE_SETUP
+{
+		append_string(zconftext + 1, zconfleng - 1);
+		zconflval.string = text;
+		return T_WORD_QUOTE;
+	}
+	YY_BREAK
+case 26:
+YY_RULE_SETUP
+{
+		append_string(zconftext + 1, zconfleng - 1);
+	}
+	YY_BREAK
+case 27:
+YY_RULE_SETUP
+{
+		if (str == zconftext[0]) {
+			BEGIN(PARAM);
+			zconflval.string = text;
+			return T_WORD_QUOTE;
+		} else
+			append_string(zconftext, 1);
+	}
+	YY_BREAK
+case 28:
+/* rule 28 can match eol */
+YY_RULE_SETUP
+{
+		printf("%s:%d:warning: multi-line strings not supported\n", zconf_curname(), zconf_lineno());
+		current_file->lineno++;
+		BEGIN(INITIAL);
+		return T_EOL;
+	}
+	YY_BREAK
+case YY_STATE_EOF(STRING):
+{
+		BEGIN(INITIAL);
+	}
+	YY_BREAK
+
+case 29:
+YY_RULE_SETUP
+{
+		ts = 0;
+		for (i = 0; i < zconfleng; i++) {
+			if (zconftext[i] == '\t')
+				ts = (ts & ~7) + 8;
+			else
+				ts++;
+		}
+		last_ts = ts;
+		if (first_ts) {
+			if (ts < first_ts) {
+				zconf_endhelp();
+				return T_HELPTEXT;
+			}
+			ts -= first_ts;
+			while (ts > 8) {
+				append_string("        ", 8);
+				ts -= 8;
+			}
+			append_string("        ", ts);
+		}
+	}
+	YY_BREAK
+case 30:
+/* rule 30 can match eol */
+*yy_cp = (yy_hold_char); /* undo effects of setting up zconftext */
+(yy_c_buf_p) = yy_cp -= 1;
+YY_DO_BEFORE_ACTION; /* set up zconftext again */
+YY_RULE_SETUP
+{
+		current_file->lineno++;
+		zconf_endhelp();
+		return T_HELPTEXT;
+	}
+	YY_BREAK
+case 31:
+/* rule 31 can match eol */
+YY_RULE_SETUP
+{
+		current_file->lineno++;
+		append_string("\n", 1);
+	}
+	YY_BREAK
+case 32:
+YY_RULE_SETUP
+{
+		while (zconfleng) {
+			if ((zconftext[zconfleng-1] != ' ') && (zconftext[zconfleng-1] != '\t'))
+				break;
+			zconfleng--;
+		}
+		append_string(zconftext, zconfleng);
+		if (!first_ts)
+			first_ts = last_ts;
+	}
+	YY_BREAK
+case YY_STATE_EOF(HELP):
+{
+		zconf_endhelp();
+		return T_HELPTEXT;
+	}
+	YY_BREAK
+
+case YY_STATE_EOF(INITIAL):
+case YY_STATE_EOF(COMMAND):
+{
+	if (current_file) {
+		zconf_endfile();
+		return T_EOL;
+	}
+	fclose(zconfin);
+	yyterminate();
+}
+	YY_BREAK
+case 33:
+YY_RULE_SETUP
+YY_FATAL_ERROR( "flex scanner jammed" );
+	YY_BREAK
+
+	case YY_END_OF_BUFFER:
+		{
+		/* Amount of text matched not including the EOB char. */
+		int yy_amount_of_matched_text = (int) (yy_cp - (yytext_ptr)) - 1;
+
+		/* Undo the effects of YY_DO_BEFORE_ACTION. */
+		*yy_cp = (yy_hold_char);
+		YY_RESTORE_YY_MORE_OFFSET
+
+		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
+			{
+			/* We're scanning a new file or input source.  It's
+			 * possible that this happened because the user
+			 * just pointed zconfin at a new source and called
+			 * zconflex().  If so, then we have to assure
+			 * consistency between YY_CURRENT_BUFFER and our
+			 * globals.  Here is the right place to do so, because
+			 * this is the first action (other than possibly a
+			 * back-up) that will match for the new input source.
+			 */
+			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
+			YY_CURRENT_BUFFER_LVALUE->yy_input_file = zconfin;
+			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
+			}
+
+		/* Note that here we test for yy_c_buf_p "<=" to the position
+		 * of the first EOB in the buffer, since yy_c_buf_p will
+		 * already have been incremented past the NUL character
+		 * (since all states make transitions on EOB to the
+		 * end-of-buffer state).  Contrast this with the test
+		 * in input().
+		 */
+		if ( (yy_c_buf_p) <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
+			{ /* This was really a NUL. */
+			yy_state_type yy_next_state;
+
+			(yy_c_buf_p) = (yytext_ptr) + yy_amount_of_matched_text;
+
+			yy_current_state = yy_get_previous_state(  );
+
+			/* Okay, we're now positioned to make the NUL
+			 * transition.  We couldn't have
+			 * yy_get_previous_state() go ahead and do it
+			 * for us because it doesn't know how to deal
+			 * with the possibility of jamming (and we don't
+			 * want to build jamming into it because then it
+			 * will run more slowly).
+			 */
+
+			yy_next_state = yy_try_NUL_trans( yy_current_state );
+
+			yy_bp = (yytext_ptr) + YY_MORE_ADJ;
+
+			if ( yy_next_state )
+				{
+				/* Consume the NUL. */
+				yy_cp = ++(yy_c_buf_p);
+				yy_current_state = yy_next_state;
+				goto yy_match;
+				}
+
+			else
+				{
+				yy_cp = (yy_c_buf_p);
+				goto yy_find_action;
+				}
+			}
+
+		else switch ( yy_get_next_buffer(  ) )
+			{
+			case EOB_ACT_END_OF_FILE:
+				{
+				(yy_did_buffer_switch_on_eof) = 0;
+
+				if ( zconfwrap( ) )
+					{
+					/* Note: because we've taken care in
+					 * yy_get_next_buffer() to have set up
+					 * zconftext, we can now set up
+					 * yy_c_buf_p so that if some total
+					 * hoser (like flex itself) wants to
+					 * call the scanner after we return the
+					 * YY_NULL, it'll still work - another
+					 * YY_NULL will get returned.
+					 */
+					(yy_c_buf_p) = (yytext_ptr) + YY_MORE_ADJ;
+
+					yy_act = YY_STATE_EOF(YY_START);
+					goto do_action;
+					}
+
+				else
+					{
+					if ( ! (yy_did_buffer_switch_on_eof) )
+						YY_NEW_FILE;
+					}
+				break;
+				}
+
+			case EOB_ACT_CONTINUE_SCAN:
+				(yy_c_buf_p) =
+					(yytext_ptr) + yy_amount_of_matched_text;
+
+				yy_current_state = yy_get_previous_state(  );
+
+				yy_cp = (yy_c_buf_p);
+				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
+				goto yy_match;
+
+			case EOB_ACT_LAST_MATCH:
+				(yy_c_buf_p) =
+				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)];
+
+				yy_current_state = yy_get_previous_state(  );
+
+				yy_cp = (yy_c_buf_p);
+				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
+				goto yy_find_action;
+			}
+		break;
+		}
+
+	default:
+		YY_FATAL_ERROR(
+			"fatal flex scanner internal error--no action found" );
+	} /* end of action switch */
+		} /* end of scanning one token */
+} /* end of zconflex */
+
+/* yy_get_next_buffer - try to read in a new buffer
+ *
+ * Returns a code representing an action:
+ *	EOB_ACT_LAST_MATCH -
+ *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
+ *	EOB_ACT_END_OF_FILE - end of file
+ */
+static int yy_get_next_buffer (void)
+{
+    	register char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
+	register char *source = (yytext_ptr);
+	register int number_to_move, i;
+	int ret_val;
+
+	if ( (yy_c_buf_p) > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] )
+		YY_FATAL_ERROR(
+		"fatal flex scanner internal error--end of buffer missed" );
+
+	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
+		{ /* Don't try to fill the buffer, so this is an EOF. */
+		if ( (yy_c_buf_p) - (yytext_ptr) - YY_MORE_ADJ == 1 )
+			{
+			/* We matched a single character, the EOB, so
+			 * treat this as a final EOF.
+			 */
+			return EOB_ACT_END_OF_FILE;
+			}
+
+		else
+			{
+			/* We matched some text prior to the EOB, first
+			 * process it.
+			 */
+			return EOB_ACT_LAST_MATCH;
+			}
+		}
+
+	/* Try to read more data. */
+
+	/* First move last chars to start of buffer. */
+	number_to_move = (int) ((yy_c_buf_p) - (yytext_ptr)) - 1;
+
+	for ( i = 0; i < number_to_move; ++i )
+		*(dest++) = *(source++);
+
+	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
+		/* don't do the read, it's not guaranteed to return an EOF,
+		 * just force an EOF
+		 */
+		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars) = 0;
+
+	else
+		{
+			int num_to_read =
+			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;
+
+		while ( num_to_read <= 0 )
+			{ /* Not enough room in the buffer - grow it. */
+
+			/* just a shorter name for the current buffer */
+			YY_BUFFER_STATE b = YY_CURRENT_BUFFER;
+
+			int yy_c_buf_p_offset =
+				(int) ((yy_c_buf_p) - b->yy_ch_buf);
+
+			if ( b->yy_is_our_buffer )
+				{
+				int new_size = b->yy_buf_size * 2;
+
+				if ( new_size <= 0 )
+					b->yy_buf_size += b->yy_buf_size / 8;
+				else
+					b->yy_buf_size *= 2;
+
+				b->yy_ch_buf = (char *)
+					/* Include room in for 2 EOB chars. */
+					zconfrealloc((void *) b->yy_ch_buf,b->yy_buf_size + 2  );
+				}
+			else
+				/* Can't grow it, we don't own it. */
+				b->yy_ch_buf = 0;
+
+			if ( ! b->yy_ch_buf )
+				YY_FATAL_ERROR(
+				"fatal error - scanner input buffer overflow" );
+
+			(yy_c_buf_p) = &b->yy_ch_buf[yy_c_buf_p_offset];
+
+			num_to_read = YY_CURRENT_BUFFER_LVALUE->yy_buf_size -
+						number_to_move - 1;
+
+			}
+
+		if ( num_to_read > YY_READ_BUF_SIZE )
+			num_to_read = YY_READ_BUF_SIZE;
+
+		/* Read in more data. */
+		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
+			(yy_n_chars), (size_t) num_to_read );
+
+		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
+		}
+
+	if ( (yy_n_chars) == 0 )
+		{
+		if ( number_to_move == YY_MORE_ADJ )
+			{
+			ret_val = EOB_ACT_END_OF_FILE;
+			zconfrestart(zconfin  );
+			}
+
+		else
+			{
+			ret_val = EOB_ACT_LAST_MATCH;
+			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
+				YY_BUFFER_EOF_PENDING;
+			}
+		}
+
+	else
+		ret_val = EOB_ACT_CONTINUE_SCAN;
+
+	if ((yy_size_t) ((yy_n_chars) + number_to_move) > YY_CURRENT_BUFFER_LVALUE->yy_buf_size) {
+		/* Extend the array by 50%, plus the number we really need. */
+		yy_size_t new_size = (yy_n_chars) + number_to_move + ((yy_n_chars) >> 1);
+		YY_CURRENT_BUFFER_LVALUE->yy_ch_buf = (char *) zconfrealloc((void *) YY_CURRENT_BUFFER_LVALUE->yy_ch_buf,new_size  );
+		if ( ! YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
+			YY_FATAL_ERROR( "out of dynamic memory in yy_get_next_buffer()" );
+	}
+
+	(yy_n_chars) += number_to_move;
+	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] = YY_END_OF_BUFFER_CHAR;
+	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] = YY_END_OF_BUFFER_CHAR;
+
+	(yytext_ptr) = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];
+
+	return ret_val;
+}
+
+/* yy_get_previous_state - get the state just before the EOB char was reached */
+
+    static yy_state_type yy_get_previous_state (void)
+{
+	register yy_state_type yy_current_state;
+	register char *yy_cp;
+    
+	yy_current_state = (yy_start);
+
+	for ( yy_cp = (yytext_ptr) + YY_MORE_ADJ; yy_cp < (yy_c_buf_p); ++yy_cp )
+		{
+		yy_current_state = yy_nxt[yy_current_state][(*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1)];
+		}
+
+	return yy_current_state;
+}
+
+/* yy_try_NUL_trans - try to make a transition on the NUL character
+ *
+ * synopsis
+ *	next_state = yy_try_NUL_trans( current_state );
+ */
+    static yy_state_type yy_try_NUL_trans  (yy_state_type yy_current_state )
+{
+	register int yy_is_jam;
+    
+	yy_current_state = yy_nxt[yy_current_state][1];
+	yy_is_jam = (yy_current_state <= 0);
+
+	return yy_is_jam ? 0 : yy_current_state;
+}
+
+    static void yyunput (int c, register char * yy_bp )
+{
+	register char *yy_cp;
+    
+    yy_cp = (yy_c_buf_p);
+
+	/* undo effects of setting up zconftext */
+	*yy_cp = (yy_hold_char);
+
+	if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
+		{ /* need to shift things up to make room */
+		/* +2 for EOB chars. */
+		register int number_to_move = (yy_n_chars) + 2;
+		register char *dest = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[
+					YY_CURRENT_BUFFER_LVALUE->yy_buf_size + 2];
+		register char *source =
+				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move];
+
+		while ( source > YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
+			*--dest = *--source;
+
+		yy_cp += (int) (dest - source);
+		yy_bp += (int) (dest - source);
+		YY_CURRENT_BUFFER_LVALUE->yy_n_chars =
+			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_buf_size;
+
+		if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
+			YY_FATAL_ERROR( "flex scanner push-back overflow" );
+		}
+
+	*--yy_cp = (char) c;
+
+	(yytext_ptr) = yy_bp;
+	(yy_hold_char) = *yy_cp;
+	(yy_c_buf_p) = yy_cp;
+}
+
+#ifndef YY_NO_INPUT
+#ifdef __cplusplus
+    static int yyinput (void)
+#else
+    static int input  (void)
+#endif
+
+{
+	int c;
+    
+	*(yy_c_buf_p) = (yy_hold_char);
+
+	if ( *(yy_c_buf_p) == YY_END_OF_BUFFER_CHAR )
+		{
+		/* yy_c_buf_p now points to the character we want to return.
+		 * If this occurs *before* the EOB characters, then it's a
+		 * valid NUL; if not, then we've hit the end of the buffer.
+		 */
+		if ( (yy_c_buf_p) < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
+			/* This was really a NUL. */
+			*(yy_c_buf_p) = '\0';
+
+		else
+			{ /* need more input */
+			int offset = (yy_c_buf_p) - (yytext_ptr);
+			++(yy_c_buf_p);
+
+			switch ( yy_get_next_buffer(  ) )
+				{
+				case EOB_ACT_LAST_MATCH:
+					/* This happens because yy_g_n_b()
+					 * sees that we've accumulated a
+					 * token and flags that we need to
+					 * try matching the token before
+					 * proceeding.  But for input(),
+					 * there's no matching to consider.
+					 * So convert the EOB_ACT_LAST_MATCH
+					 * to EOB_ACT_END_OF_FILE.
+					 */
+
+					/* Reset buffer status. */
+					zconfrestart(zconfin );
+
+					/*FALLTHROUGH*/
+
+				case EOB_ACT_END_OF_FILE:
+					{
+					if ( zconfwrap( ) )
+						return EOF;
+
+					if ( ! (yy_did_buffer_switch_on_eof) )
+						YY_NEW_FILE;
+#ifdef __cplusplus
+					return yyinput();
+#else
+					return input();
+#endif
+					}
+
+				case EOB_ACT_CONTINUE_SCAN:
+					(yy_c_buf_p) = (yytext_ptr) + offset;
+					break;
+				}
+			}
+		}
+
+	c = *(unsigned char *) (yy_c_buf_p);	/* cast for 8-bit char's */
+	*(yy_c_buf_p) = '\0';	/* preserve zconftext */
+	(yy_hold_char) = *++(yy_c_buf_p);
+
+	return c;
+}
+#endif	/* ifndef YY_NO_INPUT */
+
+/** Immediately switch to a different input stream.
+ * @param input_file A readable stream.
+ * 
+ * @note This function does not reset the start condition to @c INITIAL .
+ */
+    void zconfrestart  (FILE * input_file )
+{
+    
+	if ( ! YY_CURRENT_BUFFER ){
+        zconfensure_buffer_stack ();
+		YY_CURRENT_BUFFER_LVALUE =
+            zconf_create_buffer(zconfin,YY_BUF_SIZE );
+	}
+
+	zconf_init_buffer(YY_CURRENT_BUFFER,input_file );
+	zconf_load_buffer_state( );
+}
+
+/** Switch to a different input buffer.
+ * @param new_buffer The new input buffer.
+ * 
+ */
+    void zconf_switch_to_buffer  (YY_BUFFER_STATE  new_buffer )
+{
+    
+	/* TODO. We should be able to replace this entire function body
+	 * with
+	 *		zconfpop_buffer_state();
+	 *		zconfpush_buffer_state(new_buffer);
+     */
+	zconfensure_buffer_stack ();
+	if ( YY_CURRENT_BUFFER == new_buffer )
+		return;
+
+	if ( YY_CURRENT_BUFFER )
+		{
+		/* Flush out information for old buffer. */
+		*(yy_c_buf_p) = (yy_hold_char);
+		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
+		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
+		}
+
+	YY_CURRENT_BUFFER_LVALUE = new_buffer;
+	zconf_load_buffer_state( );
+
+	/* We don't actually know whether we did this switch during
+	 * EOF (zconfwrap()) processing, but the only time this flag
+	 * is looked at is after zconfwrap() is called, so it's safe
+	 * to go ahead and always set it.
+	 */
+	(yy_did_buffer_switch_on_eof) = 1;
+}
+
+static void zconf_load_buffer_state  (void)
+{
+    	(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
+	(yytext_ptr) = (yy_c_buf_p) = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
+	zconfin = YY_CURRENT_BUFFER_LVALUE->yy_input_file;
+	(yy_hold_char) = *(yy_c_buf_p);
+}
+
+/** Allocate and initialize an input buffer state.
+ * @param file A readable stream.
+ * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
+ * 
+ * @return the allocated buffer state.
+ */
+    YY_BUFFER_STATE zconf_create_buffer  (FILE * file, int  size )
+{
+	YY_BUFFER_STATE b;
+    
+	b = (YY_BUFFER_STATE) zconfalloc(sizeof( struct yy_buffer_state )  );
+	if ( ! b )
+		YY_FATAL_ERROR( "out of dynamic memory in zconf_create_buffer()" );
+
+	b->yy_buf_size = size;
+
+	/* yy_ch_buf has to be 2 characters longer than the size given because
+	 * we need to put in 2 end-of-buffer characters.
+	 */
+	b->yy_ch_buf = (char *) zconfalloc(b->yy_buf_size + 2  );
+	if ( ! b->yy_ch_buf )
+		YY_FATAL_ERROR( "out of dynamic memory in zconf_create_buffer()" );
+
+	b->yy_is_our_buffer = 1;
+
+	zconf_init_buffer(b,file );
+
+	return b;
+}
+
+/** Destroy the buffer.
+ * @param b a buffer created with zconf_create_buffer()
+ * 
+ */
+    void zconf_delete_buffer (YY_BUFFER_STATE  b )
+{
+    
+	if ( ! b )
+		return;
+
+	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
+		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;
+
+	if ( b->yy_is_our_buffer )
+		zconffree((void *) b->yy_ch_buf  );
+
+	zconffree((void *) b  );
+}
+
+/* Initializes or reinitializes a buffer.
+ * This function is sometimes called more than once on the same buffer,
+ * such as during a zconfrestart() or at EOF.
+ */
+    static void zconf_init_buffer  (YY_BUFFER_STATE  b, FILE * file )
+
+{
+	int oerrno = errno;
+    
+	zconf_flush_buffer(b );
+
+	b->yy_input_file = file;
+	b->yy_fill_buffer = 1;
+
+    /* If b is the current buffer, then zconf_init_buffer was _probably_
+     * called from zconfrestart() or through yy_get_next_buffer.
+     * In that case, we don't want to reset the lineno or column.
+     */
+    if (b != YY_CURRENT_BUFFER){
+        b->yy_bs_lineno = 1;
+        b->yy_bs_column = 0;
+    }
+
+        b->yy_is_interactive = 0;
+    
+	errno = oerrno;
+}
+
+/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
+ * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
+ * 
+ */
+    void zconf_flush_buffer (YY_BUFFER_STATE  b )
+{
+    	if ( ! b )
+		return;
+
+	b->yy_n_chars = 0;
+
+	/* We always need two end-of-buffer characters.  The first causes
+	 * a transition to the end-of-buffer state.  The second causes
+	 * a jam in that state.
+	 */
+	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
+	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;
+
+	b->yy_buf_pos = &b->yy_ch_buf[0];
+
+	b->yy_at_bol = 1;
+	b->yy_buffer_status = YY_BUFFER_NEW;
+
+	if ( b == YY_CURRENT_BUFFER )
+		zconf_load_buffer_state( );
+}
+
+/** Pushes the new state onto the stack. The new state becomes
+ *  the current state. This function will allocate the stack
+ *  if necessary.
+ *  @param new_buffer The new state.
+ *  
+ */
+void zconfpush_buffer_state (YY_BUFFER_STATE new_buffer )
+{
+    	if (new_buffer == NULL)
+		return;
+
+	zconfensure_buffer_stack();
+
+	/* This block is copied from zconf_switch_to_buffer. */
+	if ( YY_CURRENT_BUFFER )
+		{
+		/* Flush out information for old buffer. */
+		*(yy_c_buf_p) = (yy_hold_char);
+		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
+		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
+		}
+
+	/* Only push if top exists. Otherwise, replace top. */
+	if (YY_CURRENT_BUFFER)
+		(yy_buffer_stack_top)++;
+	YY_CURRENT_BUFFER_LVALUE = new_buffer;
+
+	/* copied from zconf_switch_to_buffer. */
+	zconf_load_buffer_state( );
+	(yy_did_buffer_switch_on_eof) = 1;
+}
+
+/** Removes and deletes the top of the stack, if present.
+ *  The next element becomes the new top.
+ *  
+ */
+void zconfpop_buffer_state (void)
+{
+    	if (!YY_CURRENT_BUFFER)
+		return;
+
+	zconf_delete_buffer(YY_CURRENT_BUFFER );
+	YY_CURRENT_BUFFER_LVALUE = NULL;
+	if ((yy_buffer_stack_top) > 0)
+		--(yy_buffer_stack_top);
+
+	if (YY_CURRENT_BUFFER) {
+		zconf_load_buffer_state( );
+		(yy_did_buffer_switch_on_eof) = 1;
+	}
+}
+
+/* Allocates the stack if it does not exist.
+ *  Guarantees space for at least one push.
+ */
+static void zconfensure_buffer_stack (void)
+{
+	int num_to_alloc;
+    
+	if (!(yy_buffer_stack)) {
+
+		/* First allocation is just for 2 elements, since we don't know if this
+		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
+		 * immediate realloc on the next call.
+         */
+		num_to_alloc = 1;
+		(yy_buffer_stack) = (struct yy_buffer_state**)zconfalloc
+								(num_to_alloc * sizeof(struct yy_buffer_state*)
+								);
+		if ( ! (yy_buffer_stack) )
+			YY_FATAL_ERROR( "out of dynamic memory in zconfensure_buffer_stack()" );
+								  
+		memset((yy_buffer_stack), 0, num_to_alloc * sizeof(struct yy_buffer_state*));
+				
+		(yy_buffer_stack_max) = num_to_alloc;
+		(yy_buffer_stack_top) = 0;
+		return;
+	}
+
+	if ((yy_buffer_stack_top) >= ((yy_buffer_stack_max)) - 1){
+
+		/* Increase the buffer to prepare for a possible push. */
+		int grow_size = 8 /* arbitrary grow size */;
+
+		num_to_alloc = (yy_buffer_stack_max) + grow_size;
+		(yy_buffer_stack) = (struct yy_buffer_state**)zconfrealloc
+								((yy_buffer_stack),
+								num_to_alloc * sizeof(struct yy_buffer_state*)
+								);
+		if ( ! (yy_buffer_stack) )
+			YY_FATAL_ERROR( "out of dynamic memory in zconfensure_buffer_stack()" );
+
+		/* zero only the new slots.*/
+		memset((yy_buffer_stack) + (yy_buffer_stack_max), 0, grow_size * sizeof(struct yy_buffer_state*));
+		(yy_buffer_stack_max) = num_to_alloc;
+	}
+}
+
+/** Setup the input buffer state to scan directly from a user-specified character buffer.
+ * @param base the character buffer
+ * @param size the size in bytes of the character buffer
+ * 
+ * @return the newly allocated buffer state object. 
+ */
+YY_BUFFER_STATE zconf_scan_buffer  (char * base, yy_size_t  size )
+{
+	YY_BUFFER_STATE b;
+    
+	if ( size < 2 ||
+	     base[size-2] != YY_END_OF_BUFFER_CHAR ||
+	     base[size-1] != YY_END_OF_BUFFER_CHAR )
+		/* They forgot to leave room for the EOB's. */
+		return 0;
+
+	b = (YY_BUFFER_STATE) zconfalloc(sizeof( struct yy_buffer_state )  );
+	if ( ! b )
+		YY_FATAL_ERROR( "out of dynamic memory in zconf_scan_buffer()" );
+
+	b->yy_buf_size = size - 2;	/* "- 2" to take care of EOB's */
+	b->yy_buf_pos = b->yy_ch_buf = base;
+	b->yy_is_our_buffer = 0;
+	b->yy_input_file = 0;
+	b->yy_n_chars = b->yy_buf_size;
+	b->yy_is_interactive = 0;
+	b->yy_at_bol = 1;
+	b->yy_fill_buffer = 0;
+	b->yy_buffer_status = YY_BUFFER_NEW;
+
+	zconf_switch_to_buffer(b  );
+
+	return b;
+}
+
+/** Setup the input buffer state to scan a string. The next call to zconflex() will
+ * scan from a @e copy of @a str.
+ * @param yystr a NUL-terminated string to scan
+ * 
+ * @return the newly allocated buffer state object.
+ * @note If you want to scan bytes that may contain NUL values, then use
+ *       zconf_scan_bytes() instead.
+ */
+YY_BUFFER_STATE zconf_scan_string (yyconst char * yystr )
+{
+    
+	return zconf_scan_bytes(yystr,strlen(yystr) );
+}
+
+/** Setup the input buffer state to scan the given bytes. The next call to zconflex() will
+ * scan from a @e copy of @a bytes.
+ * @param bytes the byte buffer to scan
+ * @param len the number of bytes in the buffer pointed to by @a bytes.
+ * 
+ * @return the newly allocated buffer state object.
+ */
+YY_BUFFER_STATE zconf_scan_bytes  (yyconst char * yybytes, int  _yybytes_len )
+{
+	YY_BUFFER_STATE b;
+	char *buf;
+	yy_size_t n;
+	int i;
+    
+	/* Get memory for full buffer, including space for trailing EOB's. */
+	n = _yybytes_len + 2;
+	buf = (char *) zconfalloc(n  );
+	if ( ! buf )
+		YY_FATAL_ERROR( "out of dynamic memory in zconf_scan_bytes()" );
+
+	for ( i = 0; i < _yybytes_len; ++i )
+		buf[i] = yybytes[i];
+
+	buf[_yybytes_len] = buf[_yybytes_len+1] = YY_END_OF_BUFFER_CHAR;
+
+	b = zconf_scan_buffer(buf,n );
+	if ( ! b )
+		YY_FATAL_ERROR( "bad buffer in zconf_scan_bytes()" );
+
+	/* It's okay to grow etc. this buffer, and we should throw it
+	 * away when we're done.
+	 */
+	b->yy_is_our_buffer = 1;
+
+	return b;
+}
+
+#ifndef YY_EXIT_FAILURE
+#define YY_EXIT_FAILURE 2
+#endif
+
+static void yy_fatal_error (yyconst char* msg )
+{
+    	(void) fprintf( stderr, "%s\n", msg );
+	exit( YY_EXIT_FAILURE );
+}
+
+/* Redefine yyless() so it works in section 3 code. */
+
+#undef yyless
+#define yyless(n) \
+	do \
+		{ \
+		/* Undo effects of setting up zconftext. */ \
+        int yyless_macro_arg = (n); \
+        YY_LESS_LINENO(yyless_macro_arg);\
+		zconftext[zconfleng] = (yy_hold_char); \
+		(yy_c_buf_p) = zconftext + yyless_macro_arg; \
+		(yy_hold_char) = *(yy_c_buf_p); \
+		*(yy_c_buf_p) = '\0'; \
+		zconfleng = yyless_macro_arg; \
+		} \
+	while ( 0 )
+
+/* Accessor  methods (get/set functions) to struct members. */
+
+/** Get the current line number.
+ * 
+ */
+int zconfget_lineno  (void)
+{
+        
+    return zconflineno;
+}
+
+/** Get the input stream.
+ * 
+ */
+FILE *zconfget_in  (void)
+{
+        return zconfin;
+}
+
+/** Get the output stream.
+ * 
+ */
+FILE *zconfget_out  (void)
+{
+        return zconfout;
+}
+
+/** Get the length of the current token.
+ * 
+ */
+int zconfget_leng  (void)
+{
+        return zconfleng;
+}
+
+/** Get the current token.
+ * 
+ */
+
+char *zconfget_text  (void)
+{
+        return zconftext;
+}
+
+/** Set the current line number.
+ * @param line_number
+ * 
+ */
+void zconfset_lineno (int  line_number )
+{
+    
+    zconflineno = line_number;
+}
+
+/** Set the input stream. This does not discard the current
+ * input buffer.
+ * @param in_str A readable stream.
+ * 
+ * @see zconf_switch_to_buffer
+ */
+void zconfset_in (FILE *  in_str )
+{
+        zconfin = in_str ;
+}
+
+void zconfset_out (FILE *  out_str )
+{
+        zconfout = out_str ;
+}
+
+int zconfget_debug  (void)
+{
+        return zconf_flex_debug;
+}
+
+void zconfset_debug (int  bdebug )
+{
+        zconf_flex_debug = bdebug ;
+}
+
+static int yy_init_globals (void)
+{
+        /* Initialization is the same as for the non-reentrant scanner.
+     * This function is called from zconflex_destroy(), so don't allocate here.
+     */
+
+    (yy_buffer_stack) = 0;
+    (yy_buffer_stack_top) = 0;
+    (yy_buffer_stack_max) = 0;
+    (yy_c_buf_p) = (char *) 0;
+    (yy_init) = 0;
+    (yy_start) = 0;
+
+/* Defined in main.c */
+#ifdef YY_STDINIT
+    zconfin = stdin;
+    zconfout = stdout;
+#else
+    zconfin = (FILE *) 0;
+    zconfout = (FILE *) 0;
+#endif
+
+    /* For future reference: Set errno on error, since we are called by
+     * zconflex_init()
+     */
+    return 0;
+}
+
+/* zconflex_destroy is for both reentrant and non-reentrant scanners. */
+int zconflex_destroy  (void)
+{
+    
+    /* Pop the buffer stack, destroying each element. */
+	while(YY_CURRENT_BUFFER){
+		zconf_delete_buffer(YY_CURRENT_BUFFER  );
+		YY_CURRENT_BUFFER_LVALUE = NULL;
+		zconfpop_buffer_state();
+	}
+
+	/* Destroy the stack itself. */
+	zconffree((yy_buffer_stack) );
+	(yy_buffer_stack) = NULL;
+
+    /* Reset the globals. This is important in a non-reentrant scanner so the next time
+     * zconflex() is called, initialization will occur. */
+    yy_init_globals( );
+
+    return 0;
+}
+
+/*
+ * Internal utility routines.
+ */
+
+#ifndef yytext_ptr
+static void yy_flex_strncpy (char* s1, yyconst char * s2, int n )
+{
+	register int i;
+	for ( i = 0; i < n; ++i )
+		s1[i] = s2[i];
+}
+#endif
+
+#ifdef YY_NEED_STRLEN
+static int yy_flex_strlen (yyconst char * s )
+{
+	register int n;
+	for ( n = 0; s[n]; ++n )
+		;
+
+	return n;
+}
+#endif
+
+void *zconfalloc (yy_size_t  size )
+{
+	return (void *) malloc( size );
+}
+
+void *zconfrealloc  (void * ptr, yy_size_t  size )
+{
+	/* The cast to (char *) in the following accommodates both
+	 * implementations that use char* generic pointers, and those
+	 * that use void* generic pointers.  It works with the latter
+	 * because both ANSI C and C++ allow castless assignment from
+	 * any pointer type to void*, and deal with argument conversions
+	 * as though doing an assignment.
+	 */
+	return (void *) realloc( (char *) ptr, size );
+}
+
+void zconffree (void * ptr )
+{
+	free( (char *) ptr );	/* see zconfrealloc() for (char *) cast */
+}
+
+#define YYTABLES_NAME "yytables"
+
+void zconf_starthelp(void)
+{
+	new_string();
+	last_ts = first_ts = 0;
+	BEGIN(HELP);
+}
+
+static void zconf_endhelp(void)
+{
+	zconflval.string = text;
+	BEGIN(INITIAL);
+}
+
+/*
+ * Try to open specified file with following names:
+ * ./name
+ * $(srctree)/name
+ * The latter is used when srctree is separate from objtree
+ * when compiling the kernel.
+ * Return NULL if file is not found.
+ */
+FILE *zconf_fopen(const char *name)
+{
+	char *env, fullname[PATH_MAX+1];
+	FILE *f;
+
+	f = fopen(name, "r");
+	if (!f && name != NULL && name[0] != '/') {
+		env = getenv(SRCTREE);
+		if (env) {
+			sprintf(fullname, "%s/%s", env, name);
+			f = fopen(fullname, "r");
+		}
+	}
+	return f;
+}
+
+void zconf_initscan(const char *name)
+{
+	zconfin = zconf_fopen(name);
+	if (!zconfin) {
+		printf("can't find file %s\n", name);
+		exit(1);
+	}
+
+	current_buf = xmalloc(sizeof(*current_buf));
+	memset(current_buf, 0, sizeof(*current_buf));
+
+	current_file = file_lookup(name);
+	current_file->lineno = 1;
+}
+
+void zconf_nextfile(const char *name)
+{
+	struct file *iter;
+	struct file *file = file_lookup(name);
+	struct buffer *buf = xmalloc(sizeof(*buf));
+	memset(buf, 0, sizeof(*buf));
+
+	current_buf->state = YY_CURRENT_BUFFER;
+	zconfin = zconf_fopen(file->name);
+	if (!zconfin) {
+		printf("%s:%d: can't open file \"%s\"\n",
+		    zconf_curname(), zconf_lineno(), file->name);
+		exit(1);
+	}
+	zconf_switch_to_buffer(zconf_create_buffer(zconfin,YY_BUF_SIZE));
+	buf->parent = current_buf;
+	current_buf = buf;
+
+	for (iter = current_file->parent; iter; iter = iter->parent ) {
+		if (!strcmp(current_file->name,iter->name) ) {
+			printf("%s:%d: recursive inclusion detected. "
+			       "Inclusion path:\n  current file : '%s'\n",
+			       zconf_curname(), zconf_lineno(),
+			       zconf_curname());
+			iter = current_file->parent;
+			while (iter && \
+			       strcmp(iter->name,current_file->name)) {
+				printf("  included from: '%s:%d'\n",
+				       iter->name, iter->lineno-1);
+				iter = iter->parent;
+			}
+			if (iter)
+				printf("  included from: '%s:%d'\n",
+				       iter->name, iter->lineno+1);
+			exit(1);
+		}
+	}
+	file->lineno = 1;
+	file->parent = current_file;
+	current_file = file;
+}
+
+static void zconf_endfile(void)
+{
+	struct buffer *parent;
+
+	current_file = current_file->parent;
+
+	parent = current_buf->parent;
+	if (parent) {
+		fclose(zconfin);
+		zconf_delete_buffer(YY_CURRENT_BUFFER);
+		zconf_switch_to_buffer(parent->state);
+	}
+	free(current_buf);
+	current_buf = parent;
+}
+
+int zconf_lineno(void)
+{
+	return current_pos.lineno;
+}
+
+const char *zconf_curname(void)
+{
+	return current_pos.file ? current_pos.file->name : "<none>";
+}
+
diff -uNr old/scripts/kconfig/zconf.tab.c new/scripts/kconfig/zconf.tab.c
--- old/scripts/kconfig/zconf.tab.c	1970-01-01 05:30:00.000000000 +0530
+++ new/scripts/kconfig/zconf.tab.c	2015-01-29 23:57:54.000000000 +0530
@@ -0,0 +1,2538 @@
+/* A Bison parser, made by GNU Bison 2.5.  */
+
+/* Bison implementation for Yacc-like parsers in C
+   
+      Copyright (C) 1984, 1989-1990, 2000-2011 Free Software Foundation, Inc.
+   
+   This program is free software: you can redistribute it and/or modify
+   it under the terms of the GNU General Public License as published by
+   the Free Software Foundation, either version 3 of the License, or
+   (at your option) any later version.
+   
+   This program is distributed in the hope that it will be useful,
+   but WITHOUT ANY WARRANTY; without even the implied warranty of
+   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+   GNU General Public License for more details.
+   
+   You should have received a copy of the GNU General Public License
+   along with this program.  If not, see <http://www.gnu.org/licenses/>.  */
+
+/* As a special exception, you may create a larger work that contains
+   part or all of the Bison parser skeleton and distribute that work
+   under terms of your choice, so long as that work isn't itself a
+   parser generator using the skeleton or a modified version thereof
+   as a parser skeleton.  Alternatively, if you modify or redistribute
+   the parser skeleton itself, you may (at your option) remove this
+   special exception, which will cause the skeleton and the resulting
+   Bison output files to be licensed under the GNU General Public
+   License without this special exception.
+   
+   This special exception was added by the Free Software Foundation in
+   version 2.2 of Bison.  */
+
+/* C LALR(1) parser skeleton written by Richard Stallman, by
+   simplifying the original so-called "semantic" parser.  */
+
+/* All symbols defined below should begin with yy or YY, to avoid
+   infringing on user name space.  This should be done even for local
+   variables, as they might otherwise be expanded by user macros.
+   There are some unavoidable exceptions within include files to
+   define necessary library symbols; they are noted "INFRINGES ON
+   USER NAME SPACE" below.  */
+
+/* Identify Bison output.  */
+#define YYBISON 1
+
+/* Bison version.  */
+#define YYBISON_VERSION "2.5"
+
+/* Skeleton name.  */
+#define YYSKELETON_NAME "yacc.c"
+
+/* Pure parsers.  */
+#define YYPURE 0
+
+/* Push parsers.  */
+#define YYPUSH 0
+
+/* Pull parsers.  */
+#define YYPULL 1
+
+/* Using locations.  */
+#define YYLSP_NEEDED 0
+
+/* Substitute the variable and function names.  */
+#define yyparse         zconfparse
+#define yylex           zconflex
+#define yyerror         zconferror
+#define yylval          zconflval
+#define yychar          zconfchar
+#define yydebug         zconfdebug
+#define yynerrs         zconfnerrs
+
+
+/* Copy the first part of user declarations.  */
+
+
+/*
+ * Copyright (C) 2002 Roman Zippel <zippel@linux-m68k.org>
+ * Released under the terms of the GNU GPL v2.0.
+ */
+
+#include <ctype.h>
+#include <stdarg.h>
+#include <stdio.h>
+#include <stdlib.h>
+#include <string.h>
+#include <stdbool.h>
+
+#include "lkc.h"
+
+#define printd(mask, fmt...) if (cdebug & (mask)) printf(fmt)
+
+#define PRINTD		0x0001
+#define DEBUG_PARSE	0x0002
+
+int cdebug = PRINTD;
+
+extern int zconflex(void);
+static void zconfprint(const char *err, ...);
+static void zconf_error(const char *err, ...);
+static void zconferror(const char *err);
+static bool zconf_endtoken(const struct kconf_id *id, int starttoken, int endtoken);
+
+struct symbol *symbol_hash[SYMBOL_HASHSIZE];
+
+static struct menu *current_menu, *current_entry;
+
+
+
+
+/* Enabling traces.  */
+#ifndef YYDEBUG
+# define YYDEBUG 1
+#endif
+
+/* Enabling verbose error messages.  */
+#ifdef YYERROR_VERBOSE
+# undef YYERROR_VERBOSE
+# define YYERROR_VERBOSE 1
+#else
+# define YYERROR_VERBOSE 0
+#endif
+
+/* Enabling the token table.  */
+#ifndef YYTOKEN_TABLE
+# define YYTOKEN_TABLE 0
+#endif
+
+
+/* Tokens.  */
+#ifndef YYTOKENTYPE
+# define YYTOKENTYPE
+   /* Put the tokens into the symbol table, so that GDB and other debuggers
+      know about them.  */
+   enum yytokentype {
+     T_MAINMENU = 258,
+     T_MENU = 259,
+     T_ENDMENU = 260,
+     T_SOURCE = 261,
+     T_CHOICE = 262,
+     T_ENDCHOICE = 263,
+     T_COMMENT = 264,
+     T_CONFIG = 265,
+     T_MENUCONFIG = 266,
+     T_HELP = 267,
+     T_HELPTEXT = 268,
+     T_IF = 269,
+     T_ENDIF = 270,
+     T_DEPENDS = 271,
+     T_OPTIONAL = 272,
+     T_PROMPT = 273,
+     T_TYPE = 274,
+     T_DEFAULT = 275,
+     T_SELECT = 276,
+     T_RANGE = 277,
+     T_VISIBLE = 278,
+     T_OPTION = 279,
+     T_ON = 280,
+     T_WORD = 281,
+     T_WORD_QUOTE = 282,
+     T_UNEQUAL = 283,
+     T_CLOSE_PAREN = 284,
+     T_OPEN_PAREN = 285,
+     T_EOL = 286,
+     T_OR = 287,
+     T_AND = 288,
+     T_EQUAL = 289,
+     T_NOT = 290
+   };
+#endif
+
+
+
+#if ! defined YYSTYPE && ! defined YYSTYPE_IS_DECLARED
+typedef union YYSTYPE
+{
+
+
+	char *string;
+	struct file *file;
+	struct symbol *symbol;
+	struct expr *expr;
+	struct menu *menu;
+	const struct kconf_id *id;
+
+
+
+} YYSTYPE;
+# define YYSTYPE_IS_TRIVIAL 1
+# define yystype YYSTYPE /* obsolescent; will be withdrawn */
+# define YYSTYPE_IS_DECLARED 1
+#endif
+
+
+/* Copy the second part of user declarations.  */
+
+
+/* Include zconf.hash.c here so it can see the token constants. */
+#include "zconf.hash.c"
+
+
+
+#ifdef short
+# undef short
+#endif
+
+#ifdef YYTYPE_UINT8
+typedef YYTYPE_UINT8 yytype_uint8;
+#else
+typedef unsigned char yytype_uint8;
+#endif
+
+#ifdef YYTYPE_INT8
+typedef YYTYPE_INT8 yytype_int8;
+#elif (defined __STDC__ || defined __C99__FUNC__ \
+     || defined __cplusplus || defined _MSC_VER)
+typedef signed char yytype_int8;
+#else
+typedef short int yytype_int8;
+#endif
+
+#ifdef YYTYPE_UINT16
+typedef YYTYPE_UINT16 yytype_uint16;
+#else
+typedef unsigned short int yytype_uint16;
+#endif
+
+#ifdef YYTYPE_INT16
+typedef YYTYPE_INT16 yytype_int16;
+#else
+typedef short int yytype_int16;
+#endif
+
+#ifndef YYSIZE_T
+# ifdef __SIZE_TYPE__
+#  define YYSIZE_T __SIZE_TYPE__
+# elif defined size_t
+#  define YYSIZE_T size_t
+# elif ! defined YYSIZE_T && (defined __STDC__ || defined __C99__FUNC__ \
+     || defined __cplusplus || defined _MSC_VER)
+#  include <stddef.h> /* INFRINGES ON USER NAME SPACE */
+#  define YYSIZE_T size_t
+# else
+#  define YYSIZE_T unsigned int
+# endif
+#endif
+
+#define YYSIZE_MAXIMUM ((YYSIZE_T) -1)
+
+#ifndef YY_
+# if defined YYENABLE_NLS && YYENABLE_NLS
+#  if ENABLE_NLS
+#   include <libintl.h> /* INFRINGES ON USER NAME SPACE */
+#   define YY_(msgid) dgettext ("bison-runtime", msgid)
+#  endif
+# endif
+# ifndef YY_
+#  define YY_(msgid) msgid
+# endif
+#endif
+
+/* Suppress unused-variable warnings by "using" E.  */
+#if ! defined lint || defined __GNUC__
+# define YYUSE(e) ((void) (e))
+#else
+# define YYUSE(e) /* empty */
+#endif
+
+/* Identity function, used to suppress warnings about constant conditions.  */
+#ifndef lint
+# define YYID(n) (n)
+#else
+#if (defined __STDC__ || defined __C99__FUNC__ \
+     || defined __cplusplus || defined _MSC_VER)
+static int
+YYID (int yyi)
+#else
+static int
+YYID (yyi)
+    int yyi;
+#endif
+{
+  return yyi;
+}
+#endif
+
+#if ! defined yyoverflow || YYERROR_VERBOSE
+
+/* The parser invokes alloca or malloc; define the necessary symbols.  */
+
+# ifdef YYSTACK_USE_ALLOCA
+#  if YYSTACK_USE_ALLOCA
+#   ifdef __GNUC__
+#    define YYSTACK_ALLOC __builtin_alloca
+#   elif defined __BUILTIN_VA_ARG_INCR
+#    include <alloca.h> /* INFRINGES ON USER NAME SPACE */
+#   elif defined _AIX
+#    define YYSTACK_ALLOC __alloca
+#   elif defined _MSC_VER
+#    include <malloc.h> /* INFRINGES ON USER NAME SPACE */
+#    define alloca _alloca
+#   else
+#    define YYSTACK_ALLOC alloca
+#    if ! defined _ALLOCA_H && ! defined EXIT_SUCCESS && (defined __STDC__ || defined __C99__FUNC__ \
+     || defined __cplusplus || defined _MSC_VER)
+#     include <stdlib.h> /* INFRINGES ON USER NAME SPACE */
+#     ifndef EXIT_SUCCESS
+#      define EXIT_SUCCESS 0
+#     endif
+#    endif
+#   endif
+#  endif
+# endif
+
+# ifdef YYSTACK_ALLOC
+   /* Pacify GCC's `empty if-body' warning.  */
+#  define YYSTACK_FREE(Ptr) do { /* empty */; } while (YYID (0))
+#  ifndef YYSTACK_ALLOC_MAXIMUM
+    /* The OS might guarantee only one guard page at the bottom of the stack,
+       and a page size can be as small as 4096 bytes.  So we cannot safely
+       invoke alloca (N) if N exceeds 4096.  Use a slightly smaller number
+       to allow for a few compiler-allocated temporary stack slots.  */
+#   define YYSTACK_ALLOC_MAXIMUM 4032 /* reasonable circa 2006 */
+#  endif
+# else
+#  define YYSTACK_ALLOC YYMALLOC
+#  define YYSTACK_FREE YYFREE
+#  ifndef YYSTACK_ALLOC_MAXIMUM
+#   define YYSTACK_ALLOC_MAXIMUM YYSIZE_MAXIMUM
+#  endif
+#  if (defined __cplusplus && ! defined EXIT_SUCCESS \
+       && ! ((defined YYMALLOC || defined malloc) \
+	     && (defined YYFREE || defined free)))
+#   include <stdlib.h> /* INFRINGES ON USER NAME SPACE */
+#   ifndef EXIT_SUCCESS
+#    define EXIT_SUCCESS 0
+#   endif
+#  endif
+#  ifndef YYMALLOC
+#   define YYMALLOC malloc
+#   if ! defined malloc && ! defined EXIT_SUCCESS && (defined __STDC__ || defined __C99__FUNC__ \
+     || defined __cplusplus || defined _MSC_VER)
+void *malloc (YYSIZE_T); /* INFRINGES ON USER NAME SPACE */
+#   endif
+#  endif
+#  ifndef YYFREE
+#   define YYFREE free
+#   if ! defined free && ! defined EXIT_SUCCESS && (defined __STDC__ || defined __C99__FUNC__ \
+     || defined __cplusplus || defined _MSC_VER)
+void free (void *); /* INFRINGES ON USER NAME SPACE */
+#   endif
+#  endif
+# endif
+#endif /* ! defined yyoverflow || YYERROR_VERBOSE */
+
+
+#if (! defined yyoverflow \
+     && (! defined __cplusplus \
+	 || (defined YYSTYPE_IS_TRIVIAL && YYSTYPE_IS_TRIVIAL)))
+
+/* A type that is properly aligned for any stack member.  */
+union yyalloc
+{
+  yytype_int16 yyss_alloc;
+  YYSTYPE yyvs_alloc;
+};
+
+/* The size of the maximum gap between one aligned stack and the next.  */
+# define YYSTACK_GAP_MAXIMUM (sizeof (union yyalloc) - 1)
+
+/* The size of an array large to enough to hold all stacks, each with
+   N elements.  */
+# define YYSTACK_BYTES(N) \
+     ((N) * (sizeof (yytype_int16) + sizeof (YYSTYPE)) \
+      + YYSTACK_GAP_MAXIMUM)
+
+# define YYCOPY_NEEDED 1
+
+/* Relocate STACK from its old location to the new one.  The
+   local variables YYSIZE and YYSTACKSIZE give the old and new number of
+   elements in the stack, and YYPTR gives the new location of the
+   stack.  Advance YYPTR to a properly aligned location for the next
+   stack.  */
+# define YYSTACK_RELOCATE(Stack_alloc, Stack)				\
+    do									\
+      {									\
+	YYSIZE_T yynewbytes;						\
+	YYCOPY (&yyptr->Stack_alloc, Stack, yysize);			\
+	Stack = &yyptr->Stack_alloc;					\
+	yynewbytes = yystacksize * sizeof (*Stack) + YYSTACK_GAP_MAXIMUM; \
+	yyptr += yynewbytes / sizeof (*yyptr);				\
+      }									\
+    while (YYID (0))
+
+#endif
+
+#if defined YYCOPY_NEEDED && YYCOPY_NEEDED
+/* Copy COUNT objects from FROM to TO.  The source and destination do
+   not overlap.  */
+# ifndef YYCOPY
+#  if defined __GNUC__ && 1 < __GNUC__
+#   define YYCOPY(To, From, Count) \
+      __builtin_memcpy (To, From, (Count) * sizeof (*(From)))
+#  else
+#   define YYCOPY(To, From, Count)		\
+      do					\
+	{					\
+	  YYSIZE_T yyi;				\
+	  for (yyi = 0; yyi < (Count); yyi++)	\
+	    (To)[yyi] = (From)[yyi];		\
+	}					\
+      while (YYID (0))
+#  endif
+# endif
+#endif /* !YYCOPY_NEEDED */
+
+/* YYFINAL -- State number of the termination state.  */
+#define YYFINAL  11
+/* YYLAST -- Last index in YYTABLE.  */
+#define YYLAST   290
+
+/* YYNTOKENS -- Number of terminals.  */
+#define YYNTOKENS  36
+/* YYNNTS -- Number of nonterminals.  */
+#define YYNNTS  50
+/* YYNRULES -- Number of rules.  */
+#define YYNRULES  118
+/* YYNRULES -- Number of states.  */
+#define YYNSTATES  191
+
+/* YYTRANSLATE(YYLEX) -- Bison symbol number corresponding to YYLEX.  */
+#define YYUNDEFTOK  2
+#define YYMAXUTOK   290
+
+#define YYTRANSLATE(YYX)						\
+  ((unsigned int) (YYX) <= YYMAXUTOK ? yytranslate[YYX] : YYUNDEFTOK)
+
+/* YYTRANSLATE[YYLEX] -- Bison symbol number corresponding to YYLEX.  */
+static const yytype_uint8 yytranslate[] =
+{
+       0,     2,     2,     2,     2,     2,     2,     2,     2,     2,
+       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
+       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
+       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
+       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
+       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
+       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
+       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
+       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
+       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
+       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
+       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
+       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
+       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
+       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
+       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
+       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
+       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
+       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
+       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
+       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
+       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
+       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
+       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
+       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
+       2,     2,     2,     2,     2,     2,     1,     2,     3,     4,
+       5,     6,     7,     8,     9,    10,    11,    12,    13,    14,
+      15,    16,    17,    18,    19,    20,    21,    22,    23,    24,
+      25,    26,    27,    28,    29,    30,    31,    32,    33,    34,
+      35
+};
+
+#if YYDEBUG
+/* YYPRHS[YYN] -- Index of the first RHS symbol of rule number YYN in
+   YYRHS.  */
+static const yytype_uint16 yyprhs[] =
+{
+       0,     0,     3,     6,     8,    11,    13,    14,    17,    20,
+      23,    26,    31,    36,    40,    42,    44,    46,    48,    50,
+      52,    54,    56,    58,    60,    62,    64,    66,    68,    72,
+      75,    79,    82,    86,    89,    90,    93,    96,    99,   102,
+     105,   108,   112,   117,   122,   127,   133,   137,   138,   142,
+     143,   146,   150,   153,   155,   159,   160,   163,   166,   169,
+     172,   175,   180,   184,   187,   192,   193,   196,   200,   202,
+     206,   207,   210,   213,   216,   220,   224,   228,   230,   234,
+     235,   238,   241,   244,   248,   252,   255,   258,   261,   262,
+     265,   268,   271,   276,   277,   280,   283,   286,   287,   290,
+     292,   294,   297,   300,   303,   305,   308,   309,   312,   314,
+     318,   322,   326,   329,   333,   337,   339,   341,   342
+};
+
+/* YYRHS -- A `-1'-separated list of the rules' RHS.  */
+static const yytype_int8 yyrhs[] =
+{
+      37,     0,    -1,    81,    38,    -1,    38,    -1,    63,    39,
+      -1,    39,    -1,    -1,    39,    41,    -1,    39,    55,    -1,
+      39,    67,    -1,    39,    80,    -1,    39,    26,     1,    31,
+      -1,    39,    40,     1,    31,    -1,    39,     1,    31,    -1,
+      16,    -1,    18,    -1,    19,    -1,    21,    -1,    17,    -1,
+      22,    -1,    20,    -1,    23,    -1,    31,    -1,    61,    -1,
+      71,    -1,    44,    -1,    46,    -1,    69,    -1,    26,     1,
+      31,    -1,     1,    31,    -1,    10,    26,    31,    -1,    43,
+      47,    -1,    11,    26,    31,    -1,    45,    47,    -1,    -1,
+      47,    48,    -1,    47,    49,    -1,    47,    75,    -1,    47,
+      73,    -1,    47,    42,    -1,    47,    31,    -1,    19,    78,
+      31,    -1,    18,    79,    82,    31,    -1,    20,    83,    82,
+      31,    -1,    21,    26,    82,    31,    -1,    22,    84,    84,
+      82,    31,    -1,    24,    50,    31,    -1,    -1,    50,    26,
+      51,    -1,    -1,    34,    79,    -1,     7,    85,    31,    -1,
+      52,    56,    -1,    80,    -1,    53,    58,    54,    -1,    -1,
+      56,    57,    -1,    56,    75,    -1,    56,    73,    -1,    56,
+      31,    -1,    56,    42,    -1,    18,    79,    82,    31,    -1,
+      19,    78,    31,    -1,    17,    31,    -1,    20,    26,    82,
+      31,    -1,    -1,    58,    41,    -1,    14,    83,    81,    -1,
+      80,    -1,    59,    62,    60,    -1,    -1,    62,    41,    -1,
+      62,    67,    -1,    62,    55,    -1,     3,    79,    81,    -1,
+       4,    79,    31,    -1,    64,    76,    74,    -1,    80,    -1,
+      65,    68,    66,    -1,    -1,    68,    41,    -1,    68,    67,
+      -1,    68,    55,    -1,     6,    79,    31,    -1,     9,    79,
+      31,    -1,    70,    74,    -1,    12,    31,    -1,    72,    13,
+      -1,    -1,    74,    75,    -1,    74,    31,    -1,    74,    42,
+      -1,    16,    25,    83,    31,    -1,    -1,    76,    77,    -1,
+      76,    31,    -1,    23,    82,    -1,    -1,    79,    82,    -1,
+      26,    -1,    27,    -1,     5,    31,    -1,     8,    31,    -1,
+      15,    31,    -1,    31,    -1,    81,    31,    -1,    -1,    14,
+      83,    -1,    84,    -1,    84,    34,    84,    -1,    84,    28,
+      84,    -1,    30,    83,    29,    -1,    35,    83,    -1,    83,
+      32,    83,    -1,    83,    33,    83,    -1,    26,    -1,    27,
+      -1,    -1,    26,    -1
+};
+
+/* YYRLINE[YYN] -- source line where rule number YYN was defined.  */
+static const yytype_uint16 yyrline[] =
+{
+       0,   103,   103,   103,   105,   105,   107,   109,   110,   111,
+     112,   113,   114,   118,   122,   122,   122,   122,   122,   122,
+     122,   122,   126,   127,   128,   129,   130,   131,   135,   136,
+     142,   150,   156,   164,   174,   176,   177,   178,   179,   180,
+     181,   184,   192,   198,   208,   214,   220,   223,   225,   236,
+     237,   242,   251,   256,   264,   267,   269,   270,   271,   272,
+     273,   276,   282,   293,   299,   309,   311,   316,   324,   332,
+     335,   337,   338,   339,   344,   351,   358,   363,   371,   374,
+     376,   377,   378,   381,   389,   396,   403,   409,   416,   418,
+     419,   420,   423,   431,   433,   434,   437,   444,   446,   451,
+     452,   455,   456,   457,   461,   462,   465,   466,   469,   470,
+     471,   472,   473,   474,   475,   478,   479,   482,   483
+};
+#endif
+
+#if YYDEBUG || YYERROR_VERBOSE || YYTOKEN_TABLE
+/* YYTNAME[SYMBOL-NUM] -- String name of the symbol SYMBOL-NUM.
+   First, the terminals, then, starting at YYNTOKENS, nonterminals.  */
+static const char *const yytname[] =
+{
+  "$end", "error", "$undefined", "T_MAINMENU", "T_MENU", "T_ENDMENU",
+  "T_SOURCE", "T_CHOICE", "T_ENDCHOICE", "T_COMMENT", "T_CONFIG",
+  "T_MENUCONFIG", "T_HELP", "T_HELPTEXT", "T_IF", "T_ENDIF", "T_DEPENDS",
+  "T_OPTIONAL", "T_PROMPT", "T_TYPE", "T_DEFAULT", "T_SELECT", "T_RANGE",
+  "T_VISIBLE", "T_OPTION", "T_ON", "T_WORD", "T_WORD_QUOTE", "T_UNEQUAL",
+  "T_CLOSE_PAREN", "T_OPEN_PAREN", "T_EOL", "T_OR", "T_AND", "T_EQUAL",
+  "T_NOT", "$accept", "input", "start", "stmt_list", "option_name",
+  "common_stmt", "option_error", "config_entry_start", "config_stmt",
+  "menuconfig_entry_start", "menuconfig_stmt", "config_option_list",
+  "config_option", "symbol_option", "symbol_option_list",
+  "symbol_option_arg", "choice", "choice_entry", "choice_end",
+  "choice_stmt", "choice_option_list", "choice_option", "choice_block",
+  "if_entry", "if_end", "if_stmt", "if_block", "mainmenu_stmt", "menu",
+  "menu_entry", "menu_end", "menu_stmt", "menu_block", "source_stmt",
+  "comment", "comment_stmt", "help_start", "help", "depends_list",
+  "depends", "visibility_list", "visible", "prompt_stmt_opt", "prompt",
+  "end", "nl", "if_expr", "expr", "symbol", "word_opt", 0
+};
+#endif
+
+# ifdef YYPRINT
+/* YYTOKNUM[YYLEX-NUM] -- Internal token number corresponding to
+   token YYLEX-NUM.  */
+static const yytype_uint16 yytoknum[] =
+{
+       0,   256,   257,   258,   259,   260,   261,   262,   263,   264,
+     265,   266,   267,   268,   269,   270,   271,   272,   273,   274,
+     275,   276,   277,   278,   279,   280,   281,   282,   283,   284,
+     285,   286,   287,   288,   289,   290
+};
+# endif
+
+/* YYR1[YYN] -- Symbol number of symbol that rule YYN derives.  */
+static const yytype_uint8 yyr1[] =
+{
+       0,    36,    37,    37,    38,    38,    39,    39,    39,    39,
+      39,    39,    39,    39,    40,    40,    40,    40,    40,    40,
+      40,    40,    41,    41,    41,    41,    41,    41,    42,    42,
+      43,    44,    45,    46,    47,    47,    47,    47,    47,    47,
+      47,    48,    48,    48,    48,    48,    49,    50,    50,    51,
+      51,    52,    53,    54,    55,    56,    56,    56,    56,    56,
+      56,    57,    57,    57,    57,    58,    58,    59,    60,    61,
+      62,    62,    62,    62,    63,    64,    65,    66,    67,    68,
+      68,    68,    68,    69,    70,    71,    72,    73,    74,    74,
+      74,    74,    75,    76,    76,    76,    77,    78,    78,    79,
+      79,    80,    80,    80,    81,    81,    82,    82,    83,    83,
+      83,    83,    83,    83,    83,    84,    84,    85,    85
+};
+
+/* YYR2[YYN] -- Number of symbols composing right hand side of rule YYN.  */
+static const yytype_uint8 yyr2[] =
+{
+       0,     2,     2,     1,     2,     1,     0,     2,     2,     2,
+       2,     4,     4,     3,     1,     1,     1,     1,     1,     1,
+       1,     1,     1,     1,     1,     1,     1,     1,     3,     2,
+       3,     2,     3,     2,     0,     2,     2,     2,     2,     2,
+       2,     3,     4,     4,     4,     5,     3,     0,     3,     0,
+       2,     3,     2,     1,     3,     0,     2,     2,     2,     2,
+       2,     4,     3,     2,     4,     0,     2,     3,     1,     3,
+       0,     2,     2,     2,     3,     3,     3,     1,     3,     0,
+       2,     2,     2,     3,     3,     2,     2,     2,     0,     2,
+       2,     2,     4,     0,     2,     2,     2,     0,     2,     1,
+       1,     2,     2,     2,     1,     2,     0,     2,     1,     3,
+       3,     3,     2,     3,     3,     1,     1,     0,     1
+};
+
+/* YYDEFACT[STATE-NAME] -- Default reduction number in state STATE-NUM.
+   Performed when YYTABLE doesn't specify something else to do.  Zero
+   means the default is an error.  */
+static const yytype_uint8 yydefact[] =
+{
+       6,     0,   104,     0,     3,     0,     6,     6,    99,   100,
+       0,     1,     0,     0,     0,     0,   117,     0,     0,     0,
+       0,     0,     0,    14,    18,    15,    16,    20,    17,    19,
+      21,     0,    22,     0,     7,    34,    25,    34,    26,    55,
+      65,     8,    70,    23,    93,    79,     9,    27,    88,    24,
+      10,     0,   105,     2,    74,    13,     0,   101,     0,   118,
+       0,   102,     0,     0,     0,   115,   116,     0,     0,     0,
+     108,   103,     0,     0,     0,     0,     0,     0,     0,    88,
+       0,     0,    75,    83,    51,    84,    30,    32,     0,   112,
+       0,     0,    67,     0,     0,    11,    12,     0,     0,     0,
+       0,    97,     0,     0,     0,    47,     0,    40,    39,    35,
+      36,     0,    38,    37,     0,     0,    97,     0,    59,    60,
+      56,    58,    57,    66,    54,    53,    71,    73,    69,    72,
+      68,   106,    95,     0,    94,    80,    82,    78,    81,    77,
+      90,    91,    89,   111,   113,   114,   110,   109,    29,    86,
+       0,   106,     0,   106,   106,   106,     0,     0,     0,    87,
+      63,   106,     0,   106,     0,    96,     0,     0,    41,    98,
+       0,     0,   106,    49,    46,    28,     0,    62,     0,   107,
+      92,    42,    43,    44,     0,     0,    48,    61,    64,    45,
+      50
+};
+
+/* YYDEFGOTO[NTERM-NUM].  */
+static const yytype_int16 yydefgoto[] =
+{
+      -1,     3,     4,     5,    33,    34,   108,    35,    36,    37,
+      38,    74,   109,   110,   157,   186,    39,    40,   124,    41,
+      76,   120,    77,    42,   128,    43,    78,     6,    44,    45,
+     137,    46,    80,    47,    48,    49,   111,   112,    81,   113,
+      79,   134,   152,   153,    50,     7,   165,    69,    70,    60
+};
+
+/* YYPACT[STATE-NUM] -- Index in YYTABLE of the portion describing
+   STATE-NUM.  */
+#define YYPACT_NINF -90
+static const yytype_int16 yypact[] =
+{
+       4,    42,   -90,    96,   -90,   111,   -90,    15,   -90,   -90,
+      75,   -90,    82,    42,   104,    42,   110,   107,    42,   115,
+     125,    -4,   121,   -90,   -90,   -90,   -90,   -90,   -90,   -90,
+     -90,   162,   -90,   163,   -90,   -90,   -90,   -90,   -90,   -90,
+     -90,   -90,   -90,   -90,   -90,   -90,   -90,   -90,   -90,   -90,
+     -90,   139,   -90,   -90,   138,   -90,   142,   -90,   143,   -90,
+     152,   -90,   164,   167,   168,   -90,   -90,    -4,    -4,    77,
+     -18,   -90,   177,   185,    33,    71,   195,   247,   236,    -2,
+     236,   171,   -90,   -90,   -90,   -90,   -90,   -90,    41,   -90,
+      -4,    -4,   138,    97,    97,   -90,   -90,   186,   187,   194,
+      42,    42,    -4,   196,    97,   -90,   219,   -90,   -90,   -90,
+     -90,   210,   -90,   -90,   204,    42,    42,   199,   -90,   -90,
+     -90,   -90,   -90,   -90,   -90,   -90,   -90,   -90,   -90,   -90,
+     -90,   222,   -90,   223,   -90,   -90,   -90,   -90,   -90,   -90,
+     -90,   -90,   -90,   -90,   215,   -90,   -90,   -90,   -90,   -90,
+      -4,   222,   228,   222,    -5,   222,    97,    35,   229,   -90,
+     -90,   222,   232,   222,    -4,   -90,   135,   233,   -90,   -90,
+     234,   235,   222,   240,   -90,   -90,   237,   -90,   239,   -13,
+     -90,   -90,   -90,   -90,   244,    42,   -90,   -90,   -90,   -90,
+     -90
+};
+
+/* YYPGOTO[NTERM-NUM].  */
+static const yytype_int16 yypgoto[] =
+{
+     -90,   -90,   269,   271,   -90,    23,   -70,   -90,   -90,   -90,
+     -90,   243,   -90,   -90,   -90,   -90,   -90,   -90,   -90,   -48,
+     -90,   -90,   -90,   -90,   -90,   -90,   -90,   -90,   -90,   -90,
+     -90,   -20,   -90,   -90,   -90,   -90,   -90,   206,   205,   -68,
+     -90,   -90,   169,    -1,    27,    -7,   118,   -66,   -89,   -90
+};
+
+/* YYTABLE[YYPACT[STATE-NUM]].  What to do in state STATE-NUM.  If
+   positive, shift that token.  If negative, reduce the rule which
+   number is the opposite.  If YYTABLE_NINF, syntax error.  */
+#define YYTABLE_NINF -86
+static const yytype_int16 yytable[] =
+{
+      10,    88,    89,    54,   146,   147,   119,     1,   122,   164,
+      93,   141,    56,   142,    58,   156,    94,    62,     1,    90,
+      91,   131,    65,    66,   144,   145,    67,    90,    91,   132,
+     127,    68,   136,   -31,    97,     2,   154,   -31,   -31,   -31,
+     -31,   -31,   -31,   -31,   -31,    98,    52,   -31,   -31,    99,
+     -31,   100,   101,   102,   103,   104,   -31,   105,   129,   106,
+     138,   173,    92,   141,   107,   142,   174,   172,     8,     9,
+     143,   -33,    97,    90,    91,   -33,   -33,   -33,   -33,   -33,
+     -33,   -33,   -33,    98,   166,   -33,   -33,    99,   -33,   100,
+     101,   102,   103,   104,   -33,   105,    11,   106,   179,   151,
+     123,   126,   107,   135,   125,   130,     2,   139,     2,    90,
+      91,    -5,    12,    55,   161,    13,    14,    15,    16,    17,
+      18,    19,    20,    65,    66,    21,    22,    23,    24,    25,
+      26,    27,    28,    29,    30,    57,    59,    31,    61,    -4,
+      12,    63,    32,    13,    14,    15,    16,    17,    18,    19,
+      20,    64,    71,    21,    22,    23,    24,    25,    26,    27,
+      28,    29,    30,    72,    73,    31,   180,    90,    91,    52,
+      32,   -85,    97,    82,    83,   -85,   -85,   -85,   -85,   -85,
+     -85,   -85,   -85,    84,   190,   -85,   -85,    99,   -85,   -85,
+     -85,   -85,   -85,   -85,   -85,    85,    97,   106,    86,    87,
+     -52,   -52,   140,   -52,   -52,   -52,   -52,    98,    95,   -52,
+     -52,    99,   114,   115,   116,   117,    96,   148,   149,   150,
+     158,   106,   155,   159,    97,   163,   118,   -76,   -76,   -76,
+     -76,   -76,   -76,   -76,   -76,   160,   164,   -76,   -76,    99,
+      13,    14,    15,    16,    17,    18,    19,    20,    91,   106,
+      21,    22,    14,    15,   140,    17,    18,    19,    20,   168,
+     175,    21,    22,   177,   181,   182,   183,    32,   187,   167,
+     188,   169,   170,   171,   185,   189,    53,    51,    32,   176,
+      75,   178,   121,     0,   133,   162,     0,     0,     0,     0,
+     184
+};
+
+#define yypact_value_is_default(yystate) \
+  ((yystate) == (-90))
+
+#define yytable_value_is_error(yytable_value) \
+  YYID (0)
+
+static const yytype_int16 yycheck[] =
+{
+       1,    67,    68,    10,    93,    94,    76,     3,    76,    14,
+      28,    81,    13,    81,    15,   104,    34,    18,     3,    32,
+      33,    23,    26,    27,    90,    91,    30,    32,    33,    31,
+      78,    35,    80,     0,     1,    31,   102,     4,     5,     6,
+       7,     8,     9,    10,    11,    12,    31,    14,    15,    16,
+      17,    18,    19,    20,    21,    22,    23,    24,    78,    26,
+      80,    26,    69,   133,    31,   133,    31,   156,    26,    27,
+      29,     0,     1,    32,    33,     4,     5,     6,     7,     8,
+       9,    10,    11,    12,   150,    14,    15,    16,    17,    18,
+      19,    20,    21,    22,    23,    24,     0,    26,   164,   100,
+      77,    78,    31,    80,    77,    78,    31,    80,    31,    32,
+      33,     0,     1,    31,   115,     4,     5,     6,     7,     8,
+       9,    10,    11,    26,    27,    14,    15,    16,    17,    18,
+      19,    20,    21,    22,    23,    31,    26,    26,    31,     0,
+       1,    26,    31,     4,     5,     6,     7,     8,     9,    10,
+      11,    26,    31,    14,    15,    16,    17,    18,    19,    20,
+      21,    22,    23,     1,     1,    26,    31,    32,    33,    31,
+      31,     0,     1,    31,    31,     4,     5,     6,     7,     8,
+       9,    10,    11,    31,   185,    14,    15,    16,    17,    18,
+      19,    20,    21,    22,    23,    31,     1,    26,    31,    31,
+       5,     6,    31,     8,     9,    10,    11,    12,    31,    14,
+      15,    16,    17,    18,    19,    20,    31,    31,    31,    25,
+       1,    26,    26,    13,     1,    26,    31,     4,     5,     6,
+       7,     8,     9,    10,    11,    31,    14,    14,    15,    16,
+       4,     5,     6,     7,     8,     9,    10,    11,    33,    26,
+      14,    15,     5,     6,    31,     8,     9,    10,    11,    31,
+      31,    14,    15,    31,    31,    31,    31,    31,    31,   151,
+      31,   153,   154,   155,    34,    31,     7,     6,    31,   161,
+      37,   163,    76,    -1,    79,   116,    -1,    -1,    -1,    -1,
+     172
+};
+
+/* YYSTOS[STATE-NUM] -- The (internal number of the) accessing
+   symbol of state STATE-NUM.  */
+static const yytype_uint8 yystos[] =
+{
+       0,     3,    31,    37,    38,    39,    63,    81,    26,    27,
+      79,     0,     1,     4,     5,     6,     7,     8,     9,    10,
+      11,    14,    15,    16,    17,    18,    19,    20,    21,    22,
+      23,    26,    31,    40,    41,    43,    44,    45,    46,    52,
+      53,    55,    59,    61,    64,    65,    67,    69,    70,    71,
+      80,    39,    31,    38,    81,    31,    79,    31,    79,    26,
+      85,    31,    79,    26,    26,    26,    27,    30,    35,    83,
+      84,    31,     1,     1,    47,    47,    56,    58,    62,    76,
+      68,    74,    31,    31,    31,    31,    31,    31,    83,    83,
+      32,    33,    81,    28,    34,    31,    31,     1,    12,    16,
+      18,    19,    20,    21,    22,    24,    26,    31,    42,    48,
+      49,    72,    73,    75,    17,    18,    19,    20,    31,    42,
+      57,    73,    75,    41,    54,    80,    41,    55,    60,    67,
+      80,    23,    31,    74,    77,    41,    55,    66,    67,    80,
+      31,    42,    75,    29,    83,    83,    84,    84,    31,    31,
+      25,    79,    78,    79,    83,    26,    84,    50,     1,    13,
+      31,    79,    78,    26,    14,    82,    83,    82,    31,    82,
+      82,    82,    84,    26,    31,    31,    82,    31,    82,    83,
+      31,    31,    31,    31,    82,    34,    51,    31,    31,    31,
+      79
+};
+
+#define yyerrok		(yyerrstatus = 0)
+#define yyclearin	(yychar = YYEMPTY)
+#define YYEMPTY		(-2)
+#define YYEOF		0
+
+#define YYACCEPT	goto yyacceptlab
+#define YYABORT		goto yyabortlab
+#define YYERROR		goto yyerrorlab
+
+
+/* Like YYERROR except do call yyerror.  This remains here temporarily
+   to ease the transition to the new meaning of YYERROR, for GCC.
+   Once GCC version 2 has supplanted version 1, this can go.  However,
+   YYFAIL appears to be in use.  Nevertheless, it is formally deprecated
+   in Bison 2.4.2's NEWS entry, where a plan to phase it out is
+   discussed.  */
+
+#define YYFAIL		goto yyerrlab
+#if defined YYFAIL
+  /* This is here to suppress warnings from the GCC cpp's
+     -Wunused-macros.  Normally we don't worry about that warning, but
+     some users do, and we want to make it easy for users to remove
+     YYFAIL uses, which will produce warnings from Bison 2.5.  */
+#endif
+
+#define YYRECOVERING()  (!!yyerrstatus)
+
+#define YYBACKUP(Token, Value)					\
+do								\
+  if (yychar == YYEMPTY && yylen == 1)				\
+    {								\
+      yychar = (Token);						\
+      yylval = (Value);						\
+      YYPOPSTACK (1);						\
+      goto yybackup;						\
+    }								\
+  else								\
+    {								\
+      yyerror (YY_("syntax error: cannot back up")); \
+      YYERROR;							\
+    }								\
+while (YYID (0))
+
+
+#define YYTERROR	1
+#define YYERRCODE	256
+
+
+/* YYLLOC_DEFAULT -- Set CURRENT to span from RHS[1] to RHS[N].
+   If N is 0, then set CURRENT to the empty location which ends
+   the previous symbol: RHS[0] (always defined).  */
+
+#define YYRHSLOC(Rhs, K) ((Rhs)[K])
+#ifndef YYLLOC_DEFAULT
+# define YYLLOC_DEFAULT(Current, Rhs, N)				\
+    do									\
+      if (YYID (N))                                                    \
+	{								\
+	  (Current).first_line   = YYRHSLOC (Rhs, 1).first_line;	\
+	  (Current).first_column = YYRHSLOC (Rhs, 1).first_column;	\
+	  (Current).last_line    = YYRHSLOC (Rhs, N).last_line;		\
+	  (Current).last_column  = YYRHSLOC (Rhs, N).last_column;	\
+	}								\
+      else								\
+	{								\
+	  (Current).first_line   = (Current).last_line   =		\
+	    YYRHSLOC (Rhs, 0).last_line;				\
+	  (Current).first_column = (Current).last_column =		\
+	    YYRHSLOC (Rhs, 0).last_column;				\
+	}								\
+    while (YYID (0))
+#endif
+
+
+/* This macro is provided for backward compatibility. */
+
+#ifndef YY_LOCATION_PRINT
+# define YY_LOCATION_PRINT(File, Loc) ((void) 0)
+#endif
+
+
+/* YYLEX -- calling `yylex' with the right arguments.  */
+
+#ifdef YYLEX_PARAM
+# define YYLEX yylex (YYLEX_PARAM)
+#else
+# define YYLEX yylex ()
+#endif
+
+/* Enable debugging if requested.  */
+#if YYDEBUG
+
+# ifndef YYFPRINTF
+#  include <stdio.h> /* INFRINGES ON USER NAME SPACE */
+#  define YYFPRINTF fprintf
+# endif
+
+# define YYDPRINTF(Args)			\
+do {						\
+  if (yydebug)					\
+    YYFPRINTF Args;				\
+} while (YYID (0))
+
+# define YY_SYMBOL_PRINT(Title, Type, Value, Location)			  \
+do {									  \
+  if (yydebug)								  \
+    {									  \
+      YYFPRINTF (stderr, "%s ", Title);					  \
+      yy_symbol_print (stderr,						  \
+		  Type, Value); \
+      YYFPRINTF (stderr, "\n");						  \
+    }									  \
+} while (YYID (0))
+
+
+/*--------------------------------.
+| Print this symbol on YYOUTPUT.  |
+`--------------------------------*/
+
+/*ARGSUSED*/
+#if (defined __STDC__ || defined __C99__FUNC__ \
+     || defined __cplusplus || defined _MSC_VER)
+static void
+yy_symbol_value_print (FILE *yyoutput, int yytype, YYSTYPE const * const yyvaluep)
+#else
+static void
+yy_symbol_value_print (yyoutput, yytype, yyvaluep)
+    FILE *yyoutput;
+    int yytype;
+    YYSTYPE const * const yyvaluep;
+#endif
+{
+  if (!yyvaluep)
+    return;
+# ifdef YYPRINT
+  if (yytype < YYNTOKENS)
+    YYPRINT (yyoutput, yytoknum[yytype], *yyvaluep);
+# else
+  YYUSE (yyoutput);
+# endif
+  switch (yytype)
+    {
+      default:
+	break;
+    }
+}
+
+
+/*--------------------------------.
+| Print this symbol on YYOUTPUT.  |
+`--------------------------------*/
+
+#if (defined __STDC__ || defined __C99__FUNC__ \
+     || defined __cplusplus || defined _MSC_VER)
+static void
+yy_symbol_print (FILE *yyoutput, int yytype, YYSTYPE const * const yyvaluep)
+#else
+static void
+yy_symbol_print (yyoutput, yytype, yyvaluep)
+    FILE *yyoutput;
+    int yytype;
+    YYSTYPE const * const yyvaluep;
+#endif
+{
+  if (yytype < YYNTOKENS)
+    YYFPRINTF (yyoutput, "token %s (", yytname[yytype]);
+  else
+    YYFPRINTF (yyoutput, "nterm %s (", yytname[yytype]);
+
+  yy_symbol_value_print (yyoutput, yytype, yyvaluep);
+  YYFPRINTF (yyoutput, ")");
+}
+
+/*------------------------------------------------------------------.
+| yy_stack_print -- Print the state stack from its BOTTOM up to its |
+| TOP (included).                                                   |
+`------------------------------------------------------------------*/
+
+#if (defined __STDC__ || defined __C99__FUNC__ \
+     || defined __cplusplus || defined _MSC_VER)
+static void
+yy_stack_print (yytype_int16 *yybottom, yytype_int16 *yytop)
+#else
+static void
+yy_stack_print (yybottom, yytop)
+    yytype_int16 *yybottom;
+    yytype_int16 *yytop;
+#endif
+{
+  YYFPRINTF (stderr, "Stack now");
+  for (; yybottom <= yytop; yybottom++)
+    {
+      int yybot = *yybottom;
+      YYFPRINTF (stderr, " %d", yybot);
+    }
+  YYFPRINTF (stderr, "\n");
+}
+
+# define YY_STACK_PRINT(Bottom, Top)				\
+do {								\
+  if (yydebug)							\
+    yy_stack_print ((Bottom), (Top));				\
+} while (YYID (0))
+
+
+/*------------------------------------------------.
+| Report that the YYRULE is going to be reduced.  |
+`------------------------------------------------*/
+
+#if (defined __STDC__ || defined __C99__FUNC__ \
+     || defined __cplusplus || defined _MSC_VER)
+static void
+yy_reduce_print (YYSTYPE *yyvsp, int yyrule)
+#else
+static void
+yy_reduce_print (yyvsp, yyrule)
+    YYSTYPE *yyvsp;
+    int yyrule;
+#endif
+{
+  int yynrhs = yyr2[yyrule];
+  int yyi;
+  unsigned long int yylno = yyrline[yyrule];
+  YYFPRINTF (stderr, "Reducing stack by rule %d (line %lu):\n",
+	     yyrule - 1, yylno);
+  /* The symbols being reduced.  */
+  for (yyi = 0; yyi < yynrhs; yyi++)
+    {
+      YYFPRINTF (stderr, "   $%d = ", yyi + 1);
+      yy_symbol_print (stderr, yyrhs[yyprhs[yyrule] + yyi],
+		       &(yyvsp[(yyi + 1) - (yynrhs)])
+		       		       );
+      YYFPRINTF (stderr, "\n");
+    }
+}
+
+# define YY_REDUCE_PRINT(Rule)		\
+do {					\
+  if (yydebug)				\
+    yy_reduce_print (yyvsp, Rule); \
+} while (YYID (0))
+
+/* Nonzero means print parse trace.  It is left uninitialized so that
+   multiple parsers can coexist.  */
+int yydebug;
+#else /* !YYDEBUG */
+# define YYDPRINTF(Args)
+# define YY_SYMBOL_PRINT(Title, Type, Value, Location)
+# define YY_STACK_PRINT(Bottom, Top)
+# define YY_REDUCE_PRINT(Rule)
+#endif /* !YYDEBUG */
+
+
+/* YYINITDEPTH -- initial size of the parser's stacks.  */
+#ifndef	YYINITDEPTH
+# define YYINITDEPTH 200
+#endif
+
+/* YYMAXDEPTH -- maximum size the stacks can grow to (effective only
+   if the built-in stack extension method is used).
+
+   Do not make this value too large; the results are undefined if
+   YYSTACK_ALLOC_MAXIMUM < YYSTACK_BYTES (YYMAXDEPTH)
+   evaluated with infinite-precision integer arithmetic.  */
+
+#ifndef YYMAXDEPTH
+# define YYMAXDEPTH 10000
+#endif
+
+
+#if YYERROR_VERBOSE
+
+# ifndef yystrlen
+#  if defined __GLIBC__ && defined _STRING_H
+#   define yystrlen strlen
+#  else
+/* Return the length of YYSTR.  */
+#if (defined __STDC__ || defined __C99__FUNC__ \
+     || defined __cplusplus || defined _MSC_VER)
+static YYSIZE_T
+yystrlen (const char *yystr)
+#else
+static YYSIZE_T
+yystrlen (yystr)
+    const char *yystr;
+#endif
+{
+  YYSIZE_T yylen;
+  for (yylen = 0; yystr[yylen]; yylen++)
+    continue;
+  return yylen;
+}
+#  endif
+# endif
+
+# ifndef yystpcpy
+#  if defined __GLIBC__ && defined _STRING_H && defined _GNU_SOURCE
+#   define yystpcpy stpcpy
+#  else
+/* Copy YYSRC to YYDEST, returning the address of the terminating '\0' in
+   YYDEST.  */
+#if (defined __STDC__ || defined __C99__FUNC__ \
+     || defined __cplusplus || defined _MSC_VER)
+static char *
+yystpcpy (char *yydest, const char *yysrc)
+#else
+static char *
+yystpcpy (yydest, yysrc)
+    char *yydest;
+    const char *yysrc;
+#endif
+{
+  char *yyd = yydest;
+  const char *yys = yysrc;
+
+  while ((*yyd++ = *yys++) != '\0')
+    continue;
+
+  return yyd - 1;
+}
+#  endif
+# endif
+
+# ifndef yytnamerr
+/* Copy to YYRES the contents of YYSTR after stripping away unnecessary
+   quotes and backslashes, so that it's suitable for yyerror.  The
+   heuristic is that double-quoting is unnecessary unless the string
+   contains an apostrophe, a comma, or backslash (other than
+   backslash-backslash).  YYSTR is taken from yytname.  If YYRES is
+   null, do not copy; instead, return the length of what the result
+   would have been.  */
+static YYSIZE_T
+yytnamerr (char *yyres, const char *yystr)
+{
+  if (*yystr == '"')
+    {
+      YYSIZE_T yyn = 0;
+      char const *yyp = yystr;
+
+      for (;;)
+	switch (*++yyp)
+	  {
+	  case '\'':
+	  case ',':
+	    goto do_not_strip_quotes;
+
+	  case '\\':
+	    if (*++yyp != '\\')
+	      goto do_not_strip_quotes;
+	    /* Fall through.  */
+	  default:
+	    if (yyres)
+	      yyres[yyn] = *yyp;
+	    yyn++;
+	    break;
+
+	  case '"':
+	    if (yyres)
+	      yyres[yyn] = '\0';
+	    return yyn;
+	  }
+    do_not_strip_quotes: ;
+    }
+
+  if (! yyres)
+    return yystrlen (yystr);
+
+  return yystpcpy (yyres, yystr) - yyres;
+}
+# endif
+
+/* Copy into *YYMSG, which is of size *YYMSG_ALLOC, an error message
+   about the unexpected token YYTOKEN for the state stack whose top is
+   YYSSP.
+
+   Return 0 if *YYMSG was successfully written.  Return 1 if *YYMSG is
+   not large enough to hold the message.  In that case, also set
+   *YYMSG_ALLOC to the required number of bytes.  Return 2 if the
+   required number of bytes is too large to store.  */
+static int
+yysyntax_error (YYSIZE_T *yymsg_alloc, char **yymsg,
+                yytype_int16 *yyssp, int yytoken)
+{
+  YYSIZE_T yysize0 = yytnamerr (0, yytname[yytoken]);
+  YYSIZE_T yysize = yysize0;
+  YYSIZE_T yysize1;
+  enum { YYERROR_VERBOSE_ARGS_MAXIMUM = 5 };
+  /* Internationalized format string. */
+  const char *yyformat = 0;
+  /* Arguments of yyformat. */
+  char const *yyarg[YYERROR_VERBOSE_ARGS_MAXIMUM];
+  /* Number of reported tokens (one for the "unexpected", one per
+     "expected"). */
+  int yycount = 0;
+
+  /* There are many possibilities here to consider:
+     - Assume YYFAIL is not used.  It's too flawed to consider.  See
+       <http://lists.gnu.org/archive/html/bison-patches/2009-12/msg00024.html>
+       for details.  YYERROR is fine as it does not invoke this
+       function.
+     - If this state is a consistent state with a default action, then
+       the only way this function was invoked is if the default action
+       is an error action.  In that case, don't check for expected
+       tokens because there are none.
+     - The only way there can be no lookahead present (in yychar) is if
+       this state is a consistent state with a default action.  Thus,
+       detecting the absence of a lookahead is sufficient to determine
+       that there is no unexpected or expected token to report.  In that
+       case, just report a simple "syntax error".
+     - Don't assume there isn't a lookahead just because this state is a
+       consistent state with a default action.  There might have been a
+       previous inconsistent state, consistent state with a non-default
+       action, or user semantic action that manipulated yychar.
+     - Of course, the expected token list depends on states to have
+       correct lookahead information, and it depends on the parser not
+       to perform extra reductions after fetching a lookahead from the
+       scanner and before detecting a syntax error.  Thus, state merging
+       (from LALR or IELR) and default reductions corrupt the expected
+       token list.  However, the list is correct for canonical LR with
+       one exception: it will still contain any token that will not be
+       accepted due to an error action in a later state.
+  */
+  if (yytoken != YYEMPTY)
+    {
+      int yyn = yypact[*yyssp];
+      yyarg[yycount++] = yytname[yytoken];
+      if (!yypact_value_is_default (yyn))
+        {
+          /* Start YYX at -YYN if negative to avoid negative indexes in
+             YYCHECK.  In other words, skip the first -YYN actions for
+             this state because they are default actions.  */
+          int yyxbegin = yyn < 0 ? -yyn : 0;
+          /* Stay within bounds of both yycheck and yytname.  */
+          int yychecklim = YYLAST - yyn + 1;
+          int yyxend = yychecklim < YYNTOKENS ? yychecklim : YYNTOKENS;
+          int yyx;
+
+          for (yyx = yyxbegin; yyx < yyxend; ++yyx)
+            if (yycheck[yyx + yyn] == yyx && yyx != YYTERROR
+                && !yytable_value_is_error (yytable[yyx + yyn]))
+              {
+                if (yycount == YYERROR_VERBOSE_ARGS_MAXIMUM)
+                  {
+                    yycount = 1;
+                    yysize = yysize0;
+                    break;
+                  }
+                yyarg[yycount++] = yytname[yyx];
+                yysize1 = yysize + yytnamerr (0, yytname[yyx]);
+                if (! (yysize <= yysize1
+                       && yysize1 <= YYSTACK_ALLOC_MAXIMUM))
+                  return 2;
+                yysize = yysize1;
+              }
+        }
+    }
+
+  switch (yycount)
+    {
+# define YYCASE_(N, S)                      \
+      case N:                               \
+        yyformat = S;                       \
+      break
+      YYCASE_(0, YY_("syntax error"));
+      YYCASE_(1, YY_("syntax error, unexpected %s"));
+      YYCASE_(2, YY_("syntax error, unexpected %s, expecting %s"));
+      YYCASE_(3, YY_("syntax error, unexpected %s, expecting %s or %s"));
+      YYCASE_(4, YY_("syntax error, unexpected %s, expecting %s or %s or %s"));
+      YYCASE_(5, YY_("syntax error, unexpected %s, expecting %s or %s or %s or %s"));
+# undef YYCASE_
+    }
+
+  yysize1 = yysize + yystrlen (yyformat);
+  if (! (yysize <= yysize1 && yysize1 <= YYSTACK_ALLOC_MAXIMUM))
+    return 2;
+  yysize = yysize1;
+
+  if (*yymsg_alloc < yysize)
+    {
+      *yymsg_alloc = 2 * yysize;
+      if (! (yysize <= *yymsg_alloc
+             && *yymsg_alloc <= YYSTACK_ALLOC_MAXIMUM))
+        *yymsg_alloc = YYSTACK_ALLOC_MAXIMUM;
+      return 1;
+    }
+
+  /* Avoid sprintf, as that infringes on the user's name space.
+     Don't have undefined behavior even if the translation
+     produced a string with the wrong number of "%s"s.  */
+  {
+    char *yyp = *yymsg;
+    int yyi = 0;
+    while ((*yyp = *yyformat) != '\0')
+      if (*yyp == '%' && yyformat[1] == 's' && yyi < yycount)
+        {
+          yyp += yytnamerr (yyp, yyarg[yyi++]);
+          yyformat += 2;
+        }
+      else
+        {
+          yyp++;
+          yyformat++;
+        }
+  }
+  return 0;
+}
+#endif /* YYERROR_VERBOSE */
+
+/*-----------------------------------------------.
+| Release the memory associated to this symbol.  |
+`-----------------------------------------------*/
+
+/*ARGSUSED*/
+#if (defined __STDC__ || defined __C99__FUNC__ \
+     || defined __cplusplus || defined _MSC_VER)
+static void
+yydestruct (const char *yymsg, int yytype, YYSTYPE *yyvaluep)
+#else
+static void
+yydestruct (yymsg, yytype, yyvaluep)
+    const char *yymsg;
+    int yytype;
+    YYSTYPE *yyvaluep;
+#endif
+{
+  YYUSE (yyvaluep);
+
+  if (!yymsg)
+    yymsg = "Deleting";
+  YY_SYMBOL_PRINT (yymsg, yytype, yyvaluep, yylocationp);
+
+  switch (yytype)
+    {
+      case 53: /* "choice_entry" */
+
+	{
+	fprintf(stderr, "%s:%d: missing end statement for this entry\n",
+		(yyvaluep->menu)->file->name, (yyvaluep->menu)->lineno);
+	if (current_menu == (yyvaluep->menu))
+		menu_end_menu();
+};
+
+	break;
+      case 59: /* "if_entry" */
+
+	{
+	fprintf(stderr, "%s:%d: missing end statement for this entry\n",
+		(yyvaluep->menu)->file->name, (yyvaluep->menu)->lineno);
+	if (current_menu == (yyvaluep->menu))
+		menu_end_menu();
+};
+
+	break;
+      case 65: /* "menu_entry" */
+
+	{
+	fprintf(stderr, "%s:%d: missing end statement for this entry\n",
+		(yyvaluep->menu)->file->name, (yyvaluep->menu)->lineno);
+	if (current_menu == (yyvaluep->menu))
+		menu_end_menu();
+};
+
+	break;
+
+      default:
+	break;
+    }
+}
+
+
+/* Prevent warnings from -Wmissing-prototypes.  */
+#ifdef YYPARSE_PARAM
+#if defined __STDC__ || defined __cplusplus
+int yyparse (void *YYPARSE_PARAM);
+#else
+int yyparse ();
+#endif
+#else /* ! YYPARSE_PARAM */
+#if defined __STDC__ || defined __cplusplus
+int yyparse (void);
+#else
+int yyparse ();
+#endif
+#endif /* ! YYPARSE_PARAM */
+
+
+/* The lookahead symbol.  */
+int yychar;
+
+/* The semantic value of the lookahead symbol.  */
+YYSTYPE yylval;
+
+/* Number of syntax errors so far.  */
+int yynerrs;
+
+
+/*----------.
+| yyparse.  |
+`----------*/
+
+#ifdef YYPARSE_PARAM
+#if (defined __STDC__ || defined __C99__FUNC__ \
+     || defined __cplusplus || defined _MSC_VER)
+int
+yyparse (void *YYPARSE_PARAM)
+#else
+int
+yyparse (YYPARSE_PARAM)
+    void *YYPARSE_PARAM;
+#endif
+#else /* ! YYPARSE_PARAM */
+#if (defined __STDC__ || defined __C99__FUNC__ \
+     || defined __cplusplus || defined _MSC_VER)
+int
+yyparse (void)
+#else
+int
+yyparse ()
+
+#endif
+#endif
+{
+    int yystate;
+    /* Number of tokens to shift before error messages enabled.  */
+    int yyerrstatus;
+
+    /* The stacks and their tools:
+       `yyss': related to states.
+       `yyvs': related to semantic values.
+
+       Refer to the stacks thru separate pointers, to allow yyoverflow
+       to reallocate them elsewhere.  */
+
+    /* The state stack.  */
+    yytype_int16 yyssa[YYINITDEPTH];
+    yytype_int16 *yyss;
+    yytype_int16 *yyssp;
+
+    /* The semantic value stack.  */
+    YYSTYPE yyvsa[YYINITDEPTH];
+    YYSTYPE *yyvs;
+    YYSTYPE *yyvsp;
+
+    YYSIZE_T yystacksize;
+
+  int yyn;
+  int yyresult;
+  /* Lookahead token as an internal (translated) token number.  */
+  int yytoken;
+  /* The variables used to return semantic value and location from the
+     action routines.  */
+  YYSTYPE yyval;
+
+#if YYERROR_VERBOSE
+  /* Buffer for error messages, and its allocated size.  */
+  char yymsgbuf[128];
+  char *yymsg = yymsgbuf;
+  YYSIZE_T yymsg_alloc = sizeof yymsgbuf;
+#endif
+
+#define YYPOPSTACK(N)   (yyvsp -= (N), yyssp -= (N))
+
+  /* The number of symbols on the RHS of the reduced rule.
+     Keep to zero when no symbol should be popped.  */
+  int yylen = 0;
+
+  yytoken = 0;
+  yyss = yyssa;
+  yyvs = yyvsa;
+  yystacksize = YYINITDEPTH;
+
+  YYDPRINTF ((stderr, "Starting parse\n"));
+
+  yystate = 0;
+  yyerrstatus = 0;
+  yynerrs = 0;
+  yychar = YYEMPTY; /* Cause a token to be read.  */
+
+  /* Initialize stack pointers.
+     Waste one element of value and location stack
+     so that they stay on the same level as the state stack.
+     The wasted elements are never initialized.  */
+  yyssp = yyss;
+  yyvsp = yyvs;
+
+  goto yysetstate;
+
+/*------------------------------------------------------------.
+| yynewstate -- Push a new state, which is found in yystate.  |
+`------------------------------------------------------------*/
+ yynewstate:
+  /* In all cases, when you get here, the value and location stacks
+     have just been pushed.  So pushing a state here evens the stacks.  */
+  yyssp++;
+
+ yysetstate:
+  *yyssp = yystate;
+
+  if (yyss + yystacksize - 1 <= yyssp)
+    {
+      /* Get the current used size of the three stacks, in elements.  */
+      YYSIZE_T yysize = yyssp - yyss + 1;
+
+#ifdef yyoverflow
+      {
+	/* Give user a chance to reallocate the stack.  Use copies of
+	   these so that the &'s don't force the real ones into
+	   memory.  */
+	YYSTYPE *yyvs1 = yyvs;
+	yytype_int16 *yyss1 = yyss;
+
+	/* Each stack pointer address is followed by the size of the
+	   data in use in that stack, in bytes.  This used to be a
+	   conditional around just the two extra args, but that might
+	   be undefined if yyoverflow is a macro.  */
+	yyoverflow (YY_("memory exhausted"),
+		    &yyss1, yysize * sizeof (*yyssp),
+		    &yyvs1, yysize * sizeof (*yyvsp),
+		    &yystacksize);
+
+	yyss = yyss1;
+	yyvs = yyvs1;
+      }
+#else /* no yyoverflow */
+# ifndef YYSTACK_RELOCATE
+      goto yyexhaustedlab;
+# else
+      /* Extend the stack our own way.  */
+      if (YYMAXDEPTH <= yystacksize)
+	goto yyexhaustedlab;
+      yystacksize *= 2;
+      if (YYMAXDEPTH < yystacksize)
+	yystacksize = YYMAXDEPTH;
+
+      {
+	yytype_int16 *yyss1 = yyss;
+	union yyalloc *yyptr =
+	  (union yyalloc *) YYSTACK_ALLOC (YYSTACK_BYTES (yystacksize));
+	if (! yyptr)
+	  goto yyexhaustedlab;
+	YYSTACK_RELOCATE (yyss_alloc, yyss);
+	YYSTACK_RELOCATE (yyvs_alloc, yyvs);
+#  undef YYSTACK_RELOCATE
+	if (yyss1 != yyssa)
+	  YYSTACK_FREE (yyss1);
+      }
+# endif
+#endif /* no yyoverflow */
+
+      yyssp = yyss + yysize - 1;
+      yyvsp = yyvs + yysize - 1;
+
+      YYDPRINTF ((stderr, "Stack size increased to %lu\n",
+		  (unsigned long int) yystacksize));
+
+      if (yyss + yystacksize - 1 <= yyssp)
+	YYABORT;
+    }
+
+  YYDPRINTF ((stderr, "Entering state %d\n", yystate));
+
+  if (yystate == YYFINAL)
+    YYACCEPT;
+
+  goto yybackup;
+
+/*-----------.
+| yybackup.  |
+`-----------*/
+yybackup:
+
+  /* Do appropriate processing given the current state.  Read a
+     lookahead token if we need one and don't already have one.  */
+
+  /* First try to decide what to do without reference to lookahead token.  */
+  yyn = yypact[yystate];
+  if (yypact_value_is_default (yyn))
+    goto yydefault;
+
+  /* Not known => get a lookahead token if don't already have one.  */
+
+  /* YYCHAR is either YYEMPTY or YYEOF or a valid lookahead symbol.  */
+  if (yychar == YYEMPTY)
+    {
+      YYDPRINTF ((stderr, "Reading a token: "));
+      yychar = YYLEX;
+    }
+
+  if (yychar <= YYEOF)
+    {
+      yychar = yytoken = YYEOF;
+      YYDPRINTF ((stderr, "Now at end of input.\n"));
+    }
+  else
+    {
+      yytoken = YYTRANSLATE (yychar);
+      YY_SYMBOL_PRINT ("Next token is", yytoken, &yylval, &yylloc);
+    }
+
+  /* If the proper action on seeing token YYTOKEN is to reduce or to
+     detect an error, take that action.  */
+  yyn += yytoken;
+  if (yyn < 0 || YYLAST < yyn || yycheck[yyn] != yytoken)
+    goto yydefault;
+  yyn = yytable[yyn];
+  if (yyn <= 0)
+    {
+      if (yytable_value_is_error (yyn))
+        goto yyerrlab;
+      yyn = -yyn;
+      goto yyreduce;
+    }
+
+  /* Count tokens shifted since error; after three, turn off error
+     status.  */
+  if (yyerrstatus)
+    yyerrstatus--;
+
+  /* Shift the lookahead token.  */
+  YY_SYMBOL_PRINT ("Shifting", yytoken, &yylval, &yylloc);
+
+  /* Discard the shifted token.  */
+  yychar = YYEMPTY;
+
+  yystate = yyn;
+  *++yyvsp = yylval;
+
+  goto yynewstate;
+
+
+/*-----------------------------------------------------------.
+| yydefault -- do the default action for the current state.  |
+`-----------------------------------------------------------*/
+yydefault:
+  yyn = yydefact[yystate];
+  if (yyn == 0)
+    goto yyerrlab;
+  goto yyreduce;
+
+
+/*-----------------------------.
+| yyreduce -- Do a reduction.  |
+`-----------------------------*/
+yyreduce:
+  /* yyn is the number of a rule to reduce with.  */
+  yylen = yyr2[yyn];
+
+  /* If YYLEN is nonzero, implement the default value of the action:
+     `$$ = $1'.
+
+     Otherwise, the following line sets YYVAL to garbage.
+     This behavior is undocumented and Bison
+     users should not rely upon it.  Assigning to YYVAL
+     unconditionally makes the parser a bit smaller, and it avoids a
+     GCC warning that YYVAL may be used uninitialized.  */
+  yyval = yyvsp[1-yylen];
+
+
+  YY_REDUCE_PRINT (yyn);
+  switch (yyn)
+    {
+        case 10:
+
+    { zconf_error("unexpected end statement"); }
+    break;
+
+  case 11:
+
+    { zconf_error("unknown statement \"%s\"", (yyvsp[(2) - (4)].string)); }
+    break;
+
+  case 12:
+
+    {
+	zconf_error("unexpected option \"%s\"", kconf_id_strings + (yyvsp[(2) - (4)].id)->name);
+}
+    break;
+
+  case 13:
+
+    { zconf_error("invalid statement"); }
+    break;
+
+  case 28:
+
+    { zconf_error("unknown option \"%s\"", (yyvsp[(1) - (3)].string)); }
+    break;
+
+  case 29:
+
+    { zconf_error("invalid option"); }
+    break;
+
+  case 30:
+
+    {
+	struct symbol *sym = sym_lookup((yyvsp[(2) - (3)].string), 0);
+	sym->flags |= SYMBOL_OPTIONAL;
+	menu_add_entry(sym);
+	printd(DEBUG_PARSE, "%s:%d:config %s\n", zconf_curname(), zconf_lineno(), (yyvsp[(2) - (3)].string));
+}
+    break;
+
+  case 31:
+
+    {
+	menu_end_entry();
+	printd(DEBUG_PARSE, "%s:%d:endconfig\n", zconf_curname(), zconf_lineno());
+}
+    break;
+
+  case 32:
+
+    {
+	struct symbol *sym = sym_lookup((yyvsp[(2) - (3)].string), 0);
+	sym->flags |= SYMBOL_OPTIONAL;
+	menu_add_entry(sym);
+	printd(DEBUG_PARSE, "%s:%d:menuconfig %s\n", zconf_curname(), zconf_lineno(), (yyvsp[(2) - (3)].string));
+}
+    break;
+
+  case 33:
+
+    {
+	if (current_entry->prompt)
+		current_entry->prompt->type = P_MENU;
+	else
+		zconfprint("warning: menuconfig statement without prompt");
+	menu_end_entry();
+	printd(DEBUG_PARSE, "%s:%d:endconfig\n", zconf_curname(), zconf_lineno());
+}
+    break;
+
+  case 41:
+
+    {
+	menu_set_type((yyvsp[(1) - (3)].id)->stype);
+	printd(DEBUG_PARSE, "%s:%d:type(%u)\n",
+		zconf_curname(), zconf_lineno(),
+		(yyvsp[(1) - (3)].id)->stype);
+}
+    break;
+
+  case 42:
+
+    {
+	menu_add_prompt(P_PROMPT, (yyvsp[(2) - (4)].string), (yyvsp[(3) - (4)].expr));
+	printd(DEBUG_PARSE, "%s:%d:prompt\n", zconf_curname(), zconf_lineno());
+}
+    break;
+
+  case 43:
+
+    {
+	menu_add_expr(P_DEFAULT, (yyvsp[(2) - (4)].expr), (yyvsp[(3) - (4)].expr));
+	if ((yyvsp[(1) - (4)].id)->stype != S_UNKNOWN)
+		menu_set_type((yyvsp[(1) - (4)].id)->stype);
+	printd(DEBUG_PARSE, "%s:%d:default(%u)\n",
+		zconf_curname(), zconf_lineno(),
+		(yyvsp[(1) - (4)].id)->stype);
+}
+    break;
+
+  case 44:
+
+    {
+	menu_add_symbol(P_SELECT, sym_lookup((yyvsp[(2) - (4)].string), 0), (yyvsp[(3) - (4)].expr));
+	printd(DEBUG_PARSE, "%s:%d:select\n", zconf_curname(), zconf_lineno());
+}
+    break;
+
+  case 45:
+
+    {
+	menu_add_expr(P_RANGE, expr_alloc_comp(E_RANGE,(yyvsp[(2) - (5)].symbol), (yyvsp[(3) - (5)].symbol)), (yyvsp[(4) - (5)].expr));
+	printd(DEBUG_PARSE, "%s:%d:range\n", zconf_curname(), zconf_lineno());
+}
+    break;
+
+  case 48:
+
+    {
+	const struct kconf_id *id = kconf_id_lookup((yyvsp[(2) - (3)].string), strlen((yyvsp[(2) - (3)].string)));
+	if (id && id->flags & TF_OPTION)
+		menu_add_option(id->token, (yyvsp[(3) - (3)].string));
+	else
+		zconfprint("warning: ignoring unknown option %s", (yyvsp[(2) - (3)].string));
+	free((yyvsp[(2) - (3)].string));
+}
+    break;
+
+  case 49:
+
+    { (yyval.string) = NULL; }
+    break;
+
+  case 50:
+
+    { (yyval.string) = (yyvsp[(2) - (2)].string); }
+    break;
+
+  case 51:
+
+    {
+	struct symbol *sym = sym_lookup((yyvsp[(2) - (3)].string), SYMBOL_CHOICE);
+	sym->flags |= SYMBOL_AUTO;
+	menu_add_entry(sym);
+	menu_add_expr(P_CHOICE, NULL, NULL);
+	printd(DEBUG_PARSE, "%s:%d:choice\n", zconf_curname(), zconf_lineno());
+}
+    break;
+
+  case 52:
+
+    {
+	(yyval.menu) = menu_add_menu();
+}
+    break;
+
+  case 53:
+
+    {
+	if (zconf_endtoken((yyvsp[(1) - (1)].id), T_CHOICE, T_ENDCHOICE)) {
+		menu_end_menu();
+		printd(DEBUG_PARSE, "%s:%d:endchoice\n", zconf_curname(), zconf_lineno());
+	}
+}
+    break;
+
+  case 61:
+
+    {
+	menu_add_prompt(P_PROMPT, (yyvsp[(2) - (4)].string), (yyvsp[(3) - (4)].expr));
+	printd(DEBUG_PARSE, "%s:%d:prompt\n", zconf_curname(), zconf_lineno());
+}
+    break;
+
+  case 62:
+
+    {
+	if ((yyvsp[(1) - (3)].id)->stype == S_BOOLEAN || (yyvsp[(1) - (3)].id)->stype == S_TRISTATE) {
+		menu_set_type((yyvsp[(1) - (3)].id)->stype);
+		printd(DEBUG_PARSE, "%s:%d:type(%u)\n",
+			zconf_curname(), zconf_lineno(),
+			(yyvsp[(1) - (3)].id)->stype);
+	} else
+		YYERROR;
+}
+    break;
+
+  case 63:
+
+    {
+	current_entry->sym->flags |= SYMBOL_OPTIONAL;
+	printd(DEBUG_PARSE, "%s:%d:optional\n", zconf_curname(), zconf_lineno());
+}
+    break;
+
+  case 64:
+
+    {
+	if ((yyvsp[(1) - (4)].id)->stype == S_UNKNOWN) {
+		menu_add_symbol(P_DEFAULT, sym_lookup((yyvsp[(2) - (4)].string), 0), (yyvsp[(3) - (4)].expr));
+		printd(DEBUG_PARSE, "%s:%d:default\n",
+			zconf_curname(), zconf_lineno());
+	} else
+		YYERROR;
+}
+    break;
+
+  case 67:
+
+    {
+	printd(DEBUG_PARSE, "%s:%d:if\n", zconf_curname(), zconf_lineno());
+	menu_add_entry(NULL);
+	menu_add_dep((yyvsp[(2) - (3)].expr));
+	(yyval.menu) = menu_add_menu();
+}
+    break;
+
+  case 68:
+
+    {
+	if (zconf_endtoken((yyvsp[(1) - (1)].id), T_IF, T_ENDIF)) {
+		menu_end_menu();
+		printd(DEBUG_PARSE, "%s:%d:endif\n", zconf_curname(), zconf_lineno());
+	}
+}
+    break;
+
+  case 74:
+
+    {
+	menu_add_prompt(P_MENU, (yyvsp[(2) - (3)].string), NULL);
+}
+    break;
+
+  case 75:
+
+    {
+	menu_add_entry(NULL);
+	menu_add_prompt(P_MENU, (yyvsp[(2) - (3)].string), NULL);
+	printd(DEBUG_PARSE, "%s:%d:menu\n", zconf_curname(), zconf_lineno());
+}
+    break;
+
+  case 76:
+
+    {
+	(yyval.menu) = menu_add_menu();
+}
+    break;
+
+  case 77:
+
+    {
+	if (zconf_endtoken((yyvsp[(1) - (1)].id), T_MENU, T_ENDMENU)) {
+		menu_end_menu();
+		printd(DEBUG_PARSE, "%s:%d:endmenu\n", zconf_curname(), zconf_lineno());
+	}
+}
+    break;
+
+  case 83:
+
+    {
+	printd(DEBUG_PARSE, "%s:%d:source %s\n", zconf_curname(), zconf_lineno(), (yyvsp[(2) - (3)].string));
+	zconf_nextfile((yyvsp[(2) - (3)].string));
+}
+    break;
+
+  case 84:
+
+    {
+	menu_add_entry(NULL);
+	menu_add_prompt(P_COMMENT, (yyvsp[(2) - (3)].string), NULL);
+	printd(DEBUG_PARSE, "%s:%d:comment\n", zconf_curname(), zconf_lineno());
+}
+    break;
+
+  case 85:
+
+    {
+	menu_end_entry();
+}
+    break;
+
+  case 86:
+
+    {
+	printd(DEBUG_PARSE, "%s:%d:help\n", zconf_curname(), zconf_lineno());
+	zconf_starthelp();
+}
+    break;
+
+  case 87:
+
+    {
+	current_entry->help = (yyvsp[(2) - (2)].string);
+}
+    break;
+
+  case 92:
+
+    {
+	menu_add_dep((yyvsp[(3) - (4)].expr));
+	printd(DEBUG_PARSE, "%s:%d:depends on\n", zconf_curname(), zconf_lineno());
+}
+    break;
+
+  case 96:
+
+    {
+	menu_add_visibility((yyvsp[(2) - (2)].expr));
+}
+    break;
+
+  case 98:
+
+    {
+	menu_add_prompt(P_PROMPT, (yyvsp[(1) - (2)].string), (yyvsp[(2) - (2)].expr));
+}
+    break;
+
+  case 101:
+
+    { (yyval.id) = (yyvsp[(1) - (2)].id); }
+    break;
+
+  case 102:
+
+    { (yyval.id) = (yyvsp[(1) - (2)].id); }
+    break;
+
+  case 103:
+
+    { (yyval.id) = (yyvsp[(1) - (2)].id); }
+    break;
+
+  case 106:
+
+    { (yyval.expr) = NULL; }
+    break;
+
+  case 107:
+
+    { (yyval.expr) = (yyvsp[(2) - (2)].expr); }
+    break;
+
+  case 108:
+
+    { (yyval.expr) = expr_alloc_symbol((yyvsp[(1) - (1)].symbol)); }
+    break;
+
+  case 109:
+
+    { (yyval.expr) = expr_alloc_comp(E_EQUAL, (yyvsp[(1) - (3)].symbol), (yyvsp[(3) - (3)].symbol)); }
+    break;
+
+  case 110:
+
+    { (yyval.expr) = expr_alloc_comp(E_UNEQUAL, (yyvsp[(1) - (3)].symbol), (yyvsp[(3) - (3)].symbol)); }
+    break;
+
+  case 111:
+
+    { (yyval.expr) = (yyvsp[(2) - (3)].expr); }
+    break;
+
+  case 112:
+
+    { (yyval.expr) = expr_alloc_one(E_NOT, (yyvsp[(2) - (2)].expr)); }
+    break;
+
+  case 113:
+
+    { (yyval.expr) = expr_alloc_two(E_OR, (yyvsp[(1) - (3)].expr), (yyvsp[(3) - (3)].expr)); }
+    break;
+
+  case 114:
+
+    { (yyval.expr) = expr_alloc_two(E_AND, (yyvsp[(1) - (3)].expr), (yyvsp[(3) - (3)].expr)); }
+    break;
+
+  case 115:
+
+    { (yyval.symbol) = sym_lookup((yyvsp[(1) - (1)].string), 0); free((yyvsp[(1) - (1)].string)); }
+    break;
+
+  case 116:
+
+    { (yyval.symbol) = sym_lookup((yyvsp[(1) - (1)].string), SYMBOL_CONST); free((yyvsp[(1) - (1)].string)); }
+    break;
+
+  case 117:
+
+    { (yyval.string) = NULL; }
+    break;
+
+
+
+      default: break;
+    }
+  /* User semantic actions sometimes alter yychar, and that requires
+     that yytoken be updated with the new translation.  We take the
+     approach of translating immediately before every use of yytoken.
+     One alternative is translating here after every semantic action,
+     but that translation would be missed if the semantic action invokes
+     YYABORT, YYACCEPT, or YYERROR immediately after altering yychar or
+     if it invokes YYBACKUP.  In the case of YYABORT or YYACCEPT, an
+     incorrect destructor might then be invoked immediately.  In the
+     case of YYERROR or YYBACKUP, subsequent parser actions might lead
+     to an incorrect destructor call or verbose syntax error message
+     before the lookahead is translated.  */
+  YY_SYMBOL_PRINT ("-> $$ =", yyr1[yyn], &yyval, &yyloc);
+
+  YYPOPSTACK (yylen);
+  yylen = 0;
+  YY_STACK_PRINT (yyss, yyssp);
+
+  *++yyvsp = yyval;
+
+  /* Now `shift' the result of the reduction.  Determine what state
+     that goes to, based on the state we popped back to and the rule
+     number reduced by.  */
+
+  yyn = yyr1[yyn];
+
+  yystate = yypgoto[yyn - YYNTOKENS] + *yyssp;
+  if (0 <= yystate && yystate <= YYLAST && yycheck[yystate] == *yyssp)
+    yystate = yytable[yystate];
+  else
+    yystate = yydefgoto[yyn - YYNTOKENS];
+
+  goto yynewstate;
+
+
+/*------------------------------------.
+| yyerrlab -- here on detecting error |
+`------------------------------------*/
+yyerrlab:
+  /* Make sure we have latest lookahead translation.  See comments at
+     user semantic actions for why this is necessary.  */
+  yytoken = yychar == YYEMPTY ? YYEMPTY : YYTRANSLATE (yychar);
+
+  /* If not already recovering from an error, report this error.  */
+  if (!yyerrstatus)
+    {
+      ++yynerrs;
+#if ! YYERROR_VERBOSE
+      yyerror (YY_("syntax error"));
+#else
+# define YYSYNTAX_ERROR yysyntax_error (&yymsg_alloc, &yymsg, \
+                                        yyssp, yytoken)
+      {
+        char const *yymsgp = YY_("syntax error");
+        int yysyntax_error_status;
+        yysyntax_error_status = YYSYNTAX_ERROR;
+        if (yysyntax_error_status == 0)
+          yymsgp = yymsg;
+        else if (yysyntax_error_status == 1)
+          {
+            if (yymsg != yymsgbuf)
+              YYSTACK_FREE (yymsg);
+            yymsg = (char *) YYSTACK_ALLOC (yymsg_alloc);
+            if (!yymsg)
+              {
+                yymsg = yymsgbuf;
+                yymsg_alloc = sizeof yymsgbuf;
+                yysyntax_error_status = 2;
+              }
+            else
+              {
+                yysyntax_error_status = YYSYNTAX_ERROR;
+                yymsgp = yymsg;
+              }
+          }
+        yyerror (yymsgp);
+        if (yysyntax_error_status == 2)
+          goto yyexhaustedlab;
+      }
+# undef YYSYNTAX_ERROR
+#endif
+    }
+
+
+
+  if (yyerrstatus == 3)
+    {
+      /* If just tried and failed to reuse lookahead token after an
+	 error, discard it.  */
+
+      if (yychar <= YYEOF)
+	{
+	  /* Return failure if at end of input.  */
+	  if (yychar == YYEOF)
+	    YYABORT;
+	}
+      else
+	{
+	  yydestruct ("Error: discarding",
+		      yytoken, &yylval);
+	  yychar = YYEMPTY;
+	}
+    }
+
+  /* Else will try to reuse lookahead token after shifting the error
+     token.  */
+  goto yyerrlab1;
+
+
+/*---------------------------------------------------.
+| yyerrorlab -- error raised explicitly by YYERROR.  |
+`---------------------------------------------------*/
+yyerrorlab:
+
+  /* Pacify compilers like GCC when the user code never invokes
+     YYERROR and the label yyerrorlab therefore never appears in user
+     code.  */
+  if (/*CONSTCOND*/ 0)
+     goto yyerrorlab;
+
+  /* Do not reclaim the symbols of the rule which action triggered
+     this YYERROR.  */
+  YYPOPSTACK (yylen);
+  yylen = 0;
+  YY_STACK_PRINT (yyss, yyssp);
+  yystate = *yyssp;
+  goto yyerrlab1;
+
+
+/*-------------------------------------------------------------.
+| yyerrlab1 -- common code for both syntax error and YYERROR.  |
+`-------------------------------------------------------------*/
+yyerrlab1:
+  yyerrstatus = 3;	/* Each real token shifted decrements this.  */
+
+  for (;;)
+    {
+      yyn = yypact[yystate];
+      if (!yypact_value_is_default (yyn))
+	{
+	  yyn += YYTERROR;
+	  if (0 <= yyn && yyn <= YYLAST && yycheck[yyn] == YYTERROR)
+	    {
+	      yyn = yytable[yyn];
+	      if (0 < yyn)
+		break;
+	    }
+	}
+
+      /* Pop the current state because it cannot handle the error token.  */
+      if (yyssp == yyss)
+	YYABORT;
+
+
+      yydestruct ("Error: popping",
+		  yystos[yystate], yyvsp);
+      YYPOPSTACK (1);
+      yystate = *yyssp;
+      YY_STACK_PRINT (yyss, yyssp);
+    }
+
+  *++yyvsp = yylval;
+
+
+  /* Shift the error token.  */
+  YY_SYMBOL_PRINT ("Shifting", yystos[yyn], yyvsp, yylsp);
+
+  yystate = yyn;
+  goto yynewstate;
+
+
+/*-------------------------------------.
+| yyacceptlab -- YYACCEPT comes here.  |
+`-------------------------------------*/
+yyacceptlab:
+  yyresult = 0;
+  goto yyreturn;
+
+/*-----------------------------------.
+| yyabortlab -- YYABORT comes here.  |
+`-----------------------------------*/
+yyabortlab:
+  yyresult = 1;
+  goto yyreturn;
+
+#if !defined(yyoverflow) || YYERROR_VERBOSE
+/*-------------------------------------------------.
+| yyexhaustedlab -- memory exhaustion comes here.  |
+`-------------------------------------------------*/
+yyexhaustedlab:
+  yyerror (YY_("memory exhausted"));
+  yyresult = 2;
+  /* Fall through.  */
+#endif
+
+yyreturn:
+  if (yychar != YYEMPTY)
+    {
+      /* Make sure we have latest lookahead translation.  See comments at
+         user semantic actions for why this is necessary.  */
+      yytoken = YYTRANSLATE (yychar);
+      yydestruct ("Cleanup: discarding lookahead",
+                  yytoken, &yylval);
+    }
+  /* Do not reclaim the symbols of the rule which action triggered
+     this YYABORT or YYACCEPT.  */
+  YYPOPSTACK (yylen);
+  YY_STACK_PRINT (yyss, yyssp);
+  while (yyssp != yyss)
+    {
+      yydestruct ("Cleanup: popping",
+		  yystos[*yyssp], yyvsp);
+      YYPOPSTACK (1);
+    }
+#ifndef yyoverflow
+  if (yyss != yyssa)
+    YYSTACK_FREE (yyss);
+#endif
+#if YYERROR_VERBOSE
+  if (yymsg != yymsgbuf)
+    YYSTACK_FREE (yymsg);
+#endif
+  /* Make sure YYID is used.  */
+  return YYID (yyresult);
+}
+
+
+
+
+
+void conf_parse(const char *name)
+{
+	struct symbol *sym;
+	int i;
+
+	zconf_initscan(name);
+
+	sym_init();
+	_menu_init();
+	rootmenu.prompt = menu_add_prompt(P_MENU, "Linux Kernel Configuration", NULL);
+
+	if (getenv("ZCONF_DEBUG"))
+		zconfdebug = 1;
+	zconfparse();
+	if (zconfnerrs)
+		exit(1);
+	if (!modules_sym)
+		modules_sym = sym_find( "n" );
+
+	rootmenu.prompt->text = _(rootmenu.prompt->text);
+	rootmenu.prompt->text = sym_expand_string_value(rootmenu.prompt->text);
+
+	menu_finalize(&rootmenu);
+	for_all_symbols(i, sym) {
+		if (sym_check_deps(sym))
+			zconfnerrs++;
+	}
+	if (zconfnerrs)
+		exit(1);
+	sym_set_change_count(1);
+}
+
+static const char *zconf_tokenname(int token)
+{
+	switch (token) {
+	case T_MENU:		return "menu";
+	case T_ENDMENU:		return "endmenu";
+	case T_CHOICE:		return "choice";
+	case T_ENDCHOICE:	return "endchoice";
+	case T_IF:		return "if";
+	case T_ENDIF:		return "endif";
+	case T_DEPENDS:		return "depends";
+	case T_VISIBLE:		return "visible";
+	}
+	return "<token>";
+}
+
+static bool zconf_endtoken(const struct kconf_id *id, int starttoken, int endtoken)
+{
+	if (id->token != endtoken) {
+		zconf_error("unexpected '%s' within %s block",
+			kconf_id_strings + id->name, zconf_tokenname(starttoken));
+		zconfnerrs++;
+		return false;
+	}
+	if (current_menu->file != current_file) {
+		zconf_error("'%s' in different file than '%s'",
+			kconf_id_strings + id->name, zconf_tokenname(starttoken));
+		fprintf(stderr, "%s:%d: location of the '%s'\n",
+			current_menu->file->name, current_menu->lineno,
+			zconf_tokenname(starttoken));
+		zconfnerrs++;
+		return false;
+	}
+	return true;
+}
+
+static void zconfprint(const char *err, ...)
+{
+	va_list ap;
+
+	fprintf(stderr, "%s:%d: ", zconf_curname(), zconf_lineno());
+	va_start(ap, err);
+	vfprintf(stderr, err, ap);
+	va_end(ap);
+	fprintf(stderr, "\n");
+}
+
+static void zconf_error(const char *err, ...)
+{
+	va_list ap;
+
+	zconfnerrs++;
+	fprintf(stderr, "%s:%d: ", zconf_curname(), zconf_lineno());
+	va_start(ap, err);
+	vfprintf(stderr, err, ap);
+	va_end(ap);
+	fprintf(stderr, "\n");
+}
+
+static void zconferror(const char *err)
+{
+	fprintf(stderr, "%s:%d: %s\n", zconf_curname(), zconf_lineno() + 1, err);
+}
+
+static void print_quoted_string(FILE *out, const char *str)
+{
+	const char *p;
+	int len;
+
+	putc('"', out);
+	while ((p = strchr(str, '"'))) {
+		len = p - str;
+		if (len)
+			fprintf(out, "%.*s", len, str);
+		fputs("\\\"", out);
+		str = p + 1;
+	}
+	fputs(str, out);
+	putc('"', out);
+}
+
+static void print_symbol(FILE *out, struct menu *menu)
+{
+	struct symbol *sym = menu->sym;
+	struct property *prop;
+
+	if (sym_is_choice(sym))
+		fprintf(out, "\nchoice\n");
+	else
+		fprintf(out, "\nconfig %s\n", sym->name);
+	switch (sym->type) {
+	case S_BOOLEAN:
+		fputs("  boolean\n", out);
+		break;
+	case S_TRISTATE:
+		fputs("  tristate\n", out);
+		break;
+	case S_STRING:
+		fputs("  string\n", out);
+		break;
+	case S_INT:
+		fputs("  integer\n", out);
+		break;
+	case S_HEX:
+		fputs("  hex\n", out);
+		break;
+	default:
+		fputs("  ???\n", out);
+		break;
+	}
+	for (prop = sym->prop; prop; prop = prop->next) {
+		if (prop->menu != menu)
+			continue;
+		switch (prop->type) {
+		case P_PROMPT:
+			fputs("  prompt ", out);
+			print_quoted_string(out, prop->text);
+			if (!expr_is_yes(prop->visible.expr)) {
+				fputs(" if ", out);
+				expr_fprint(prop->visible.expr, out);
+			}
+			fputc('\n', out);
+			break;
+		case P_DEFAULT:
+			fputs( "  default ", out);
+			expr_fprint(prop->expr, out);
+			if (!expr_is_yes(prop->visible.expr)) {
+				fputs(" if ", out);
+				expr_fprint(prop->visible.expr, out);
+			}
+			fputc('\n', out);
+			break;
+		case P_CHOICE:
+			fputs("  #choice value\n", out);
+			break;
+		case P_SELECT:
+			fputs( "  select ", out);
+			expr_fprint(prop->expr, out);
+			fputc('\n', out);
+			break;
+		case P_RANGE:
+			fputs( "  range ", out);
+			expr_fprint(prop->expr, out);
+			fputc('\n', out);
+			break;
+		case P_MENU:
+			fputs( "  menu ", out);
+			print_quoted_string(out, prop->text);
+			fputc('\n', out);
+			break;
+		default:
+			fprintf(out, "  unknown prop %d!\n", prop->type);
+			break;
+		}
+	}
+	if (menu->help) {
+		int len = strlen(menu->help);
+		while (menu->help[--len] == '\n')
+			menu->help[len] = 0;
+		fprintf(out, "  help\n%s\n", menu->help);
+	}
+}
+
+void zconfdump(FILE *out)
+{
+	struct property *prop;
+	struct symbol *sym;
+	struct menu *menu;
+
+	menu = rootmenu.list;
+	while (menu) {
+		if ((sym = menu->sym))
+			print_symbol(out, menu);
+		else if ((prop = menu->prompt)) {
+			switch (prop->type) {
+			case P_COMMENT:
+				fputs("\ncomment ", out);
+				print_quoted_string(out, prop->text);
+				fputs("\n", out);
+				break;
+			case P_MENU:
+				fputs("\nmenu ", out);
+				print_quoted_string(out, prop->text);
+				fputs("\n", out);
+				break;
+			default:
+				;
+			}
+			if (!expr_is_yes(prop->visible.expr)) {
+				fputs("  depends ", out);
+				expr_fprint(prop->visible.expr, out);
+				fputc('\n', out);
+			}
+		}
+
+		if (menu->list)
+			menu = menu->list;
+		else if (menu->next)
+			menu = menu->next;
+		else while ((menu = menu->parent)) {
+			if (menu->prompt && menu->prompt->type == P_MENU)
+				fputs("\nendmenu\n", out);
+			if (menu->next) {
+				menu = menu->next;
+				break;
+			}
+		}
+	}
+}
+
+#include "zconf.lex.c"
+#include "util.c"
+#include "confdata.c"
+#include "expr.c"
+#include "symbol.c"
+#include "menu.c"
+
diff -uNr old/security/tomoyo/builtin-policy.h new/security/tomoyo/builtin-policy.h
--- old/security/tomoyo/builtin-policy.h	1970-01-01 05:30:00.000000000 +0530
+++ new/security/tomoyo/builtin-policy.h	2015-01-29 23:49:06.000000000 +0530
@@ -0,0 +1,12 @@
+static char tomoyo_builtin_profile[] __initdata =
+"";
+static char tomoyo_builtin_exception_policy[] __initdata =
+"initialize_domain /sbin/modprobe from any\n"
+"initialize_domain /sbin/hotplug from any\n"
+"";
+static char tomoyo_builtin_domain_policy[] __initdata =
+"";
+static char tomoyo_builtin_manager[] __initdata =
+"";
+static char tomoyo_builtin_stat[] __initdata =
+"";
diff -uNr old/security/tomoyo/policy/exception_policy.conf new/security/tomoyo/policy/exception_policy.conf
--- old/security/tomoyo/policy/exception_policy.conf	1970-01-01 05:30:00.000000000 +0530
+++ new/security/tomoyo/policy/exception_policy.conf	2015-01-29 23:49:06.000000000 +0530
@@ -0,0 +1,2 @@
+initialize_domain /sbin/modprobe from any
+initialize_domain /sbin/hotplug from any
